
LAB4_LineFollowing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a830  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800aa30  0800aa30  0001aa30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae04  0800ae04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae04  0800ae04  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae0c  0800ae0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae0c  0800ae0c  0001ae0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ae14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  200001e4  0800aff8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  0800aff8  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179bd  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df9  00000000  00000000  00037c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001087  00000000  00000000  0003bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9f8  00000000  00000000  0003cfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001993d  00000000  00000000  0006799f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107cbf  00000000  00000000  000812dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067dc  00000000  00000000  00188f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0018f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aa18 	.word	0x0800aa18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800aa18 	.word	0x0800aa18

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b089      	sub	sp, #36	; 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	4413      	add	r3, r2
 80005fe:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000608:	2301      	movs	r3, #1
 800060a:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 800060c:	e025      	b.n	800065a <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d109      	bne.n	800062a <cobsEncode+0x3e>
            FinishBlock(code);
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	7efa      	ldrb	r2, [r7, #27]
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	2301      	movs	r3, #1
 8000626:	76fb      	strb	r3, [r7, #27]
 8000628:	e014      	b.n	8000654 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000636:	7efb      	ldrb	r3, [r7, #27]
 8000638:	3301      	adds	r3, #1
 800063a:	76fb      	strb	r3, [r7, #27]
 800063c:	7efb      	ldrb	r3, [r7, #27]
 800063e:	2bff      	cmp	r3, #255	; 0xff
 8000640:	d108      	bne.n	8000654 <cobsEncode+0x68>
                FinishBlock(code);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	7efa      	ldrb	r2, [r7, #27]
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	2301      	movs	r3, #1
 8000652:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3d5      	bcc.n	800060e <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	7efa      	ldrb	r2, [r7, #27]
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	2301      	movs	r3, #1
 8000672:	76fb      	strb	r3, [r7, #27]
}
 8000674:	bf00      	nop
 8000676:	3724      	adds	r7, #36	; 0x24
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d01c      	beq.n	80006ce <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3321      	adds	r3, #33	; 0x21
 8000698:	461a      	mov	r2, r3
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff ffa5 	bl	80005ec <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3302      	adds	r3, #2
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	2303      	movs	r3, #3
 80006c6:	f006 ffcd 	bl	8007664 <HAL_UART_Transmit>
 80006ca:	4603      	mov	r3, r0
 80006cc:	e000      	b.n	80006d0 <ertc_dlog_send+0x50>
	}

	return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	2303      	movs	r3, #3
 80006ec:	2201      	movs	r2, #1
 80006ee:	f007 f83c 	bl	800776a <HAL_UART_Receive>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d111      	bne.n	800071c <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	2b41      	cmp	r3, #65	; 0x41
 80006fe:	d002      	beq.n	8000706 <ertc_dlog_update+0x2e>
 8000700:	2b42      	cmp	r3, #66	; 0x42
 8000702:	d004      	beq.n	800070e <ertc_dlog_update+0x36>
 8000704:	e007      	b.n	8000716 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e006      	b.n	800071c <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
				break;
 8000714:	e002      	b.n	800071c <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800072e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000732:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d013      	beq.n	8000766 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800073e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000742:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000746:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00b      	beq.n	8000766 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800074e:	e000      	b.n	8000752 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000750:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000752:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f9      	beq.n	8000750 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800075c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000766:	687b      	ldr	r3, [r7, #4]
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	0000      	movs	r0, r0
	...

08000778 <update_encoder>:
PIDInstance pid_B;
PIDInstance pid_line;

// accurately determining the velocity and radians per second of an encoder based on the count of a timer peripheral.
void update_encoder(EncoderInstance *encoder_value, TIM_HandleTypeDef *htim)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	// __HAL_TIM_GET_AUTORELOAD(htim) retrieves the value of the auto-reload register (ARR). Professor used "ARR - 1" in the function given by him. Check if we need -1 when using the HAL macro.

	uint32_t TIM_CurrentCount = __HAL_TIM_GET_COUNTER(htim);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000788:	60fb      	str	r3, [r7, #12]
	static bool first_time = 1;
	//For the first call of the function assume velocity is zero
	if(first_time)
 800078a:	4b43      	ldr	r3, [pc, #268]	; (8000898 <update_encoder+0x120>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d007      	beq.n	80007a2 <update_encoder+0x2a>
	{
		encoder_value ->velocity = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f04f 0200 	mov.w	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
		first_time = 0;
 800079a:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <update_encoder+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e053      	b.n	800084a <update_encoder+0xd2>
	}
	else
	{
		// This one is self explanatory, if the current counter is the same as the previous the velocity is 0
		if(TIM_CurrentCount == encoder_value->previous_count)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d104      	bne.n	80007b6 <update_encoder+0x3e>
		{
			encoder_value->velocity = 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e049      	b.n	800084a <update_encoder+0xd2>
		}
		// Moving FORWARD; evaluate increment of TIM counter from previous count
		else if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	2b10      	cmp	r3, #16
 80007c2:	d121      	bne.n	8000808 <update_encoder+0x90>
		{
			// check for counter underflow
			if (TIM_CurrentCount < encoder_value->previous_count)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d20b      	bcs.n	80007e6 <update_encoder+0x6e>
				encoder_value->velocity = TIM_CurrentCount - encoder_value->previous_count;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	edc3 7a00 	vstr	s15, [r3]
 80007e4:	e031      	b.n	800084a <update_encoder+0xd2>
			else
				encoder_value->velocity = -((__HAL_TIM_GET_AUTORELOAD(htim)+1) - TIM_CurrentCount) - encoder_value->previous_count;//__HAL_TIM_GET_AUTORELOAD(htim)+1
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	1ad2      	subs	r2, r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	3b01      	subs	r3, #1
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	edc3 7a00 	vstr	s15, [r3]
 8000806:	e020      	b.n	800084a <update_encoder+0xd2>
		}
		// Moving BACKWARDS
		else
		{
			/* check for counter overflow */
			if (TIM_CurrentCount > encoder_value->previous_count)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	429a      	cmp	r2, r3
 8000810:	d90b      	bls.n	800082a <update_encoder+0xb2>
				encoder_value->velocity = TIM_CurrentCount - encoder_value->previous_count;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	edc3 7a00 	vstr	s15, [r3]
 8000828:	e00f      	b.n	800084a <update_encoder+0xd2>
			else
				encoder_value->velocity = ((__HAL_TIM_GET_AUTORELOAD(htim)+1) - encoder_value->previous_count) + TIM_CurrentCount;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	1ad2      	subs	r2, r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	3301      	adds	r3, #1
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	encoder_value->radians_second = (((encoder_value->velocity)/3840)/TS)*(2*M_PI);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	ed93 7a00 	vldr	s14, [r3]
 8000850:	eddf 6a12 	vldr	s13, [pc, #72]	; 800089c <update_encoder+0x124>
 8000854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000858:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800085c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000888 <update_encoder+0x110>
 8000860:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000864:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000890 <update_encoder+0x118>
 8000868:	ee27 7b06 	vmul.f64	d7, d7, d6
 800086c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	edc3 7a01 	vstr	s15, [r3, #4]
	encoder_value->previous_count = TIM_CurrentCount;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	609a      	str	r2, [r3, #8]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	47ae147b 	.word	0x47ae147b
 800088c:	3f847ae1 	.word	0x3f847ae1
 8000890:	54442d18 	.word	0x54442d18
 8000894:	401921fb 	.word	0x401921fb
 8000898:	2000000d 	.word	0x2000000d
 800089c:	45700000 	.word	0x45700000

080008a0 <set_pid_gains>:


void set_pid_gains(PIDInstance *pid, float p, float i, float d) {
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80008ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80008b0:	ed87 1a00 	vstr	s2, [r7]
	pid->p_gain = p;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	601a      	str	r2, [r3, #0]
	pid->i_gain = i;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	605a      	str	r2, [r3, #4]
	pid->d_gain = d;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	609a      	str	r2, [r3, #8]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <reset_pid>:

void reset_pid(PIDInstance *pid) {
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	pid->error_integral = 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
	pid->last_error = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
	pid->output = 0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f04f 0200 	mov.w	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <apply_pid>:

void apply_pid(PIDInstance *pid, float input_error, int16_t PID_MAX, int16_t sampling_rate) {
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	ed87 0a02 	vstr	s0, [r7, #8]
 800090c:	460b      	mov	r3, r1
 800090e:	80fb      	strh	r3, [r7, #6]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
	// Accumulate error for integral control
	pid->error_integral += input_error;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	ed93 7a03 	vldr	s14, [r3, #12]
 800091a:	edd7 7a02 	vldr	s15, [r7, #8]
 800091e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	edc3 7a03 	vstr	s15, [r3, #12]

	// Bound integral term
	if (pid->error_integral > INTEGRAL_MAX_GAIN)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	edd3 7a03 	vldr	s15, [r3, #12]
 800092e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000a38 <apply_pid+0x138>
 8000932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093a:	dd03      	ble.n	8000944 <apply_pid+0x44>
		pid->error_integral = INTEGRAL_MAX_GAIN;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4a3f      	ldr	r2, [pc, #252]	; (8000a3c <apply_pid+0x13c>)
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	e00c      	b.n	800095e <apply_pid+0x5e>
	else if (pid->error_integral < -INTEGRAL_MAX_GAIN)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	edd3 7a03 	vldr	s15, [r3, #12]
 800094a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000a40 <apply_pid+0x140>
 800094e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000956:	d502      	bpl.n	800095e <apply_pid+0x5e>
		pid->error_integral = -INTEGRAL_MAX_GAIN;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a3a      	ldr	r2, [pc, #232]	; (8000a44 <apply_pid+0x144>)
 800095c:	60da      	str	r2, [r3, #12]

	// Compute PID output
	pid->output = (float)(
			pid->p_gain * input_error +
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	ed93 7a00 	vldr	s14, [r3]
 8000964:	edd7 7a02 	vldr	s15, [r7, #8]
 8000968:	ee27 7a27 	vmul.f32	s14, s14, s15
			pid->i_gain * (pid->error_integral) / sampling_rate +
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	edd3 7a03 	vldr	s15, [r3, #12]
 8000978:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800097c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000988:	eec6 7a26 	vdiv.f32	s15, s12, s13
			pid->p_gain * input_error +
 800098c:	ee37 7a27 	vadd.f32	s14, s14, s15
			pid->d_gain * sampling_rate * (input_error - pid->last_error)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	edd3 6a02 	vldr	s13, [r3, #8]
 8000996:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099a:	ee07 3a90 	vmov	s15, r3
 800099e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80009b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80009b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	pid->output = (float)(
 80009b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	edc3 7a05 	vstr	s15, [r3, #20]
	);
	// sampling_rate in Hz, that s why in Integral is '/' instead of '*' and in Derivative '*' instead of '/' (Hz = 1/s)

	// Bound output
	if (pid->output > PID_MAX)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80009c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009cc:	ee07 3a90 	vmov	s15, r3
 80009d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009dc:	dd09      	ble.n	80009f2 <apply_pid+0xf2>
		pid->output = PID_MAX;
 80009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e2:	ee07 3a90 	vmov	s15, r3
 80009e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	edc3 7a05 	vstr	s15, [r3, #20]
 80009f0:	e018      	b.n	8000a24 <apply_pid+0x124>
	else if (pid->output < -PID_MAX)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80009f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fc:	425b      	negs	r3, r3
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	d509      	bpl.n	8000a24 <apply_pid+0x124>
		pid->output = -PID_MAX;
 8000a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a14:	425b      	negs	r3, r3
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	edc3 7a05 	vstr	s15, [r3, #20]

	// Update last error for derivative control
	pid->last_error = input_error;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	44fa0000 	.word	0x44fa0000
 8000a3c:	44fa0000 	.word	0x44fa0000
 8000a40:	c4fa0000 	.word	0xc4fa0000
 8000a44:	c4fa0000 	.word	0xc4fa0000

08000a48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af04      	add	r7, sp, #16
 8000a4e:	6078      	str	r0, [r7, #4]
	/* Speed control routine */
	if(htim->Instance == TIM6)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4aa7      	ldr	r2, [pc, #668]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	f040 8197 	bne.w	8000d8a <HAL_TIM_PeriodElapsedCallback+0x342>
	{

		// ------------ ENCODER READING ------------
		update_encoder(&encoder_instance_motA, &htim3);
 8000a5c:	49a6      	ldr	r1, [pc, #664]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a5e:	48a7      	ldr	r0, [pc, #668]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a60:	f7ff fe8a 	bl	8000778 <update_encoder>
		update_encoder(&encoder_instance_motB, &htim4);
 8000a64:	49a6      	ldr	r1, [pc, #664]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a66:	48a7      	ldr	r0, [pc, #668]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a68:	f7ff fe86 	bl	8000778 <update_encoder>


		// ------- LINE SENSOR ERROR READING -------

		static uint8_t line_data[1];
		HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, 0x10, 1, line_data, 1, 100);
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	4ba4      	ldr	r3, [pc, #656]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	217c      	movs	r1, #124	; 0x7c
 8000a7e:	48a3      	ldr	r0, [pc, #652]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a80:	f003 f8ea 	bl	8003c58 <HAL_I2C_Mem_Read>
		//printf("Reflectance Sensor reading: %d \n", (uint8_t)line_data[0]);
		int sum_of_bits = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 8; i++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	e023      	b.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x8e>
			// take the i-th bit of sensor
			uint8_t bit_i = (line_data[0] >> i) & 1;
 8000a8e:	4b9e      	ldr	r3, [pc, #632]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
			// compute the sum of the denominator in the error formula
			sum_of_bits += bit_i;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]
			// compute the sum of the numerator in the error formula bn*wn
			e += bit_i * w[i];
 8000aaa:	4a99      	ldr	r2, [pc, #612]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4413      	add	r3, r2
 8000ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	fb12 f303 	smulbb	r3, r2, r3
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b95      	ldr	r3, [pc, #596]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	b25a      	sxtb	r2, r3
 8000acc:	4b91      	ldr	r3, [pc, #580]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ace:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	2b07      	cmp	r3, #7
 8000ada:	ddd8      	ble.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x46>
		}

		if (sum_of_bits != 0)	 // avoiding division by zero
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00a      	beq.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0xb0>
			e = e / sum_of_bits;
 8000ae2:	4b8c      	ldr	r3, [pc, #560]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ae4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fb92 f3f3 	sdiv	r3, r2, r3
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	4b88      	ldr	r3, [pc, #544]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e010      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0xd2>

		// if previous values were not zero, and current value is zero, then increase the error to correct the YAW
		else if (prev_error < 0) // if previous error was negative
 8000af8:	4b87      	ldr	r3, [pc, #540]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000afa:	f993 3000 	ldrsb.w	r3, [r3]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da03      	bge.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0xc2>
			e = -40;
 8000b02:	4b84      	ldr	r3, [pc, #528]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b04:	22d8      	movs	r2, #216	; 0xd8
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0xd2>
		else if (prev_error > 0) // if was positive
 8000b0a:	4b83      	ldr	r3, [pc, #524]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dd02      	ble.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0xd2>
			e = 40;
 8000b14:	4b7f      	ldr	r3, [pc, #508]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b16:	2228      	movs	r2, #40	; 0x28
 8000b18:	701a      	strb	r2, [r3, #0]

		printf("Error:%d",e);
 8000b1a:	4b7e      	ldr	r3, [pc, #504]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b20:	4619      	mov	r1, r3
 8000b22:	487e      	ldr	r0, [pc, #504]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b24:	f007 fffc 	bl	8008b20 <iprintf>
		// store current error for next iteration
		prev_error = e;
 8000b28:	4b7a      	ldr	r3, [pc, #488]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b2a:	f993 2000 	ldrsb.w	r2, [r3]
 8000b2e:	4b7a      	ldr	r3, [pc, #488]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b30:	701a      	strb	r2, [r3, #0]

		// ------ END LINE SENSOR ERROR READING ------


		// ---------- PID LINE SENSOR ERROR  ----------
		apply_pid(&pid_line, e, 10, 100); // 3 is the pid_line.output limit
 8000b32:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b34:	f993 3000 	ldrsb.w	r3, [r3]
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b40:	2264      	movs	r2, #100	; 0x64
 8000b42:	210a      	movs	r1, #10
 8000b44:	eeb0 0a67 	vmov.f32	s0, s15
 8000b48:	4875      	ldr	r0, [pc, #468]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b4a:	f7ff fed9 	bl	8000900 <apply_pid>
		SPEED_REFERENCE_A = BASE_SPEED - pid_line.output ;
 8000b4e:	4b75      	ldr	r3, [pc, #468]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b50:	ed93 7a00 	vldr	s14, [r3]
 8000b54:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b56:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5e:	4b72      	ldr	r3, [pc, #456]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b60:	edc3 7a00 	vstr	s15, [r3]
		SPEED_REFERENCE_B = BASE_SPEED + pid_line.output ;
 8000b64:	4b6e      	ldr	r3, [pc, #440]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b66:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b6a:	4b6e      	ldr	r3, [pc, #440]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b6c:	edd3 7a00 	vldr	s15, [r3]
 8000b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b74:	4b6d      	ldr	r3, [pc, #436]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000b76:	edc3 7a00 	vstr	s15, [r3]



		// ---------- PID TO RUN MOTOR ------------

		if(pid_A.p_gain != 0 || pid_A.i_gain != 0 || pid_A.d_gain != 0)
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b7c:	edd3 7a00 	vldr	s15, [r3]
 8000b80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b88:	d10f      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x162>
 8000b8a:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b98:	d107      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x162>
 8000b9a:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ba0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba8:	d041      	beq.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x1e6>
		{
			apply_pid(&pid_A, SPEED_REFERENCE_A - encoder_instance_motA.radians_second, 399, 100); //96000000/(960*1000) = 100
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000bac:	ed93 7a00 	vldr	s14, [r3]
 8000bb0:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bba:	2264      	movs	r2, #100	; 0x64
 8000bbc:	f240 118f 	movw	r1, #399	; 0x18f
 8000bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc4:	485a      	ldr	r0, [pc, #360]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bc6:	f7ff fe9b 	bl	8000900 <apply_pid>
			if(pid_A.output < MIN_PMW)
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d503      	bpl.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x19a>
			    {
			        // If so, set it to the minimum value
			        pid_A.output = -MIN_PMW;
 8000bda:	4b55      	ldr	r3, [pc, #340]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
			    }
			if(pid_A.output > 0)
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000be4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf0:	dd0e      	ble.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (int32_t)pid_A.output);
 8000bf2:	4b4f      	ldr	r3, [pc, #316]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	ee17 2a90 	vmov	r2, s15
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000c06:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38
			if(pid_A.output > 0)
 8000c0e:	e016      	b.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x1f6>
			}
			else
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000c10:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (int32_t)pid_A.output);
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c22:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	ee17 2a90 	vmov	r2, s15
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
			if(pid_A.output > 0)
 8000c2c:	e007      	b.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x1f6>
			}
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0); // value between 0 and ARR (in our case, for TIM8, ARR = 399)
 8000c2e:	4b41      	ldr	r3, [pc, #260]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
		}

		if(pid_B.p_gain != 0 || pid_B.i_gain != 0 || pid_B.d_gain != 0)
 8000c3e:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c40:	edd3 7a00 	vldr	s15, [r3]
 8000c44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	d10f      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x226>
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c50:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	d107      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x226>
 8000c5e:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c60:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	d066      	beq.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x2f4>
		{
			apply_pid(&pid_B, SPEED_REFERENCE_B - encoder_instance_motB.radians_second, 399,100); //96000000/(960*1000) = 100
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000c70:	ed93 7a00 	vldr	s14, [r3]
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7e:	2264      	movs	r2, #100	; 0x64
 8000c80:	f240 118f 	movw	r1, #399	; 0x18f
 8000c84:	eeb0 0a67 	vmov.f32	s0, s15
 8000c88:	482b      	ldr	r0, [pc, #172]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c8a:	f7ff fe39 	bl	8000900 <apply_pid>
			if(pid_B.output < MIN_PMW)
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000c90:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9c:	d503      	bpl.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x25e>
			    {
			        // If so, set it to the minimum value
			        pid_B.output = -MIN_PMW;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
			    }
			if(pid_B.output > 0)
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000ca8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb4:	dd0e      	ble.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x28c>
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (int32_t)pid_B.output);
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000cb8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	ee17 2a90 	vmov	r2, s15
 8000cc8:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	641a      	str	r2, [r3, #64]	; 0x40
			if(pid_B.output > 0)
 8000cd2:	e03b      	b.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x304>
			}
			else
			{
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (int32_t)pid_B.output);
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000cde:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	ee17 2a90 	vmov	r2, s15
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
			if(pid_B.output > 0)
 8000cf0:	e02c      	b.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x304>
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000
 8000cf8:	200003ec 	.word	0x200003ec
 8000cfc:	20000948 	.word	0x20000948
 8000d00:	20000438 	.word	0x20000438
 8000d04:	20000954 	.word	0x20000954
 8000d08:	200009a8 	.word	0x200009a8
 8000d0c:	20000248 	.word	0x20000248
 8000d10:	20000004 	.word	0x20000004
 8000d14:	20000930 	.word	0x20000930
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	0800aa30 	.word	0x0800aa30
 8000d20:	20000990 	.word	0x20000990
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000928 	.word	0x20000928
 8000d2c:	2000092c 	.word	0x2000092c
 8000d30:	20000960 	.word	0x20000960
 8000d34:	2000051c 	.word	0x2000051c
 8000d38:	20000978 	.word	0x20000978
			}
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0); // value between 0 and ARR (in our case, for TIM8, ARR = 399)
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
		// ---------- END PID TO RUN MOTOR ------------



		// ---------------- LOGGER ------------------
		data.speedA = SPEED_REFERENCE_A;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d52:	6053      	str	r3, [r2, #4]
		data.speedB = SPEED_REFERENCE_B;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d5a:	60d3      	str	r3, [r2, #12]
		data.encoderA = encoder_instance_motA.radians_second;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d62:	6013      	str	r3, [r2, #0]
		data.encoderB = encoder_instance_motB.radians_second;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d6a:	6093      	str	r3, [r2, #8]
		data.errorLine = e;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d7c:	edc3 7a04 	vstr	s15, [r3, #16]
		ertc_dlog_send(&logger, &data, sizeof(data));
 8000d80:	2214      	movs	r2, #20
 8000d82:	4906      	ldr	r1, [pc, #24]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000d86:	f7ff fc7b 	bl	8000680 <ertc_dlog_send>

	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000051c 	.word	0x2000051c
 8000d98:	20000928 	.word	0x20000928
 8000d9c:	20000934 	.word	0x20000934
 8000da0:	2000092c 	.word	0x2000092c
 8000da4:	20000948 	.word	0x20000948
 8000da8:	20000954 	.word	0x20000954
 8000dac:	20000930 	.word	0x20000930
 8000db0:	2000085c 	.word	0x2000085c

08000db4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc4:	d102      	bne.n	8000dcc <HAL_GPIO_EXTI_Callback+0x18>
	{
		printf("INTERUPT \n");
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000dc8:	f007 ff10 	bl	8008bec <puts>
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0800aa3c 	.word	0x0800aa3c

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f001 ff92 	bl	8002d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f975 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 ffcd 	bl	8001d84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000dea:	f000 ff9b 	bl	8001d24 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000dee:	f000 f9e1 	bl	80011b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000df2:	f000 fa31 	bl	8001258 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000df6:	f000 fa6f 	bl	80012d8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000dfa:	f000 faad 	bl	8001358 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000dfe:	f000 fae9 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e02:	f000 fbb7 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e06:	f000 fc4f 	bl	80016a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e0a:	f000 fca3 	bl	8001754 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e0e:	f000 fcf7 	bl	8001800 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e12:	f000 fda5 	bl	8001960 <MX_TIM8_Init>
  MX_UART4_Init();
 8000e16:	f000 fec5 	bl	8001ba4 <MX_UART4_Init>
  MX_UART5_Init();
 8000e1a:	f000 fef3 	bl	8001c04 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 ff21 	bl	8001c64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e22:	f000 ff4f 	bl	8001cc4 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000e26:	f000 fe6d 	bl	8001b04 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000e2a:	f000 fd61 	bl	80018f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	//--------------------------------------------------------------------------------------------

	/* Disable LCD SPI SS */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	4894      	ldr	r0, [pc, #592]	; (8001084 <main+0x2ac>)
 8000e34:	f002 fd3a 	bl	80038ac <HAL_GPIO_WritePin>
	/* Disable EXTI2_IRQ during SX1509 initialization */
	//HAL_NVIC_DisableIRQ(EXTI2_IRQn);

	/* Software reset */
	data = 0x12;
 8000e38:	2312      	movs	r3, #18
 8000e3a:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000e3c:	23c8      	movs	r3, #200	; 0xc8
 8000e3e:	9302      	str	r3, [sp, #8]
 8000e40:	2301      	movs	r3, #1
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	1dbb      	adds	r3, r7, #6
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	227d      	movs	r2, #125	; 0x7d
 8000e4c:	217c      	movs	r1, #124	; 0x7c
 8000e4e:	488e      	ldr	r0, [pc, #568]	; (8001088 <main+0x2b0>)
 8000e50:	f002 fdee 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <main+0x90>
		printf("I2C communication error (%X).\n", status);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4619      	mov	r1, r3
 8000e62:	488a      	ldr	r0, [pc, #552]	; (800108c <main+0x2b4>)
 8000e64:	f007 fe5c 	bl	8008b20 <iprintf>

	data = 0x34;
 8000e68:	2334      	movs	r3, #52	; 0x34
 8000e6a:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000e6c:	23c8      	movs	r3, #200	; 0xc8
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	2301      	movs	r3, #1
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	227d      	movs	r2, #125	; 0x7d
 8000e7c:	217c      	movs	r1, #124	; 0x7c
 8000e7e:	4882      	ldr	r0, [pc, #520]	; (8001088 <main+0x2b0>)
 8000e80:	f002 fdd6 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <main+0xc0>
		printf("I2C communication error (%X).\n", status);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4619      	mov	r1, r3
 8000e92:	487e      	ldr	r0, [pc, #504]	; (800108c <main+0x2b4>)
 8000e94:	f007 fe44 	bl	8008b20 <iprintf>

	HAL_Delay(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f001 ff91 	bl	8002dc0 <HAL_Delay>

	/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000e9e:	23ff      	movs	r3, #255	; 0xff
 8000ea0:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000ea2:	23c8      	movs	r3, #200	; 0xc8
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	217c      	movs	r1, #124	; 0x7c
 8000eb4:	4874      	ldr	r0, [pc, #464]	; (8001088 <main+0x2b0>)
 8000eb6:	f002 fdbb 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <main+0xf6>
		printf("I2C communication error (%X).\n", status);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4870      	ldr	r0, [pc, #448]	; (800108c <main+0x2b4>)
 8000eca:	f007 fe29 	bl	8008b20 <iprintf>

	/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000ece:	23ff      	movs	r3, #255	; 0xff
 8000ed0:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000ed2:	23c8      	movs	r3, #200	; 0xc8
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	1dbb      	adds	r3, r7, #6
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	220e      	movs	r2, #14
 8000ee2:	217c      	movs	r1, #124	; 0x7c
 8000ee4:	4868      	ldr	r0, [pc, #416]	; (8001088 <main+0x2b0>)
 8000ee6:	f002 fda3 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <main+0x126>
		printf("I2C communication error (%X).\n", status);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4864      	ldr	r0, [pc, #400]	; (800108c <main+0x2b4>)
 8000efa:	f007 fe11 	bl	8008b20 <iprintf>

	/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
	data = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000f02:	23c8      	movs	r3, #200	; 0xc8
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	2213      	movs	r2, #19
 8000f12:	217c      	movs	r1, #124	; 0x7c
 8000f14:	485c      	ldr	r0, [pc, #368]	; (8001088 <main+0x2b0>)
 8000f16:	f002 fd8b 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <main+0x156>
		printf("I2C communication error (%X).\n", status);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4858      	ldr	r0, [pc, #352]	; (800108c <main+0x2b4>)
 8000f2a:	f007 fdf9 	bl	8008b20 <iprintf>

	/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000f2e:	23aa      	movs	r3, #170	; 0xaa
 8000f30:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000f32:	23c8      	movs	r3, #200	; 0xc8
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2301      	movs	r3, #1
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	1dbb      	adds	r3, r7, #6
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2216      	movs	r2, #22
 8000f42:	217c      	movs	r1, #124	; 0x7c
 8000f44:	4850      	ldr	r0, [pc, #320]	; (8001088 <main+0x2b0>)
 8000f46:	f002 fd73 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <main+0x186>
		printf("I2C communication error (%X).\n", status);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4619      	mov	r1, r3
 8000f58:	484c      	ldr	r0, [pc, #304]	; (800108c <main+0x2b4>)
 8000f5a:	f007 fde1 	bl	8008b20 <iprintf>

	/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000f5e:	23aa      	movs	r3, #170	; 0xaa
 8000f60:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000f62:	23c8      	movs	r3, #200	; 0xc8
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	1dbb      	adds	r3, r7, #6
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2217      	movs	r2, #23
 8000f72:	217c      	movs	r1, #124	; 0x7c
 8000f74:	4844      	ldr	r0, [pc, #272]	; (8001088 <main+0x2b0>)
 8000f76:	f002 fd5b 	bl	8003a30 <HAL_I2C_Mem_Write>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <main+0x1b6>
		printf("I2C communication error (%X).\n", status);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4619      	mov	r1, r3
 8000f88:	4840      	ldr	r0, [pc, #256]	; (800108c <main+0x2b4>)
 8000f8a:	f007 fdc9 	bl	8008b20 <iprintf>

	/* Enable EXTI2_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f001 ff16 	bl	8002dc0 <HAL_Delay>
	//HAL_NVIC_EnableIRQ(EXTI2_IRQn);


	printf("Read line sensor \n");
 8000f94:	483e      	ldr	r0, [pc, #248]	; (8001090 <main+0x2b8>)
 8000f96:	f007 fe29 	bl	8008bec <puts>




	//logger.uart_handle = huart3; // for serial
	logger.uart_handle = huart2; // for wifi
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <main+0x2bc>)
 8000f9c:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <main+0x2c0>)
 8000f9e:	3344      	adds	r3, #68	; 0x44
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	2288      	movs	r2, #136	; 0x88
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f007 ff80 	bl	8008eaa <memcpy>

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2110      	movs	r1, #16
 8000fae:	4835      	ldr	r0, [pc, #212]	; (8001084 <main+0x2ac>)
 8000fb0:	f002 fc7c 	bl	80038ac <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb8:	f001 ff02 	bl	8002dc0 <HAL_Delay>

	/* Start encoders timers */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fbc:	213c      	movs	r1, #60	; 0x3c
 8000fbe:	4837      	ldr	r0, [pc, #220]	; (800109c <main+0x2c4>)
 8000fc0:	f005 f826 	bl	8006010 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fc4:	213c      	movs	r1, #60	; 0x3c
 8000fc6:	4836      	ldr	r0, [pc, #216]	; (80010a0 <main+0x2c8>)
 8000fc8:	f005 f822 	bl	8006010 <HAL_TIM_Encoder_Start>

	/* Start servomotors PWM (avoid floating inputs to servomotors) */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4835      	ldr	r0, [pc, #212]	; (80010a4 <main+0x2cc>)
 8000fd0:	f004 fe1c 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <main+0x2cc>)
 8000fd8:	f004 fe18 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4831      	ldr	r0, [pc, #196]	; (80010a4 <main+0x2cc>)
 8000fe0:	f004 fe14 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000fe4:	210c      	movs	r1, #12
 8000fe6:	482f      	ldr	r0, [pc, #188]	; (80010a4 <main+0x2cc>)
 8000fe8:	f004 fe10 	bl	8005c0c <HAL_TIM_PWM_Start>

	/* Start motor PWM */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <main+0x2d0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <main+0x2d0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <main+0x2d0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <main+0x2d0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	4826      	ldr	r0, [pc, #152]	; (80010a8 <main+0x2d0>)
 8001010:	f004 fdfc 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4824      	ldr	r0, [pc, #144]	; (80010a8 <main+0x2d0>)
 8001018:	f004 fdf8 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800101c:	2108      	movs	r1, #8
 800101e:	4822      	ldr	r0, [pc, #136]	; (80010a8 <main+0x2d0>)
 8001020:	f004 fdf4 	bl	8005c0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001024:	210c      	movs	r1, #12
 8001026:	4820      	ldr	r0, [pc, #128]	; (80010a8 <main+0x2d0>)
 8001028:	f004 fdf0 	bl	8005c0c <HAL_TIM_PWM_Start>

	/* Start speed ctrl ISR */
	HAL_TIM_Base_Start_IT(&htim6);
 800102c:	481f      	ldr	r0, [pc, #124]	; (80010ac <main+0x2d4>)
 800102e:	f004 fcbd 	bl	80059ac <HAL_TIM_Base_Start_IT>


	// ########## SET UP HERE THE PID #######################################################################################################################

	// ------------------------- PID MOTOR A (right) -------------------------
	reset_pid(&pid_A);
 8001032:	481f      	ldr	r0, [pc, #124]	; (80010b0 <main+0x2d8>)
 8001034:	f7ff fc4d 	bl	80008d2 <reset_pid>
	set_pid_gains(&pid_A,90,0.1,0);
 8001038:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80010b4 <main+0x2dc>
 800103c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80010b8 <main+0x2e0>
 8001040:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80010bc <main+0x2e4>
 8001044:	481a      	ldr	r0, [pc, #104]	; (80010b0 <main+0x2d8>)
 8001046:	f7ff fc2b 	bl	80008a0 <set_pid_gains>

	// ------------------------- PID MOTOR B (left) --------------------------
	reset_pid(&pid_B);
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <main+0x2e8>)
 800104c:	f7ff fc41 	bl	80008d2 <reset_pid>
	set_pid_gains(&pid_B,90,0.1,0);
 8001050:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80010b4 <main+0x2dc>
 8001054:	eddf 0a18 	vldr	s1, [pc, #96]	; 80010b8 <main+0x2e0>
 8001058:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80010bc <main+0x2e4>
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <main+0x2e8>)
 800105e:	f7ff fc1f 	bl	80008a0 <set_pid_gains>

	// -------------------------- PID line sensor ----------------------------
	reset_pid(&pid_line);
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <main+0x2ec>)
 8001064:	f7ff fc35 	bl	80008d2 <reset_pid>
	//I choosed 0.05 bcz for error=40 we have BASE_SPEED - Kp*40 = BASE_SPEED - 2 => a change of 2rad/s in speed
	set_pid_gains(&pid_line,0.175,0.01,0); //0.175 0.01
 8001068:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80010b4 <main+0x2dc>
 800106c:	eddf 0a16 	vldr	s1, [pc, #88]	; 80010c8 <main+0x2f0>
 8001070:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80010cc <main+0x2f4>
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <main+0x2ec>)
 8001076:	f7ff fc13 	bl	80008a0 <set_pid_gains>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ertc_dlog_update(&logger);
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <main+0x2bc>)
 800107c:	f7ff fb2c 	bl	80006d8 <ertc_dlog_update>
 8001080:	e7fb      	b.n	800107a <main+0x2a2>
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	20000248 	.word	0x20000248
 800108c:	0800aa48 	.word	0x0800aa48
 8001090:	0800aa68 	.word	0x0800aa68
 8001094:	2000085c 	.word	0x2000085c
 8001098:	2000074c 	.word	0x2000074c
 800109c:	200003ec 	.word	0x200003ec
 80010a0:	20000438 	.word	0x20000438
 80010a4:	20000354 	.word	0x20000354
 80010a8:	2000051c 	.word	0x2000051c
 80010ac:	200004d0 	.word	0x200004d0
 80010b0:	20000960 	.word	0x20000960
 80010b4:	00000000 	.word	0x00000000
 80010b8:	3dcccccd 	.word	0x3dcccccd
 80010bc:	42b40000 	.word	0x42b40000
 80010c0:	20000978 	.word	0x20000978
 80010c4:	20000990 	.word	0x20000990
 80010c8:	3c23d70a 	.word	0x3c23d70a
 80010cc:	3e333333 	.word	0x3e333333

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2234      	movs	r2, #52	; 0x34
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f007 fe64 	bl	8008dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010f4:	f003 f9fc 	bl	80044f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <SystemClock_Config+0xdc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <SystemClock_Config+0xdc>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <SystemClock_Config+0xdc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <SystemClock_Config+0xe0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001118:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <SystemClock_Config+0xe0>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <SystemClock_Config+0xe0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001130:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001134:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800114c:	2304      	movs	r3, #4
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fa29 	bl	80045b0 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001164:	f000 ff64 	bl	8002030 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001168:	f003 f9d2 	bl	8004510 <HAL_PWREx_EnableOverDrive>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001172:	f000 ff5d 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	2302      	movs	r3, #2
 800117c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2103      	movs	r1, #3
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fcba 	bl	8004b0c <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800119e:	f000 ff47 	bl	8002030 <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	3750      	adds	r7, #80	; 0x50
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40007000 	.word	0x40007000

080011b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_ADC1_Init+0x98>)
 80011c8:	4a21      	ldr	r2, [pc, #132]	; (8001250 <MX_ADC1_Init+0x9c>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_ADC1_Init+0x98>)
 80011ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_ADC1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_ADC1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_ADC1_Init+0x98>)
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <MX_ADC1_Init+0xa0>)
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_ADC1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_ADC1_Init+0x98>)
 8001202:	2201      	movs	r2, #1
 8001204:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_ADC1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_ADC1_Init+0x98>)
 8001210:	2201      	movs	r2, #1
 8001212:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_ADC1_Init+0x98>)
 8001216:	f001 fdf7 	bl	8002e08 <HAL_ADC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001220:	f000 ff06 	bl	8002030 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001224:	2303      	movs	r3, #3
 8001226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001228:	2301      	movs	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_ADC1_Init+0x98>)
 8001236:	f001 fe2b 	bl	8002e90 <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001240:	f000 fef6 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000200 	.word	0x20000200
 8001250:	40012000 	.word	0x40012000
 8001254:	0f000001 	.word	0x0f000001

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_I2C1_Init+0x74>)
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_I2C1_Init+0x78>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_I2C1_Init+0x74>)
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_I2C1_Init+0x7c>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_I2C1_Init+0x74>)
 8001270:	2201      	movs	r2, #1
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_I2C1_Init+0x74>)
 8001294:	f002 fb3c 	bl	8003910 <HAL_I2C_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800129e:	f000 fec7 	bl	8002030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <MX_I2C1_Init+0x74>)
 80012a6:	f003 f88b 	bl	80043c0 <HAL_I2CEx_ConfigAnalogFilter>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b0:	f000 febe 	bl	8002030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_I2C1_Init+0x74>)
 80012b8:	f003 f8cd 	bl	8004456 <HAL_I2CEx_ConfigDigitalFilter>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f000 feb5 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000248 	.word	0x20000248
 80012d0:	40005400 	.word	0x40005400
 80012d4:	20303e5d 	.word	0x20303e5d

080012d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_I2C2_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <MX_I2C2_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_I2C2_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <MX_I2C2_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_I2C2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_I2C2_Init+0x74>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_I2C2_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_I2C2_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_I2C2_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_I2C2_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_I2C2_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_I2C2_Init+0x74>)
 8001314:	f002 fafc 	bl	8003910 <HAL_I2C_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800131e:	f000 fe87 	bl	8002030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001322:	2100      	movs	r1, #0
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <MX_I2C2_Init+0x74>)
 8001326:	f003 f84b 	bl	80043c0 <HAL_I2CEx_ConfigAnalogFilter>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001330:	f000 fe7e 	bl	8002030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_I2C2_Init+0x74>)
 8001338:	f003 f88d 	bl	8004456 <HAL_I2CEx_ConfigDigitalFilter>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 fe75 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000029c 	.word	0x2000029c
 8001350:	40005800 	.word	0x40005800
 8001354:	20303e5d 	.word	0x20303e5d

08001358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_SPI1_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_SPI1_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_SPI1_Init+0x74>)
 8001364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_SPI1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SPI1_Init+0x74>)
 8001372:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_SPI1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_SPI1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_SPI1_Init+0x74>)
 8001386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SPI1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SPI1_Init+0x74>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SPI1_Init+0x74>)
 80013b2:	2208      	movs	r2, #8
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_SPI1_Init+0x74>)
 80013b8:	f004 f9f6 	bl	80057a8 <HAL_SPI_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fe35 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002f0 	.word	0x200002f0
 80013d0:	40013000 	.word	0x40013000

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09a      	sub	sp, #104	; 0x68
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	222c      	movs	r2, #44	; 0x2c
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fccc 	bl	8008dac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <MX_TIM1_Init+0x198>)
 8001416:	4a56      	ldr	r2, [pc, #344]	; (8001570 <MX_TIM1_Init+0x19c>)
 8001418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <MX_TIM1_Init+0x198>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b52      	ldr	r3, [pc, #328]	; (800156c <MX_TIM1_Init+0x198>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <MX_TIM1_Init+0x198>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <MX_TIM1_Init+0x198>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <MX_TIM1_Init+0x198>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <MX_TIM1_Init+0x198>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143e:	484b      	ldr	r0, [pc, #300]	; (800156c <MX_TIM1_Init+0x198>)
 8001440:	f004 fa5d 	bl	80058fe <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800144a:	f000 fdf1 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001458:	4619      	mov	r1, r3
 800145a:	4844      	ldr	r0, [pc, #272]	; (800156c <MX_TIM1_Init+0x198>)
 800145c:	f005 f9b0 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001466:	f000 fde3 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800146a:	4840      	ldr	r0, [pc, #256]	; (800156c <MX_TIM1_Init+0x198>)
 800146c:	f004 fb16 	bl	8005a9c <HAL_TIM_OC_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001476:	f000 fddb 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001486:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800148a:	4619      	mov	r1, r3
 800148c:	4837      	ldr	r0, [pc, #220]	; (800156c <MX_TIM1_Init+0x198>)
 800148e:	f005 ff71 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001498:	f000 fdca 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800149c:	2350      	movs	r3, #80	; 0x50
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014a4:	2302      	movs	r3, #2
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	482a      	ldr	r0, [pc, #168]	; (800156c <MX_TIM1_Init+0x198>)
 80014c2:	f004 ff53 	bl	800636c <HAL_TIM_OC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80014cc:	f000 fdb0 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d4:	2204      	movs	r2, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4824      	ldr	r0, [pc, #144]	; (800156c <MX_TIM1_Init+0x198>)
 80014da:	f004 ff47 	bl	800636c <HAL_TIM_OC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80014e4:	f000 fda4 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <MX_TIM1_Init+0x198>)
 80014f2:	f004 ff3b 	bl	800636c <HAL_TIM_OC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80014fc:	f000 fd98 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001504:	220c      	movs	r2, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM1_Init+0x198>)
 800150a:	f004 ff2f 	bl	800636c <HAL_TIM_OC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001514:	f000 fd8c 	bl	8002030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800153a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM1_Init+0x198>)
 800154e:	f005 ff9f 	bl	8007490 <HAL_TIMEx_ConfigBreakDeadTime>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001558:	f000 fd6a 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM1_Init+0x198>)
 800155e:	f001 f829 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001562:	bf00      	nop
 8001564:	3768      	adds	r7, #104	; 0x68
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000354 	.word	0x20000354
 8001570:	40010000 	.word	0x40010000

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b092      	sub	sp, #72	; 0x48
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b4:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015dc:	4831      	ldr	r0, [pc, #196]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015de:	f004 f98e 	bl	80058fe <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015e8:	f000 fd22 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f6:	4619      	mov	r1, r3
 80015f8:	482a      	ldr	r0, [pc, #168]	; (80016a4 <MX_TIM2_Init+0x130>)
 80015fa:	f005 f8e1 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001604:	f000 fd14 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001608:	4826      	ldr	r0, [pc, #152]	; (80016a4 <MX_TIM2_Init+0x130>)
 800160a:	f004 faa8 	bl	8005b5e <HAL_TIM_PWM_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001614:	f000 fd0c 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001618:	4822      	ldr	r0, [pc, #136]	; (80016a4 <MX_TIM2_Init+0x130>)
 800161a:	f004 fbf1 	bl	8005e00 <HAL_TIM_IC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001624:	f000 fd04 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001634:	4619      	mov	r1, r3
 8001636:	481b      	ldr	r0, [pc, #108]	; (80016a4 <MX_TIM2_Init+0x130>)
 8001638:	f005 fe9c 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001642:	f000 fcf5 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001646:	2360      	movs	r3, #96	; 0x60
 8001648:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_TIM2_Init+0x130>)
 8001660:	f004 ff9a 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800166a:	f000 fce1 	bl	8002030 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001672:	2301      	movs	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2208      	movs	r2, #8
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM2_Init+0x130>)
 8001686:	f004 feeb 	bl	8006460 <HAL_TIM_IC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001690:	f000 fcce 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM2_Init+0x130>)
 8001696:	f000 ff8d 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3748      	adds	r7, #72	; 0x48
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200003a0 	.word	0x200003a0

080016a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 fb78 	bl	8008dac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_TIM3_Init+0xa4>)
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MX_TIM3_Init+0xa8>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_TIM3_Init+0xa4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_TIM3_Init+0xa4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_TIM3_Init+0xa4>)
 80016da:	f640 62ff 	movw	r2, #3839	; 0xeff
 80016de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM3_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_TIM3_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ec:	2303      	movs	r3, #3
 80016ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f4:	2301      	movs	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016fc:	230f      	movs	r3, #15
 80016fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001704:	2301      	movs	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800170c:	230f      	movs	r3, #15
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_TIM3_Init+0xa4>)
 8001718:	f004 fbd4 	bl	8005ec4 <HAL_TIM_Encoder_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001722:	f000 fc85 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_TIM3_Init+0xa4>)
 8001734:	f005 fe1e 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800173e:	f000 fc77 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	3730      	adds	r7, #48	; 0x30
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003ec 	.word	0x200003ec
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f007 fb22 	bl	8008dac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_TIM4_Init+0xa4>)
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_TIM4_Init+0xa8>)
 8001776:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_TIM4_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM4_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM4_Init+0xa4>)
 8001786:	f640 62ff 	movw	r2, #3839	; 0xeff
 800178a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM4_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_TIM4_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001798:	2303      	movs	r3, #3
 800179a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80017a8:	230f      	movs	r3, #15
 80017aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017b0:	2301      	movs	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80017b8:	230f      	movs	r3, #15
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM4_Init+0xa4>)
 80017c4:	f004 fb7e 	bl	8005ec4 <HAL_TIM_Encoder_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017ce:	f000 fc2f 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM4_Init+0xa4>)
 80017e0:	f005 fdc8 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80017ea:	f000 fc21 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000438 	.word	0x20000438
 80017fc:	40000800 	.word	0x40000800

08001800 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08e      	sub	sp, #56	; 0x38
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <MX_TIM5_Init+0xe8>)
 8001834:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <MX_TIM5_Init+0xec>)
 8001836:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <MX_TIM5_Init+0xe8>)
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <MX_TIM5_Init+0xe8>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <MX_TIM5_Init+0xe8>)
 8001846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800184a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <MX_TIM5_Init+0xe8>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <MX_TIM5_Init+0xe8>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001858:	4823      	ldr	r0, [pc, #140]	; (80018e8 <MX_TIM5_Init+0xe8>)
 800185a:	f004 f850 	bl	80058fe <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001864:	f000 fbe4 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800186e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001872:	4619      	mov	r1, r3
 8001874:	481c      	ldr	r0, [pc, #112]	; (80018e8 <MX_TIM5_Init+0xe8>)
 8001876:	f004 ffa3 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001880:	f000 fbd6 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001884:	4818      	ldr	r0, [pc, #96]	; (80018e8 <MX_TIM5_Init+0xe8>)
 8001886:	f004 f96a 	bl	8005b5e <HAL_TIM_PWM_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001890:	f000 fbce 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4811      	ldr	r0, [pc, #68]	; (80018e8 <MX_TIM5_Init+0xe8>)
 80018a4:	f005 fd66 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80018ae:	f000 fbbf 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b2:	2360      	movs	r3, #96	; 0x60
 80018b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_TIM5_Init+0xe8>)
 80018ca:	f004 fe65 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80018d4:	f000 fbac 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_TIM5_Init+0xe8>)
 80018da:	f000 fe6b 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 80018de:	bf00      	nop
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000484 	.word	0x20000484
 80018ec:	40000c00 	.word	0x40000c00

080018f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_TIM6_Init+0x68>)
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <MX_TIM6_Init+0x6c>)
 8001904:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_TIM6_Init+0x68>)
 8001908:	f240 32bf 	movw	r2, #959	; 0x3bf
 800190c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_TIM6_Init+0x68>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_TIM6_Init+0x68>)
 8001916:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_TIM6_Init+0x68>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <MX_TIM6_Init+0x68>)
 8001924:	f003 ffeb 	bl	80058fe <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800192e:	f000 fb7f 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_TIM6_Init+0x68>)
 8001940:	f005 fd18 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800194a:	f000 fb71 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200004d0 	.word	0x200004d0
 800195c:	40001000 	.word	0x40001000

08001960 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09a      	sub	sp, #104	; 0x68
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	222c      	movs	r2, #44	; 0x2c
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f007 fa06 	bl	8008dac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019a0:	4b56      	ldr	r3, [pc, #344]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019a2:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <MX_TIM8_Init+0x1a0>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80019a6:	4b55      	ldr	r3, [pc, #340]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019a8:	f240 32bf 	movw	r2, #959	; 0x3bf
 80019ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80019b4:	4b51      	ldr	r3, [pc, #324]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019b6:	f240 128f 	movw	r2, #399	; 0x18f
 80019ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019c2:	4b4e      	ldr	r3, [pc, #312]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019ce:	484b      	ldr	r0, [pc, #300]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019d0:	f003 ff95 	bl	80058fe <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80019da:	f000 fb29 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019e8:	4619      	mov	r1, r3
 80019ea:	4844      	ldr	r0, [pc, #272]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019ec:	f004 fee8 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80019f6:	f000 fb1b 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019fa:	4840      	ldr	r0, [pc, #256]	; (8001afc <MX_TIM8_Init+0x19c>)
 80019fc:	f004 f8af 	bl	8005b5e <HAL_TIM_PWM_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001a06:	f000 fb13 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4837      	ldr	r0, [pc, #220]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001a1e:	f005 fca9 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001a28:	f000 fb02 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2c:	2360      	movs	r3, #96	; 0x60
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482a      	ldr	r0, [pc, #168]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001a52:	f004 fda1 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001a5c:	f000 fae8 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4824      	ldr	r0, [pc, #144]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001a6a:	f004 fd95 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001a74:	f000 fadc 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481e      	ldr	r0, [pc, #120]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001a82:	f004 fd89 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001a8c:	f000 fad0 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a94:	220c      	movs	r2, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	4818      	ldr	r0, [pc, #96]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001a9a:	f004 fd7d 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001aa4:	f000 fac4 	bl	8002030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4807      	ldr	r0, [pc, #28]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001ade:	f005 fcd7 	bl	8007490 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001ae8:	f000 faa2 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <MX_TIM8_Init+0x19c>)
 8001aee:	f000 fd61 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001af2:	bf00      	nop
 8001af4:	3768      	adds	r7, #104	; 0x68
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000051c 	.word	0x2000051c
 8001b00:	40010400 	.word	0x40010400

08001b04 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b1e:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <MX_TIM9_Init+0x9c>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b34:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001b42:	4816      	ldr	r0, [pc, #88]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b44:	f004 f80b 	bl	8005b5e <HAL_TIM_PWM_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001b4e:	f000 fa6f 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	; 0x60
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b6a:	f004 fd15 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001b74:	f000 fa5c 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b80:	f004 fd0a 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001b8a:	f000 fa51 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MX_TIM9_Init+0x98>)
 8001b90:	f000 fd10 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000568 	.word	0x20000568
 8001ba0:	40014000 	.word	0x40014000

08001ba4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_UART4_Init+0x58>)
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <MX_UART4_Init+0x5c>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_UART4_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_UART4_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_UART4_Init+0x58>)
 8001be8:	f005 fcee 	bl	80075c8 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001bf2:	f000 fa1d 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200005b4 	.word	0x200005b4
 8001c00:	40004c00 	.word	0x40004c00

08001c04 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <MX_UART5_Init+0x5c>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_UART5_Init+0x58>)
 8001c48:	f005 fcbe 	bl	80075c8 <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001c52:	f000 f9ed 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000063c 	.word	0x2000063c
 8001c60:	40005000 	.word	0x40005000

08001c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <MX_USART1_UART_Init+0x5c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART1_UART_Init+0x58>)
 8001ca8:	f005 fc8e 	bl	80075c8 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cb2:	f000 f9bd 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200006c4 	.word	0x200006c4
 8001cc0:	40011000 	.word	0x40011000

08001cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <MX_USART2_UART_Init+0x58>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <MX_USART2_UART_Init+0x5c>)
 8001cd2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001ce8:	220c      	movs	r2, #12
 8001cea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_USART2_UART_Init+0x54>)
 8001d06:	f005 fc5f 	bl	80075c8 <HAL_UART_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001d10:	f000 f98e 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000074c 	.word	0x2000074c
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	000f4240 	.word	0x000f4240

08001d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <MX_USART3_UART_Init+0x5c>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_USART3_UART_Init+0x58>)
 8001d68:	f005 fc2e 	bl	80075c8 <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d72:	f000 f95d 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200007d4 	.word	0x200007d4
 8001d80:	40004800 	.word	0x40004800

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9a:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a8f      	ldr	r2, [pc, #572]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b8a      	ldr	r3, [pc, #552]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a89      	ldr	r2, [pc, #548]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dca:	4b84      	ldr	r3, [pc, #528]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a7d      	ldr	r2, [pc, #500]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b75      	ldr	r3, [pc, #468]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a71      	ldr	r2, [pc, #452]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a6b      	ldr	r2, [pc, #428]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e42:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <MX_GPIO_Init+0x258>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2118      	movs	r1, #24
 8001e5e:	4860      	ldr	r0, [pc, #384]	; (8001fe0 <MX_GPIO_Init+0x25c>)
 8001e60:	f001 fd24 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e6a:	485e      	ldr	r0, [pc, #376]	; (8001fe4 <MX_GPIO_Init+0x260>)
 8001e6c:	f001 fd1e 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	485c      	ldr	r0, [pc, #368]	; (8001fe8 <MX_GPIO_Init+0x264>)
 8001e76:	f001 fd19 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001e7a:	2318      	movs	r3, #24
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4853      	ldr	r0, [pc, #332]	; (8001fe0 <MX_GPIO_Init+0x25c>)
 8001e92:	f001 fb5f 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001e96:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	484f      	ldr	r0, [pc, #316]	; (8001fec <MX_GPIO_Init+0x268>)
 8001eae:	f001 fb51 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001eb2:	2332      	movs	r3, #50	; 0x32
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec2:	230b      	movs	r3, #11
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4848      	ldr	r0, [pc, #288]	; (8001ff0 <MX_GPIO_Init+0x26c>)
 8001ece:	f001 fb41 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ed2:	2386      	movs	r3, #134	; 0x86
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ee2:	230b      	movs	r3, #11
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4841      	ldr	r0, [pc, #260]	; (8001ff4 <MX_GPIO_Init+0x270>)
 8001eee:	f001 fb31 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ef2:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4836      	ldr	r0, [pc, #216]	; (8001fe4 <MX_GPIO_Init+0x260>)
 8001f0c:	f001 fb22 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f22:	230b      	movs	r3, #11
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482d      	ldr	r0, [pc, #180]	; (8001fe4 <MX_GPIO_Init+0x260>)
 8001f2e:	f001 fb11 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f32:	2340      	movs	r3, #64	; 0x40
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4827      	ldr	r0, [pc, #156]	; (8001fe8 <MX_GPIO_Init+0x264>)
 8001f4a:	f001 fb03 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4821      	ldr	r0, [pc, #132]	; (8001fe8 <MX_GPIO_Init+0x264>)
 8001f62:	f001 faf7 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f78:	230a      	movs	r3, #10
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <MX_GPIO_Init+0x270>)
 8001f84:	f001 fae6 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4815      	ldr	r0, [pc, #84]	; (8001ff4 <MX_GPIO_Init+0x270>)
 8001f9e:	f001 fad9 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001fa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb4:	230b      	movs	r3, #11
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <MX_GPIO_Init+0x264>)
 8001fc0:	f001 fac8 	bl	8003554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2017      	movs	r0, #23
 8001fca:	f001 fa8c 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fce:	2017      	movs	r0, #23
 8001fd0:	f001 faa5 	bl	800351e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fd4:	bf00      	nop
 8001fd6:	3738      	adds	r7, #56	; 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e009      	b.n	800201e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fb87 	bl	8000726 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf1      	blt.n	800200a <_write+0x12>
	}
	return len;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>
	...

0800203c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_MspInit+0x44>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_MspInit+0x44>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_MspInit+0x44>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_MspInit+0x44>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_MspInit+0x44>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_MspInit+0x44>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_ADC_MspInit+0x74>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d123      	bne.n	80020ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_ADC_MspInit+0x78>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_ADC_MspInit+0x78>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_ADC_MspInit+0x78>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_ADC_MspInit+0x78>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_ADC_MspInit+0x78>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_ADC_MspInit+0x78>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80020d6:	2308      	movs	r3, #8
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_ADC_MspInit+0x7c>)
 80020ea:	f001 fa33 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40012000 	.word	0x40012000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0b0      	sub	sp, #192	; 0xc0
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	2290      	movs	r2, #144	; 0x90
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f006 fe41 	bl	8008dac <memset>
  if(hi2c->Instance==I2C1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a44      	ldr	r2, [pc, #272]	; (8002240 <HAL_I2C_MspInit+0x13c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d13e      	bne.n	80021b2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002138:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4618      	mov	r0, r3
 8002146:	f002 ff07 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002150:	f7ff ff6e 	bl	8002030 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_I2C_MspInit+0x140>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_I2C_MspInit+0x140>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_I2C_MspInit+0x140>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800216c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002174:	2312      	movs	r3, #18
 8002176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217a:	2301      	movs	r3, #1
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002186:	2304      	movs	r3, #4
 8002188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002190:	4619      	mov	r1, r3
 8002192:	482d      	ldr	r0, [pc, #180]	; (8002248 <HAL_I2C_MspInit+0x144>)
 8002194:	f001 f9de 	bl	8003554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_I2C_MspInit+0x140>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a29      	ldr	r2, [pc, #164]	; (8002244 <HAL_I2C_MspInit+0x140>)
 800219e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_I2C_MspInit+0x140>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021b0:	e041      	b.n	8002236 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_I2C_MspInit+0x148>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d13c      	bne.n	8002236 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 fec3 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80021d8:	f7ff ff2a 	bl	8002030 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_I2C_MspInit+0x140>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_I2C_MspInit+0x140>)
 80021e2:	f043 0320 	orr.w	r3, r3, #32
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_I2C_MspInit+0x140>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fa:	2312      	movs	r3, #18
 80021fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800220c:	2304      	movs	r3, #4
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002212:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002216:	4619      	mov	r1, r3
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <HAL_I2C_MspInit+0x14c>)
 800221a:	f001 f99b 	bl	8003554 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_I2C_MspInit+0x140>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_I2C_MspInit+0x140>)
 8002224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_I2C_MspInit+0x140>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	bf00      	nop
 8002238:	37c0      	adds	r7, #192	; 0xc0
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40005400 	.word	0x40005400
 8002244:	40023800 	.word	0x40023800
 8002248:	40020400 	.word	0x40020400
 800224c:	40005800 	.word	0x40005800
 8002250:	40021400 	.word	0x40021400

08002254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a33      	ldr	r2, [pc, #204]	; (8002340 <HAL_SPI_MspInit+0xec>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d160      	bne.n	8002338 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 800227c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a26      	ldr	r2, [pc, #152]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 80022c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_SPI_MspInit+0xf0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022d6:	2320      	movs	r3, #32
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e6:	2305      	movs	r3, #5
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	4815      	ldr	r0, [pc, #84]	; (8002348 <HAL_SPI_MspInit+0xf4>)
 80022f2:	f001 f92f 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002306:	2305      	movs	r3, #5
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	480e      	ldr	r0, [pc, #56]	; (800234c <HAL_SPI_MspInit+0xf8>)
 8002312:	f001 f91f 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002328:	2305      	movs	r3, #5
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	4807      	ldr	r0, [pc, #28]	; (8002350 <HAL_SPI_MspInit+0xfc>)
 8002334:	f001 f90e 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002338:	bf00      	nop
 800233a:	3730      	adds	r7, #48	; 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40013000 	.word	0x40013000
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021800 	.word	0x40021800

08002354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <HAL_TIM_Base_MspInit+0x11c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800238e:	e06b      	b.n	8002468 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002398:	d129      	bne.n	80023ee <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80023ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023dc:	2301      	movs	r3, #1
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4824      	ldr	r0, [pc, #144]	; (8002478 <HAL_TIM_Base_MspInit+0x124>)
 80023e8:	f001 f8b4 	bl	8003554 <HAL_GPIO_Init>
}
 80023ec:	e03c      	b.n	8002468 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_TIM_Base_MspInit+0x128>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10c      	bne.n	8002412 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
}
 8002410:	e02a      	b.n	8002468 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_TIM_Base_MspInit+0x12c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d114      	bne.n	8002446 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6413      	str	r3, [r2, #64]	; 0x40
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2101      	movs	r1, #1
 8002438:	2036      	movs	r0, #54	; 0x36
 800243a:	f001 f854 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800243e:	2036      	movs	r0, #54	; 0x36
 8002440:	f001 f86d 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 8002444:	e010      	b.n	8002468 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_TIM_Base_MspInit+0x130>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d10b      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_TIM_Base_MspInit+0x120>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	bf00      	nop
 800246a:	3738      	adds	r7, #56	; 0x38
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40010000 	.word	0x40010000
 8002474:	40023800 	.word	0x40023800
 8002478:	40020400 	.word	0x40020400
 800247c:	40000c00 	.word	0x40000c00
 8002480:	40001000 	.word	0x40001000
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d128      	bne.n	80024fc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a27      	ldr	r2, [pc, #156]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80024da:	2330      	movs	r3, #48	; 0x30
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	481c      	ldr	r0, [pc, #112]	; (8002568 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024f6:	f001 f82d 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024fa:	e02d      	b.n	8002558 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d128      	bne.n	8002558 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_TIM_Encoder_MspInit+0xdc>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002536:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002548:	2302      	movs	r3, #2
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	4807      	ldr	r0, [pc, #28]	; (8002570 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002554:	f000 fffe 	bl	8003554 <HAL_GPIO_Init>
}
 8002558:	bf00      	nop
 800255a:	3730      	adds	r7, #48	; 0x30
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40000400 	.word	0x40000400
 8002564:	40023800 	.word	0x40023800
 8002568:	40020400 	.word	0x40020400
 800256c:	40000800 	.word	0x40000800
 8002570:	40020c00 	.word	0x40020c00

08002574 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_TIM_PWM_MspInit+0x38>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10b      	bne.n	800259e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a56      	ldr	r2, [pc, #344]	; (800272c <HAL_TIM_MspPostInit+0x178>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d11d      	bne.n	8002612 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80025ee:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002600:	2301      	movs	r3, #1
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	4619      	mov	r1, r3
 800260a:	484a      	ldr	r0, [pc, #296]	; (8002734 <HAL_TIM_MspPostInit+0x180>)
 800260c:	f000 ffa2 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002610:	e088      	b.n	8002724 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d11d      	bne.n	8002658 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a43      	ldr	r2, [pc, #268]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002646:	2301      	movs	r3, #1
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4839      	ldr	r0, [pc, #228]	; (8002738 <HAL_TIM_MspPostInit+0x184>)
 8002652:	f000 ff7f 	bl	8003554 <HAL_GPIO_Init>
}
 8002656:	e065      	b.n	8002724 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_TIM_MspPostInit+0x188>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d11c      	bne.n	800269c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 800267a:	2301      	movs	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800268a:	2302      	movs	r3, #2
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	4828      	ldr	r0, [pc, #160]	; (8002738 <HAL_TIM_MspPostInit+0x184>)
 8002696:	f000 ff5d 	bl	8003554 <HAL_GPIO_Init>
}
 800269a:	e043      	b.n	8002724 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <HAL_TIM_MspPostInit+0x18c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11d      	bne.n	80026e2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80026be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026d0:	2303      	movs	r3, #3
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	481a      	ldr	r0, [pc, #104]	; (8002744 <HAL_TIM_MspPostInit+0x190>)
 80026dc:	f000 ff3a 	bl	8003554 <HAL_GPIO_Init>
}
 80026e0:	e020      	b.n	8002724 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_TIM_MspPostInit+0x194>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	6313      	str	r3, [r2, #48]	; 0x30
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_TIM_MspPostInit+0x17c>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002704:	2360      	movs	r3, #96	; 0x60
 8002706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002714:	2303      	movs	r3, #3
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4619      	mov	r1, r3
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <HAL_TIM_MspPostInit+0x180>)
 8002720:	f000 ff18 	bl	8003554 <HAL_GPIO_Init>
}
 8002724:	bf00      	nop
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40010000 	.word	0x40010000
 8002730:	40023800 	.word	0x40023800
 8002734:	40021000 	.word	0x40021000
 8002738:	40020000 	.word	0x40020000
 800273c:	40000c00 	.word	0x40000c00
 8002740:	40010400 	.word	0x40010400
 8002744:	40020800 	.word	0x40020800
 8002748:	40014000 	.word	0x40014000

0800274c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0b6      	sub	sp, #216	; 0xd8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002764:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002768:	2290      	movs	r2, #144	; 0x90
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f006 fb1d 	bl	8008dac <memset>
  if(huart->Instance==UART4)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4aa0      	ldr	r2, [pc, #640]	; (80029f8 <HAL_UART_MspInit+0x2ac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d13e      	bne.n	80027fa <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800277c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fbe3 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002798:	f7ff fc4a 	bl	8002030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800279c:	4b97      	ldr	r3, [pc, #604]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4a96      	ldr	r2, [pc, #600]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80027a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027a6:	6413      	str	r3, [r2, #64]	; 0x40
 80027a8:	4b94      	ldr	r3, [pc, #592]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	4b91      	ldr	r3, [pc, #580]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a90      	ldr	r2, [pc, #576]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b8e      	ldr	r3, [pc, #568]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80027cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027e6:	2308      	movs	r3, #8
 80027e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4883      	ldr	r0, [pc, #524]	; (8002a00 <HAL_UART_MspInit+0x2b4>)
 80027f4:	f000 feae 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f8:	e151      	b.n	8002a9e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a81      	ldr	r2, [pc, #516]	; (8002a04 <HAL_UART_MspInit+0x2b8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d160      	bne.n	80028c6 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002814:	4618      	mov	r0, r3
 8002816:	f002 fb9f 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002820:	f7ff fc06 	bl	8002030 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002824:	4b75      	ldr	r3, [pc, #468]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4a74      	ldr	r2, [pc, #464]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800282a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282e:	6413      	str	r3, [r2, #64]	; 0x40
 8002830:	4b72      	ldr	r3, [pc, #456]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002854:	4b69      	ldr	r3, [pc, #420]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a68      	ldr	r2, [pc, #416]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800286c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002886:	2308      	movs	r3, #8
 8002888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002890:	4619      	mov	r1, r3
 8002892:	485d      	ldr	r0, [pc, #372]	; (8002a08 <HAL_UART_MspInit+0x2bc>)
 8002894:	f000 fe5e 	bl	8003554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028b2:	2308      	movs	r3, #8
 80028b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028bc:	4619      	mov	r1, r3
 80028be:	4850      	ldr	r0, [pc, #320]	; (8002a00 <HAL_UART_MspInit+0x2b4>)
 80028c0:	f000 fe48 	bl	8003554 <HAL_GPIO_Init>
}
 80028c4:	e0eb      	b.n	8002a9e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a50      	ldr	r2, [pc, #320]	; (8002a0c <HAL_UART_MspInit+0x2c0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d151      	bne.n	8002974 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028d4:	2300      	movs	r3, #0
 80028d6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 fb3b 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80028e8:	f7ff fba2 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	4a42      	ldr	r2, [pc, #264]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80028f2:	f043 0310 	orr.w	r3, r3, #16
 80028f6:	6453      	str	r3, [r2, #68]	; 0x44
 80028f8:	4b40      	ldr	r3, [pc, #256]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a3c      	ldr	r2, [pc, #240]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800291c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002936:	2304      	movs	r3, #4
 8002938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002940:	4619      	mov	r1, r3
 8002942:	4831      	ldr	r0, [pc, #196]	; (8002a08 <HAL_UART_MspInit+0x2bc>)
 8002944:	f000 fe06 	bl	8003554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002960:	2307      	movs	r3, #7
 8002962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800296a:	4619      	mov	r1, r3
 800296c:	4826      	ldr	r0, [pc, #152]	; (8002a08 <HAL_UART_MspInit+0x2bc>)
 800296e:	f000 fdf1 	bl	8003554 <HAL_GPIO_Init>
}
 8002972:	e094      	b.n	8002a9e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_UART_MspInit+0x2c4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d14c      	bne.n	8002a18 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002982:	2300      	movs	r3, #0
 8002984:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298a:	4618      	mov	r0, r3
 800298c:	f002 fae4 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002996:	f7ff fb4b 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_UART_MspInit+0x2b0>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029ca:	2360      	movs	r3, #96	; 0x60
 80029cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029e2:	2307      	movs	r3, #7
 80029e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4809      	ldr	r0, [pc, #36]	; (8002a14 <HAL_UART_MspInit+0x2c8>)
 80029f0:	f000 fdb0 	bl	8003554 <HAL_GPIO_Init>
}
 80029f4:	e053      	b.n	8002a9e <HAL_UART_MspInit+0x352>
 80029f6:	bf00      	nop
 80029f8:	40004c00 	.word	0x40004c00
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40005000 	.word	0x40005000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40011000 	.word	0x40011000
 8002a10:	40004400 	.word	0x40004400
 8002a14:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_UART_MspInit+0x35c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d13d      	bne.n	8002a9e <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fa90 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002a3e:	f7ff faf7 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_UART_MspInit+0x360>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_UART_MspInit+0x360>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_UART_MspInit+0x360>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_UART_MspInit+0x360>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_UART_MspInit+0x360>)
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_UART_MspInit+0x360>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_UART_MspInit+0x364>)
 8002a9a:	f000 fd5b 	bl	8003554 <HAL_GPIO_Init>
}
 8002a9e:	bf00      	nop
 8002aa0:	37d8      	adds	r7, #216	; 0xd8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020c00 	.word	0x40020c00

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <NMI_Handler+0x4>

08002aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <HardFault_Handler+0x4>

08002ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <MemManage_Handler+0x4>

08002ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aca:	e7fe      	b.n	8002aca <BusFault_Handler+0x4>

08002acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <UsageFault_Handler+0x4>

08002ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b00:	f000 f93e 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI8_USER_BUT1_IRQ_Pin);
 8002b0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b10:	f000 fee6 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI9_USER_BUT2_IRQ_Pin);
 8002b14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b18:	f000 fee2 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <TIM6_DAC_IRQHandler+0x10>)
 8002b26:	f003 fb01 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200004d0 	.word	0x200004d0

08002b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	return 1;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_kill>:

int _kill(int pid, int sig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b4e:	f006 f97f 	bl	8008e50 <__errno>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2216      	movs	r2, #22
 8002b56:	601a      	str	r2, [r3, #0]
	return -1;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_exit>:

void _exit (int status)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ffe7 	bl	8002b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b76:	e7fe      	b.n	8002b76 <_exit+0x12>

08002b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e00a      	b.n	8002ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b8a:	f3af 8000 	nop.w
 8002b8e:	4601      	mov	r1, r0
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	60ba      	str	r2, [r7, #8]
 8002b96:	b2ca      	uxtb	r2, r1
 8002b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	dbf0      	blt.n	8002b8a <_read+0x12>
	}

return len;
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bda:	605a      	str	r2, [r3, #4]
	return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_isatty>:

int _isatty(int file)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <_sbrk+0x5c>)
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_sbrk+0x60>)
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c4c:	f006 f900 	bl	8008e50 <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <_sbrk+0x64>)
 8002c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20080000 	.word	0x20080000
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	200009ac 	.word	0x200009ac
 8002c84:	20000b00 	.word	0x20000b00

08002c88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <SystemInit+0x28>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <SystemInit+0x28>)
 8002c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SystemInit+0x28>)
 8002c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cba:	e003      	b.n	8002cc4 <LoopCopyDataInit>

08002cbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cc2:	3104      	adds	r1, #4

08002cc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cc4:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ccc:	d3f6      	bcc.n	8002cbc <CopyDataInit>
  ldr  r2, =_sbss
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cd0:	e002      	b.n	8002cd8 <LoopFillZerobss>

08002cd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cd4:	f842 3b04 	str.w	r3, [r2], #4

08002cd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cdc:	d3f9      	bcc.n	8002cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cde:	f7ff ffd3 	bl	8002c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ce2:	f006 f8bb 	bl	8008e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ce6:	f7fe f877 	bl	8000dd8 <main>
  bx  lr    
 8002cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002cf0:	0800ae14 	.word	0x0800ae14
  ldr  r0, =_sdata
 8002cf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cf8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002cfc:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002d00:	20000b00 	.word	0x20000b00

08002d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC_IRQHandler>

08002d06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	f000 fbe0 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f000 f805 	bl	8002d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d16:	f7ff f991 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_InitTick+0x54>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_InitTick+0x58>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fbfb 	bl	800353a <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5c:	f000 fbc3 	bl	80034e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <HAL_InitTick+0x5c>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000010 	.word	0x20000010
 8002d78:	20000018 	.word	0x20000018
 8002d7c:	20000014 	.word	0x20000014

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000018 	.word	0x20000018
 8002da4:	200009b0 	.word	0x200009b0

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	200009b0 	.word	0x200009b0

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_Delay+0x44>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de6:	bf00      	nop
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000018 	.word	0x20000018

08002e08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e031      	b.n	8002e82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff f92c 	bl	8002084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_ADC_Init+0x84>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	f043 0202 	orr.w	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f970 	bl	800313c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
 8002e72:	e001      	b.n	8002e78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	ffffeefd 	.word	0xffffeefd

08002e90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1c>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e136      	b.n	800311a <HAL_ADC_ConfigChannel+0x28a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	d93a      	bls.n	8002f32 <HAL_ADC_ConfigChannel+0xa2>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec4:	d035      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b1e      	subs	r3, #30
 8002edc:	2207      	movs	r2, #7
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	400a      	ands	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a8d      	ldr	r2, [pc, #564]	; (8003128 <HAL_ADC_ConfigChannel+0x298>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10a      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	061a      	lsls	r2, r3, #24
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0a:	e035      	b.n	8002f78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68d9      	ldr	r1, [r3, #12]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4403      	add	r3, r0
 8002f24:	3b1e      	subs	r3, #30
 8002f26:	409a      	lsls	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f30:	e022      	b.n	8002f78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6919      	ldr	r1, [r3, #16]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	2207      	movs	r2, #7
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	400a      	ands	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6919      	ldr	r1, [r3, #16]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4403      	add	r3, r0
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d824      	bhi.n	8002fca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b05      	subs	r3, #5
 8002f92:	221f      	movs	r2, #31
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b05      	subs	r3, #5
 8002fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc8:	e04c      	b.n	8003064 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d824      	bhi.n	800301c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b23      	subs	r3, #35	; 0x23
 8002fe4:	221f      	movs	r2, #31
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3b23      	subs	r3, #35	; 0x23
 800300e:	fa00 f203 	lsl.w	r2, r0, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
 800301a:	e023      	b.n	8003064 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	3b41      	subs	r3, #65	; 0x41
 800302e:	221f      	movs	r2, #31
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43da      	mvns	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	400a      	ands	r2, r1
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	4618      	mov	r0, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	3b41      	subs	r3, #65	; 0x41
 8003058:	fa00 f203 	lsl.w	r2, r0, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <HAL_ADC_ConfigChannel+0x29c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10a      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1f4>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003076:	d105      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 800307e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003082:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_ADC_ConfigChannel+0x29c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10f      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x21e>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b12      	cmp	r3, #18
 8003094:	d10b      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a25      	ldr	r2, [pc, #148]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 800309c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1e      	ldr	r2, [pc, #120]	; (800312c <HAL_ADC_ConfigChannel+0x29c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d12b      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x280>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_ADC_ConfigChannel+0x298>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <HAL_ADC_ConfigChannel+0x23a>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b11      	cmp	r3, #17
 80030c8:	d122      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <HAL_ADC_ConfigChannel+0x2a0>)
 80030dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_ADC_ConfigChannel+0x298>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d111      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_ADC_ConfigChannel+0x2a4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_ADC_ConfigChannel+0x2a8>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0c9a      	lsrs	r2, r3, #18
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003102:	e002      	b.n	800310a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b01      	subs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f9      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	10000012 	.word	0x10000012
 800312c:	40012000 	.word	0x40012000
 8003130:	40012300 	.word	0x40012300
 8003134:	20000010 	.word	0x20000010
 8003138:	431bde83 	.word	0x431bde83

0800313c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003144:	4b78      	ldr	r3, [pc, #480]	; (8003328 <ADC_Init+0x1ec>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a77      	ldr	r2, [pc, #476]	; (8003328 <ADC_Init+0x1ec>)
 800314a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800314e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003150:	4b75      	ldr	r3, [pc, #468]	; (8003328 <ADC_Init+0x1ec>)
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4973      	ldr	r1, [pc, #460]	; (8003328 <ADC_Init+0x1ec>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	4a58      	ldr	r2, [pc, #352]	; (800332c <ADC_Init+0x1f0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e00f      	b.n	8003236 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003234:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0202 	bic.w	r2, r2, #2
 8003244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	005a      	lsls	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003272:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003282:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	3b01      	subs	r3, #1
 8003290:	035a      	lsls	r2, r3, #13
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e007      	b.n	80032ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	051a      	lsls	r2, r3, #20
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ee:	025a      	lsls	r2, r3, #9
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	029a      	lsls	r2, r3, #10
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012300 	.word	0x40012300
 800332c:	0f000001 	.word	0x0f000001

08003330 <__NVIC_SetPriorityGrouping>:
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <__NVIC_SetPriorityGrouping+0x40>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	4313      	orrs	r3, r2
 800335c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <__NVIC_SetPriorityGrouping+0x40>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60d3      	str	r3, [r2, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00
 8003374:	05fa0000 	.word	0x05fa0000

08003378 <__NVIC_GetPriorityGrouping>:
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <__NVIC_EnableIRQ+0x38>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	; (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <NVIC_EncodePriority>:
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf28      	it	cs
 8003442:	2304      	movcs	r3, #4
 8003444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3304      	adds	r3, #4
 800344a:	2b06      	cmp	r3, #6
 800344c:	d902      	bls.n	8003454 <NVIC_EncodePriority+0x30>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3b03      	subs	r3, #3
 8003452:	e000      	b.n	8003456 <NVIC_EncodePriority+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800346c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43d9      	mvns	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	4313      	orrs	r3, r2
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <SysTick_Config>:
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b0:	f7ff ff8e 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff29 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff3e 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff8e 	bl	8003424 <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff5d 	bl	80033d0 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff31 	bl	8003394 <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffa2 	bl	800348c <SysTick_Config>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e175      	b.n	8003860 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	f040 8164 	bne.w	800385a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d005      	beq.n	80035aa <HAL_GPIO_Init+0x56>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d130      	bne.n	800360c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e0:	2201      	movs	r2, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 0201 	and.w	r2, r3, #1
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b03      	cmp	r3, #3
 8003616:	d017      	beq.n	8003648 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d123      	bne.n	800369c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	08da      	lsrs	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3208      	adds	r2, #8
 800365c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	220f      	movs	r2, #15
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	08da      	lsrs	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3208      	adds	r2, #8
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80be 	beq.w	800385a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036de:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_GPIO_Init+0x324>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	4a65      	ldr	r2, [pc, #404]	; (8003878 <HAL_GPIO_Init+0x324>)
 80036e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_GPIO_Init+0x324>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036f6:	4a61      	ldr	r2, [pc, #388]	; (800387c <HAL_GPIO_Init+0x328>)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	220f      	movs	r2, #15
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a58      	ldr	r2, [pc, #352]	; (8003880 <HAL_GPIO_Init+0x32c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d037      	beq.n	8003792 <HAL_GPIO_Init+0x23e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a57      	ldr	r2, [pc, #348]	; (8003884 <HAL_GPIO_Init+0x330>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_GPIO_Init+0x23a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a56      	ldr	r2, [pc, #344]	; (8003888 <HAL_GPIO_Init+0x334>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02b      	beq.n	800378a <HAL_GPIO_Init+0x236>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a55      	ldr	r2, [pc, #340]	; (800388c <HAL_GPIO_Init+0x338>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d025      	beq.n	8003786 <HAL_GPIO_Init+0x232>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a54      	ldr	r2, [pc, #336]	; (8003890 <HAL_GPIO_Init+0x33c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01f      	beq.n	8003782 <HAL_GPIO_Init+0x22e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a53      	ldr	r2, [pc, #332]	; (8003894 <HAL_GPIO_Init+0x340>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d019      	beq.n	800377e <HAL_GPIO_Init+0x22a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_GPIO_Init+0x344>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_GPIO_Init+0x226>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a51      	ldr	r2, [pc, #324]	; (800389c <HAL_GPIO_Init+0x348>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00d      	beq.n	8003776 <HAL_GPIO_Init+0x222>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a50      	ldr	r2, [pc, #320]	; (80038a0 <HAL_GPIO_Init+0x34c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <HAL_GPIO_Init+0x21e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4f      	ldr	r2, [pc, #316]	; (80038a4 <HAL_GPIO_Init+0x350>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_GPIO_Init+0x21a>
 800376a:	2309      	movs	r3, #9
 800376c:	e012      	b.n	8003794 <HAL_GPIO_Init+0x240>
 800376e:	230a      	movs	r3, #10
 8003770:	e010      	b.n	8003794 <HAL_GPIO_Init+0x240>
 8003772:	2308      	movs	r3, #8
 8003774:	e00e      	b.n	8003794 <HAL_GPIO_Init+0x240>
 8003776:	2307      	movs	r3, #7
 8003778:	e00c      	b.n	8003794 <HAL_GPIO_Init+0x240>
 800377a:	2306      	movs	r3, #6
 800377c:	e00a      	b.n	8003794 <HAL_GPIO_Init+0x240>
 800377e:	2305      	movs	r3, #5
 8003780:	e008      	b.n	8003794 <HAL_GPIO_Init+0x240>
 8003782:	2304      	movs	r3, #4
 8003784:	e006      	b.n	8003794 <HAL_GPIO_Init+0x240>
 8003786:	2303      	movs	r3, #3
 8003788:	e004      	b.n	8003794 <HAL_GPIO_Init+0x240>
 800378a:	2302      	movs	r3, #2
 800378c:	e002      	b.n	8003794 <HAL_GPIO_Init+0x240>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_GPIO_Init+0x240>
 8003792:	2300      	movs	r3, #0
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	f002 0203 	and.w	r2, r2, #3
 800379a:	0092      	lsls	r2, r2, #2
 800379c:	4093      	lsls	r3, r2
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037a4:	4935      	ldr	r1, [pc, #212]	; (800387c <HAL_GPIO_Init+0x328>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	3302      	adds	r3, #2
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b2:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_GPIO_Init+0x354>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d6:	4a34      	ldr	r2, [pc, #208]	; (80038a8 <HAL_GPIO_Init+0x354>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_GPIO_Init+0x354>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003800:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <HAL_GPIO_Init+0x354>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_GPIO_Init+0x354>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_GPIO_Init+0x354>)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_GPIO_Init+0x354>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_GPIO_Init+0x354>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	f67f ae86 	bls.w	8003574 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	40013800 	.word	0x40013800
 8003880:	40020000 	.word	0x40020000
 8003884:	40020400 	.word	0x40020400
 8003888:	40020800 	.word	0x40020800
 800388c:	40020c00 	.word	0x40020c00
 8003890:	40021000 	.word	0x40021000
 8003894:	40021400 	.word	0x40021400
 8003898:	40021800 	.word	0x40021800
 800389c:	40021c00 	.word	0x40021c00
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40022400 	.word	0x40022400
 80038a8:	40013c00 	.word	0x40013c00

080038ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fa58 	bl	8000db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fbe4 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003960:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003970:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	e006      	b.n	8003998 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003996:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d104      	bne.n	80039aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_I2C_Init+0x11c>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69d9      	ldr	r1, [r3, #28]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	02008000 	.word	0x02008000

08003a30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	f040 80f9 	bne.w	8003c4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x34>
 8003a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0ed      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_I2C_Mem_Write+0x4e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e0e6      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a86:	f7ff f98f 	bl	8002da8 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2319      	movs	r3, #25
 8003a92:	2201      	movs	r2, #1
 8003a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fac3 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0d1      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2221      	movs	r2, #33	; 0x21
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad0:	88f8      	ldrh	r0, [r7, #6]
 8003ad2:	893a      	ldrh	r2, [r7, #8]
 8003ad4:	8979      	ldrh	r1, [r7, #10]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4603      	mov	r3, r0
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f9d3 	bl	8003e8c <I2C_RequestMemoryWrite>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0a9      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	d90e      	bls.n	8003b20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	22ff      	movs	r2, #255	; 0xff
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	8979      	ldrh	r1, [r7, #10]
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fc1f 	bl	800435c <I2C_TransferConfig>
 8003b1e:	e00f      	b.n	8003b40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	8979      	ldrh	r1, [r7, #10]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fc0e 	bl	800435c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 faad 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e07b      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d034      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x1c8>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d130      	bne.n	8003bf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2180      	movs	r1, #128	; 0x80
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fa3f 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e04d      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d90e      	bls.n	8003bd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	8979      	ldrh	r1, [r7, #10]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fbc3 	bl	800435c <I2C_TransferConfig>
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	8979      	ldrh	r1, [r7, #10]
 8003bea:	2300      	movs	r3, #0
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fbb2 	bl	800435c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d19e      	bne.n	8003b40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fa8c 	bl	8004124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e01a      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_I2C_Mem_Write+0x224>)
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	fe00e800 	.word	0xfe00e800

08003c58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	f040 80fd 	bne.w	8003e7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_I2C_Mem_Read+0x34>
 8003c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0f1      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2C_Mem_Read+0x4e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ea      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cae:	f7ff f87b 	bl	8002da8 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2319      	movs	r3, #25
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f9af 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0d5      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2222      	movs	r2, #34	; 0x22
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf8:	88f8      	ldrh	r0, [r7, #6]
 8003cfa:	893a      	ldrh	r2, [r7, #8]
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4603      	mov	r3, r0
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f913 	bl	8003f34 <I2C_RequestMemoryRead>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0ad      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2bff      	cmp	r3, #255	; 0xff
 8003d28:	d90e      	bls.n	8003d48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	8979      	ldrh	r1, [r7, #10]
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <HAL_I2C_Mem_Read+0x22c>)
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fb0b 	bl	800435c <I2C_TransferConfig>
 8003d46:	e00f      	b.n	8003d68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	8979      	ldrh	r1, [r7, #10]
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_I2C_Mem_Read+0x22c>)
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fafa 	bl	800435c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2104      	movs	r1, #4
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f956 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07c      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d034      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x1d0>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d130      	bne.n	8003e28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f927 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04d      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2bff      	cmp	r3, #255	; 0xff
 8003de8:	d90e      	bls.n	8003e08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	22ff      	movs	r2, #255	; 0xff
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 faab 	bl	800435c <I2C_TransferConfig>
 8003e06:	e00f      	b.n	8003e28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	8979      	ldrh	r1, [r7, #10]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fa9a 	bl	800435c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d19a      	bne.n	8003d68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f974 	bl	8004124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e01a      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_I2C_Mem_Read+0x230>)
 8003e5a:	400b      	ands	r3, r1
 8003e5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	80002400 	.word	0x80002400
 8003e88:	fe00e800 	.word	0xfe00e800

08003e8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <I2C_RequestMemoryWrite+0xa4>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fa51 	bl	800435c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8f0 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02c      	b.n	8003f28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
 8003ede:	e015      	b.n	8003f0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee0:	893b      	ldrh	r3, [r7, #8]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	69b9      	ldr	r1, [r7, #24]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f8d6 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e012      	b.n	8003f28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f884 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	80002000 	.word	0x80002000

08003f34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <I2C_RequestMemoryRead+0xa4>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f9fe 	bl	800435c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f89d 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e02c      	b.n	8003fce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
 8003f84:	e015      	b.n	8003fb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f883 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e012      	b.n	8003fce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa8:	893b      	ldrh	r3, [r7, #8]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f831 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	80002000 	.word	0x80002000

08003fdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d103      	bne.n	8003ffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d007      	beq.n	8004018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	619a      	str	r2, [r3, #24]
  }
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004034:	e022      	b.n	800407c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403c:	d01e      	beq.n	800407c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fe feb3 	bl	8002da8 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e00f      	b.n	800409c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	429a      	cmp	r2, r3
 8004098:	d0cd      	beq.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040b0:	e02c      	b.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f870 	bl	800419c <I2C_IsErrorOccurred>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e02a      	b.n	800411c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d01e      	beq.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fe6b 	bl	8002da8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d113      	bne.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d1cb      	bne.n	80040b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004130:	e028      	b.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f830 	bl	800419c <I2C_IsErrorOccurred>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e026      	b.n	8004194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fe2f 	bl	8002da8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d113      	bne.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e007      	b.n	8004194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	d1cf      	bne.n	8004132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d068      	beq.n	800429a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041d0:	e049      	b.n	8004266 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d045      	beq.n	8004266 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe fde5 	bl	8002da8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_IsErrorOccurred+0x54>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13a      	bne.n	8004266 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004202:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004212:	d121      	bne.n	8004258 <I2C_IsErrorOccurred+0xbc>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421a:	d01d      	beq.n	8004258 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b20      	cmp	r3, #32
 8004220:	d01a      	beq.n	8004258 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004230:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004232:	f7fe fdb9 	bl	8002da8 <HAL_GetTick>
 8004236:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004238:	e00e      	b.n	8004258 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800423a:	f7fe fdb5 	bl	8002da8 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b19      	cmp	r3, #25
 8004246:	d907      	bls.n	8004258 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f043 0320 	orr.w	r3, r3, #32
 800424e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004256:	e006      	b.n	8004266 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d1e9      	bne.n	800423a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b20      	cmp	r3, #32
 8004272:	d003      	beq.n	800427c <I2C_IsErrorOccurred+0xe0>
 8004274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0aa      	beq.n	80041d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800427c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2220      	movs	r2, #32
 800428a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f043 0308 	orr.w	r3, r3, #8
 80042d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01c      	beq.n	800434a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff fe63 	bl	8003fdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <I2C_IsErrorOccurred+0x1bc>)
 8004322:	400b      	ands	r3, r1
 8004324:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800434a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800434e:	4618      	mov	r0, r3
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	fe00e800 	.word	0xfe00e800

0800435c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	817b      	strh	r3, [r7, #10]
 800436a:	4613      	mov	r3, r2
 800436c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004374:	7a7b      	ldrb	r3, [r7, #9]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800437c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	4313      	orrs	r3, r2
 8004386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800438a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	0d5b      	lsrs	r3, r3, #21
 8004396:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <I2C_TransferConfig+0x60>)
 800439c:	430b      	orrs	r3, r1
 800439e:	43db      	mvns	r3, r3
 80043a0:	ea02 0103 	and.w	r1, r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	03ff63ff 	.word	0x03ff63ff

080043c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d138      	bne.n	8004448 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e032      	b.n	800444a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004412:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	d139      	bne.n	80044e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004476:	2302      	movs	r3, #2
 8004478:	e033      	b.n	80044e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2224      	movs	r2, #36	; 0x24
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a04      	ldr	r2, [pc, #16]	; (800450c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40007000 	.word	0x40007000

08004510 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800453e:	f7fe fc33 	bl	8002da8 <HAL_GetTick>
 8004542:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004544:	e009      	b.n	800455a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004546:	f7fe fc2f 	bl	8002da8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004554:	d901      	bls.n	800455a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e022      	b.n	80045a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800455a:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004566:	d1ee      	bne.n	8004546 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800456e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004572:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004574:	f7fe fc18 	bl	8002da8 <HAL_GetTick>
 8004578:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800457a:	e009      	b.n	8004590 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800457c:	f7fe fc14 	bl	8002da8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458a:	d901      	bls.n	8004590 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e007      	b.n	80045a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800459c:	d1ee      	bne.n	800457c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000

080045b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e29b      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8087 	beq.w	80046e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d4:	4b96      	ldr	r3, [pc, #600]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d00c      	beq.n	80045fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e0:	4b93      	ldr	r3, [pc, #588]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d112      	bne.n	8004612 <HAL_RCC_OscConfig+0x62>
 80045ec:	4b90      	ldr	r3, [pc, #576]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f8:	d10b      	bne.n	8004612 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fa:	4b8d      	ldr	r3, [pc, #564]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d06c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x130>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d168      	bne.n	80046e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e275      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x7a>
 800461c:	4b84      	ldr	r3, [pc, #528]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a83      	ldr	r2, [pc, #524]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e02e      	b.n	8004688 <HAL_RCC_OscConfig+0xd8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x9c>
 8004632:	4b7f      	ldr	r3, [pc, #508]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7e      	ldr	r2, [pc, #504]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b7c      	ldr	r3, [pc, #496]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a7b      	ldr	r2, [pc, #492]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e01d      	b.n	8004688 <HAL_RCC_OscConfig+0xd8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0xc0>
 8004656:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a75      	ldr	r2, [pc, #468]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b73      	ldr	r3, [pc, #460]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a72      	ldr	r2, [pc, #456]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0xd8>
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6e      	ldr	r2, [pc, #440]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6b      	ldr	r2, [pc, #428]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fb8a 	bl	8002da8 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fe fb86 	bl	8002da8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e229      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b61      	ldr	r3, [pc, #388]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0xe8>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe fb76 	bl	8002da8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fe fb72 	bl	8002da8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e215      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x110>
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d069      	beq.n	80047c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ee:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fa:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b08      	cmp	r3, #8
 8004704:	d11c      	bne.n	8004740 <HAL_RCC_OscConfig+0x190>
 8004706:	4b4a      	ldr	r3, [pc, #296]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d116      	bne.n	8004740 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x17a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e1e9      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	493d      	ldr	r1, [pc, #244]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	e040      	b.n	80047c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004748:	4b39      	ldr	r3, [pc, #228]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a38      	ldr	r2, [pc, #224]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe fb28 	bl	8002da8 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475c:	f7fe fb24 	bl	8002da8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1c7      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476e:	4b30      	ldr	r3, [pc, #192]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4929      	ldr	r1, [pc, #164]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
 800478e:	e018      	b.n	80047c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a26      	ldr	r2, [pc, #152]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fe fb04 	bl	8002da8 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a4:	f7fe fb00 	bl	8002da8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e1a3      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d038      	beq.n	8004840 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d019      	beq.n	800480a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d6:	4b16      	ldr	r3, [pc, #88]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fe fae1 	bl	8002da8 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ea:	f7fe fadd 	bl	8002da8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e180      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 80047fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x23a>
 8004808:	e01a      	b.n	8004840 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <HAL_RCC_OscConfig+0x280>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fe fac7 	bl	8002da8 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481e:	f7fe fac3 	bl	8002da8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d903      	bls.n	8004834 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e166      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
 8004830:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004834:	4b92      	ldr	r3, [pc, #584]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ee      	bne.n	800481e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a4 	beq.w	8004996 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10d      	bne.n	8004876 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	4b89      	ldr	r3, [pc, #548]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4a88      	ldr	r2, [pc, #544]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004864:	6413      	str	r3, [r2, #64]	; 0x40
 8004866:	4b86      	ldr	r3, [pc, #536]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004876:	4b83      	ldr	r3, [pc, #524]	; (8004a84 <HAL_RCC_OscConfig+0x4d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d118      	bne.n	80048b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004882:	4b80      	ldr	r3, [pc, #512]	; (8004a84 <HAL_RCC_OscConfig+0x4d4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a7f      	ldr	r2, [pc, #508]	; (8004a84 <HAL_RCC_OscConfig+0x4d4>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488e:	f7fe fa8b 	bl	8002da8 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7fe fa87 	bl	8002da8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	; 0x64
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e12a      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a8:	4b76      	ldr	r3, [pc, #472]	; (8004a84 <HAL_RCC_OscConfig+0x4d4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x31a>
 80048bc:	4b70      	ldr	r3, [pc, #448]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	4a6f      	ldr	r2, [pc, #444]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70
 80048c8:	e02d      	b.n	8004926 <HAL_RCC_OscConfig+0x376>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x33c>
 80048d2:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	4b68      	ldr	r3, [pc, #416]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a67      	ldr	r2, [pc, #412]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	e01c      	b.n	8004926 <HAL_RCC_OscConfig+0x376>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d10c      	bne.n	800490e <HAL_RCC_OscConfig+0x35e>
 80048f4:	4b62      	ldr	r3, [pc, #392]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a61      	ldr	r2, [pc, #388]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a5e      	ldr	r2, [pc, #376]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	e00b      	b.n	8004926 <HAL_RCC_OscConfig+0x376>
 800490e:	4b5c      	ldr	r3, [pc, #368]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004920:	f023 0304 	bic.w	r3, r3, #4
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d015      	beq.n	800495a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fe fa3b 	bl	8002da8 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fe fa37 	bl	8002da8 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0d8      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494c:	4b4c      	ldr	r3, [pc, #304]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ee      	beq.n	8004936 <HAL_RCC_OscConfig+0x386>
 8004958:	e014      	b.n	8004984 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fe fa25 	bl	8002da8 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fe fa21 	bl	8002da8 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0c2      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ee      	bne.n	8004962 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a3c      	ldr	r2, [pc, #240]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80ae 	beq.w	8004afc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a0:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d06d      	beq.n	8004a88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d14b      	bne.n	8004a4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a31      	ldr	r2, [pc, #196]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80049ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fe f9f2 	bl	8002da8 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fe f9ee 	bl	8002da8 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e091      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	491b      	ldr	r1, [pc, #108]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fe f9c0 	bl	8002da8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe f9bc 	bl	8002da8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e05f      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x47c>
 8004a4a:	e057      	b.n	8004afc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fe f9a6 	bl	8002da8 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fe f9a2 	bl	8002da8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e045      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCC_OscConfig+0x4d0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4b0>
 8004a7e:	e03d      	b.n	8004afc <HAL_RCC_OscConfig+0x54c>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a88:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <HAL_RCC_OscConfig+0x558>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d030      	beq.n	8004af8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d129      	bne.n	8004af8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d122      	bne.n	8004af8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004abe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d119      	bne.n	8004af8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d10f      	bne.n	8004af8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0d0      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d910      	bls.n	8004b54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b67      	ldr	r3, [pc, #412]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 020f 	bic.w	r2, r3, #15
 8004b3a:	4965      	ldr	r1, [pc, #404]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b6c:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a58      	ldr	r2, [pc, #352]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b84:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	494d      	ldr	r1, [pc, #308]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d040      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b47      	ldr	r3, [pc, #284]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d115      	bne.n	8004bee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e07f      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e073      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06b      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4936      	ldr	r1, [pc, #216]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c00:	f7fe f8d2 	bl	8002da8 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fe f8ce 	bl	8002da8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e053      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d210      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 020f 	bic.w	r2, r3, #15
 8004c46:	4922      	ldr	r1, [pc, #136]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c9e:	f000 f821 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	490a      	ldr	r1, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8004cb0:	5ccb      	ldrb	r3, [r1, r3]
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1d0>)
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1d4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe f82e 	bl	8002d20 <HAL_InitTick>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023c00 	.word	0x40023c00
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800aa7c 	.word	0x0800aa7c
 8004cdc:	20000010 	.word	0x20000010
 8004ce0:	20000014 	.word	0x20000014

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce8:	b094      	sub	sp, #80	; 0x50
 8004cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfc:	4b79      	ldr	r3, [pc, #484]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d00d      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x40>
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	f200 80e1 	bhi.w	8004ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x34>
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d16:	e0db      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b73      	ldr	r3, [pc, #460]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d1c:	e0db      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d1e:	4b73      	ldr	r3, [pc, #460]	; (8004eec <HAL_RCC_GetSysClockFreq+0x208>)
 8004d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d22:	e0d8      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d24:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d063      	beq.n	8004e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b6a      	ldr	r3, [pc, #424]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	2200      	movs	r2, #0
 8004d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4e:	2300      	movs	r3, #0
 8004d50:	637b      	str	r3, [r7, #52]	; 0x34
 8004d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f04f 0000 	mov.w	r0, #0
 8004d5e:	f04f 0100 	mov.w	r1, #0
 8004d62:	0159      	lsls	r1, r3, #5
 8004d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d68:	0150      	lsls	r0, r2, #5
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4621      	mov	r1, r4
 8004d70:	1a51      	subs	r1, r2, r1
 8004d72:	6139      	str	r1, [r7, #16]
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb63 0301 	sbc.w	r3, r3, r1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d88:	4659      	mov	r1, fp
 8004d8a:	018b      	lsls	r3, r1, #6
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d92:	4651      	mov	r1, sl
 8004d94:	018a      	lsls	r2, r1, #6
 8004d96:	4651      	mov	r1, sl
 8004d98:	ebb2 0801 	subs.w	r8, r2, r1
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db6:	4690      	mov	r8, r2
 8004db8:	4699      	mov	r9, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	eb18 0303 	adds.w	r3, r8, r3
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	eb49 0303 	adc.w	r3, r9, r3
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	024b      	lsls	r3, r1, #9
 8004dda:	4621      	mov	r1, r4
 8004ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004de0:	4621      	mov	r1, r4
 8004de2:	024a      	lsls	r2, r1, #9
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dea:	2200      	movs	r2, #0
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df4:	f7fb fa7c 	bl	80002f0 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e00:	e058      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e02:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e12:	623b      	str	r3, [r7, #32]
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	f04f 0000 	mov.w	r0, #0
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	0159      	lsls	r1, r3, #5
 8004e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e2e:	0150      	lsls	r0, r2, #5
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4641      	mov	r1, r8
 8004e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e54:	ebb2 040a 	subs.w	r4, r2, sl
 8004e58:	eb63 050b 	sbc.w	r5, r3, fp
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	00eb      	lsls	r3, r5, #3
 8004e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6a:	00e2      	lsls	r2, r4, #3
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	4643      	mov	r3, r8
 8004e72:	18e3      	adds	r3, r4, r3
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	464b      	mov	r3, r9
 8004e78:	eb45 0303 	adc.w	r3, r5, r3
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	028b      	lsls	r3, r1, #10
 8004e8e:	4621      	mov	r1, r4
 8004e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e94:	4621      	mov	r1, r4
 8004e96:	028a      	lsls	r2, r1, #10
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	61fa      	str	r2, [r7, #28]
 8004ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea8:	f7fb fa22 	bl	80002f0 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3750      	adds	r7, #80	; 0x50
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	00f42400 	.word	0x00f42400
 8004eec:	007a1200 	.word	0x007a1200

08004ef0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000010 	.word	0x20000010

08004f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f0c:	f7ff fff0 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0a9b      	lsrs	r3, r3, #10
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4903      	ldr	r1, [pc, #12]	; (8004f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	0800aa8c 	.word	0x0800aa8c

08004f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f34:	f7ff ffdc 	bl	8004ef0 <HAL_RCC_GetHCLKFreq>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	0b5b      	lsrs	r3, r3, #13
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	4903      	ldr	r1, [pc, #12]	; (8004f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f46:	5ccb      	ldrb	r3, [r1, r3]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40023800 	.word	0x40023800
 8004f54:	0800aa8c 	.word	0x0800aa8c

08004f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f80:	4b69      	ldr	r3, [pc, #420]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	4a68      	ldr	r2, [pc, #416]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f8a:	6093      	str	r3, [r2, #8]
 8004f8c:	4b66      	ldr	r3, [pc, #408]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	4964      	ldr	r1, [pc, #400]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc0:	4959      	ldr	r1, [pc, #356]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fee:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	494a      	ldr	r1, [pc, #296]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500c:	d101      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800502a:	2301      	movs	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 808b 	beq.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800503c:	4b3a      	ldr	r3, [pc, #232]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	4a39      	ldr	r2, [pc, #228]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005046:	6413      	str	r3, [r2, #64]	; 0x40
 8005048:	4b37      	ldr	r3, [pc, #220]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005054:	4b35      	ldr	r3, [pc, #212]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a34      	ldr	r2, [pc, #208]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005060:	f7fd fea2 	bl	8002da8 <HAL_GetTick>
 8005064:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005066:	e008      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005068:	f7fd fe9e 	bl	8002da8 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e38f      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800507a:	4b2c      	ldr	r3, [pc, #176]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005086:	4b28      	ldr	r3, [pc, #160]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d035      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d02e      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050cc:	4b16      	ldr	r3, [pc, #88]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d114      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd fe66 	bl	8002da8 <HAL_GetTick>
 80050dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fd fe62 	bl	8002da8 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e351      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510e:	d111      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800511e:	400b      	ands	r3, r1
 8005120:	4901      	ldr	r1, [pc, #4]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
 8005126:	e00b      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005128:	40023800 	.word	0x40023800
 800512c:	40007000 	.word	0x40007000
 8005130:	0ffffcff 	.word	0x0ffffcff
 8005134:	4bac      	ldr	r3, [pc, #688]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4aab      	ldr	r2, [pc, #684]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800513e:	6093      	str	r3, [r2, #8]
 8005140:	4ba9      	ldr	r3, [pc, #676]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	49a6      	ldr	r1, [pc, #664]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514e:	4313      	orrs	r3, r2
 8005150:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d010      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800515e:	4ba2      	ldr	r3, [pc, #648]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	4aa0      	ldr	r2, [pc, #640]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800516a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800516e:	4b9e      	ldr	r3, [pc, #632]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005170:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	499b      	ldr	r1, [pc, #620]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800518c:	4b96      	ldr	r3, [pc, #600]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519a:	4993      	ldr	r1, [pc, #588]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ae:	4b8e      	ldr	r3, [pc, #568]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051bc:	498a      	ldr	r1, [pc, #552]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d0:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051de:	4982      	ldr	r1, [pc, #520]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051f2:	4b7d      	ldr	r3, [pc, #500]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	4979      	ldr	r1, [pc, #484]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005214:	4b74      	ldr	r3, [pc, #464]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f023 0203 	bic.w	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	4971      	ldr	r1, [pc, #452]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005236:	4b6c      	ldr	r3, [pc, #432]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f023 020c 	bic.w	r2, r3, #12
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005244:	4968      	ldr	r1, [pc, #416]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005258:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	4960      	ldr	r1, [pc, #384]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800527a:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005280:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005288:	4957      	ldr	r1, [pc, #348]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800529c:	4b52      	ldr	r3, [pc, #328]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	494f      	ldr	r1, [pc, #316]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052be:	4b4a      	ldr	r3, [pc, #296]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	4946      	ldr	r1, [pc, #280]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80052e0:	4b41      	ldr	r3, [pc, #260]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	493e      	ldr	r1, [pc, #248]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005302:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	4935      	ldr	r1, [pc, #212]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005324:	4b30      	ldr	r3, [pc, #192]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005332:	492d      	ldr	r1, [pc, #180]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d011      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005346:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005354:	4924      	ldr	r1, [pc, #144]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005364:	d101      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005366:	2301      	movs	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005394:	4914      	ldr	r1, [pc, #80]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00b      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b8:	490b      	ldr	r1, [pc, #44]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00f      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053dc:	4902      	ldr	r1, [pc, #8]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053e4:	e002      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053f8:	4b8a      	ldr	r3, [pc, #552]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	4986      	ldr	r1, [pc, #536]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800541c:	4b81      	ldr	r3, [pc, #516]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005422:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542c:	497d      	ldr	r1, [pc, #500]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d006      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80d6 	beq.w	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005448:	4b76      	ldr	r3, [pc, #472]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a75      	ldr	r2, [pc, #468]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fd fca8 	bl	8002da8 <HAL_GetTick>
 8005458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800545c:	f7fd fca4 	bl	8002da8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e195      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800546e:	4b6d      	ldr	r3, [pc, #436]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d021      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11d      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800548e:	4b65      	ldr	r3, [pc, #404]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800549c:	4b61      	ldr	r3, [pc, #388]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800549e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a2:	0e1b      	lsrs	r3, r3, #24
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	019a      	lsls	r2, r3, #6
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	4958      	ldr	r1, [pc, #352]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02e      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f4:	d129      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054f6:	4b4b      	ldr	r3, [pc, #300]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005504:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550a:	0f1b      	lsrs	r3, r3, #28
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	019a      	lsls	r2, r3, #6
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	493e      	ldr	r1, [pc, #248]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005532:	4b3c      	ldr	r3, [pc, #240]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005538:	f023 021f 	bic.w	r2, r3, #31
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	3b01      	subs	r3, #1
 8005542:	4938      	ldr	r1, [pc, #224]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01d      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005556:	4b33      	ldr	r3, [pc, #204]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555c:	0e1b      	lsrs	r3, r3, #24
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005564:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556a:	0f1b      	lsrs	r3, r3, #28
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	019a      	lsls	r2, r3, #6
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	431a      	orrs	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	071b      	lsls	r3, r3, #28
 800558a:	4926      	ldr	r1, [pc, #152]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	019a      	lsls	r2, r3, #6
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	061b      	lsls	r3, r3, #24
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	491a      	ldr	r1, [pc, #104]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055c2:	4b18      	ldr	r3, [pc, #96]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a17      	ldr	r2, [pc, #92]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ce:	f7fd fbeb 	bl	8002da8 <HAL_GetTick>
 80055d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055d6:	f7fd fbe7 	bl	8002da8 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b64      	cmp	r3, #100	; 0x64
 80055e2:	d901      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0d8      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055e8:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	f040 80ce 	bne.w	8005798 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005608:	f7fd fbce 	bl	8002da8 <HAL_GetTick>
 800560c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800560e:	e00b      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005610:	f7fd fbca 	bl	8002da8 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	; 0x64
 800561c:	d904      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e0bb      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005628:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005634:	d0ec      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02e      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d12a      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800565e:	4b51      	ldr	r3, [pc, #324]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	0f1b      	lsrs	r3, r3, #28
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	019a      	lsls	r2, r3, #6
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	071b      	lsls	r3, r3, #28
 8005692:	4944      	ldr	r1, [pc, #272]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800569a:	4b42      	ldr	r3, [pc, #264]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800569c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	3b01      	subs	r3, #1
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	493d      	ldr	r1, [pc, #244]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c8:	d11d      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056ca:	4b36      	ldr	r3, [pc, #216]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	0e1b      	lsrs	r3, r3, #24
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	0f1b      	lsrs	r3, r3, #28
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	019a      	lsls	r2, r3, #6
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	071b      	lsls	r3, r3, #28
 80056fe:	4929      	ldr	r1, [pc, #164]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d028      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	0e1b      	lsrs	r3, r3, #24
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005720:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	0c1b      	lsrs	r3, r3, #16
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	019a      	lsls	r2, r3, #6
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	431a      	orrs	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	071b      	lsls	r3, r3, #28
 8005746:	4917      	ldr	r1, [pc, #92]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4911      	ldr	r1, [pc, #68]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800576a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005770:	f7fd fb1a 	bl	8002da8 <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005778:	f7fd fb16 	bl	8002da8 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	; 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e007      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005796:	d1ef      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800

080057a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e09d      	b.n	80058f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ca:	d009      	beq.n	80057e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	61da      	str	r2, [r3, #28]
 80057d2:	e005      	b.n	80057e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc fd2a 	bl	8002254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005820:	d902      	bls.n	8005828 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	e002      	b.n	800582e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005836:	d007      	beq.n	8005848 <HAL_SPI_Init+0xa0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	ea42 0103 	orr.w	r1, r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	f003 0204 	and.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058c4:	ea42 0103 	orr.w	r1, r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e049      	b.n	80059a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fc fd15 	bl	8002354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f001 f831 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e054      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <HAL_TIM_Base_Start_IT+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d01d      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_TIM_Base_Start_IT+0xd4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIM_Base_Start_IT+0xe0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d115      	bne.n	8005a58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_TIM_Base_Start_IT+0xec>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d015      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d011      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	e008      	b.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40001800 	.word	0x40001800
 8005a98:	00010007 	.word	0x00010007

08005a9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e049      	b.n	8005b42 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f841 	bl	8005b4a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 ff62 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e049      	b.n	8005c04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fc fcf5 	bl	8002574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f000 ff01 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x24>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e03c      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d109      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x3e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e02f      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d109      	bne.n	8005c64 <HAL_TIM_PWM_Start+0x58>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	bf14      	ite	ne
 8005c5c:	2301      	movne	r3, #1
 8005c5e:	2300      	moveq	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e022      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d109      	bne.n	8005c7e <HAL_TIM_PWM_Start+0x72>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	bf14      	ite	ne
 8005c76:	2301      	movne	r3, #1
 8005c78:	2300      	moveq	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	e015      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d109      	bne.n	8005c98 <HAL_TIM_PWM_Start+0x8c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e008      	b.n	8005caa <HAL_TIM_PWM_Start+0x9e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e092      	b.n	8005dd8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0xb6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc0:	e023      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0xc6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd0:	e01b      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0xd6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce0:	e013      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Start+0xe6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf0:	e00b      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start+0xf6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d00:	e003      	b.n	8005d0a <HAL_TIM_PWM_Start+0xfe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fb08 	bl	8007328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	; (8005de0 <HAL_TIM_PWM_Start+0x1d4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_TIM_PWM_Start+0x120>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <HAL_TIM_PWM_Start+0x1d8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_PWM_Start+0x124>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_TIM_PWM_Start+0x126>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <HAL_TIM_PWM_Start+0x1d4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d022      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d01d      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <HAL_TIM_PWM_Start+0x1dc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <HAL_TIM_PWM_Start+0x1e0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <HAL_TIM_PWM_Start+0x1e4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_TIM_PWM_Start+0x1d8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_TIM_PWM_Start+0x1e8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x18a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <HAL_TIM_PWM_Start+0x1ec>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d115      	bne.n	8005dc2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <HAL_TIM_PWM_Start+0x1f0>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d015      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x1c8>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dae:	d011      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	e008      	b.n	8005dd4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e000      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40001800 	.word	0x40001800
 8005dfc:	00010007 	.word	0x00010007

08005e00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e049      	b.n	8005ea6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f841 	bl	8005eae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 fdb0 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e08f      	b.n	8005ff8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fc facb 	bl	8002488 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6899      	ldr	r1, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4b3e      	ldr	r3, [pc, #248]	; (8006000 <HAL_TIM_Encoder_Init+0x13c>)
 8005f06:	400b      	ands	r3, r1
 8005f08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 fd45 	bl	80069a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <HAL_TIM_Encoder_Init+0x140>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <HAL_TIM_Encoder_Init+0x144>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4b2a      	ldr	r3, [pc, #168]	; (800600c <HAL_TIM_Encoder_Init+0x148>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	4313      	orrs	r3, r2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	011a      	lsls	r2, r3, #4
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	4313      	orrs	r3, r2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	fffebff8 	.word	0xfffebff8
 8006004:	fffffcfc 	.word	0xfffffcfc
 8006008:	fffff3f3 	.word	0xfffff3f3
 800600c:	ffff0f0f 	.word	0xffff0f0f

08006010 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006020:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006028:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006030:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006038:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d110      	bne.n	8006062 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d102      	bne.n	800604c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006046:	7b7b      	ldrb	r3, [r7, #13]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d001      	beq.n	8006050 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e069      	b.n	8006124 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006060:	e031      	b.n	80060c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b04      	cmp	r3, #4
 8006066:	d110      	bne.n	800608a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d102      	bne.n	8006074 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800606e:	7b3b      	ldrb	r3, [r7, #12]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d001      	beq.n	8006078 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e055      	b.n	8006124 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006088:	e01d      	b.n	80060c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d108      	bne.n	80060a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d105      	bne.n	80060a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006096:	7b7b      	ldrb	r3, [r7, #13]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d102      	bne.n	80060a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800609c:	7b3b      	ldrb	r3, [r7, #12]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d001      	beq.n	80060a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e03e      	b.n	8006124 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_TIM_Encoder_Start+0xc4>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d008      	beq.n	80060e4 <HAL_TIM_Encoder_Start+0xd4>
 80060d2:	e00f      	b.n	80060f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2201      	movs	r2, #1
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 f923 	bl	8007328 <TIM_CCxChannelCmd>
      break;
 80060e2:	e016      	b.n	8006112 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	2104      	movs	r1, #4
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 f91b 	bl	8007328 <TIM_CCxChannelCmd>
      break;
 80060f2:	e00e      	b.n	8006112 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2201      	movs	r2, #1
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f913 	bl	8007328 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2201      	movs	r2, #1
 8006108:	2104      	movs	r1, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f001 f90c 	bl	8007328 <TIM_CCxChannelCmd>
      break;
 8006110:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d122      	bne.n	8006188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d11b      	bne.n	8006188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0202 	mvn.w	r2, #2
 8006158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fbfa 	bl	8006968 <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fbec 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fbfd 	bl	800697c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d122      	bne.n	80061dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d11b      	bne.n	80061dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0204 	mvn.w	r2, #4
 80061ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fbd0 	bl	8006968 <HAL_TIM_IC_CaptureCallback>
 80061c8:	e005      	b.n	80061d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fbc2 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fbd3 	bl	800697c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d122      	bne.n	8006230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d11b      	bne.n	8006230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0208 	mvn.w	r2, #8
 8006200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2204      	movs	r2, #4
 8006206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fba6 	bl	8006968 <HAL_TIM_IC_CaptureCallback>
 800621c:	e005      	b.n	800622a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fb98 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fba9 	bl	800697c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b10      	cmp	r3, #16
 800623c:	d122      	bne.n	8006284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b10      	cmp	r3, #16
 800624a:	d11b      	bne.n	8006284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0210 	mvn.w	r2, #16
 8006254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2208      	movs	r2, #8
 800625a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb7c 	bl	8006968 <HAL_TIM_IC_CaptureCallback>
 8006270:	e005      	b.n	800627e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb6e 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fb7f 	bl	800697c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0201 	mvn.w	r2, #1
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fa fbcc 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d10e      	bne.n	80062dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d107      	bne.n	80062dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 f962 	bl	80075a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ea:	d10e      	bne.n	800630a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	d107      	bne.n	800630a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f955 	bl	80075b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d10e      	bne.n	8006336 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d107      	bne.n	8006336 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800632e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fb2d 	bl	8006990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b20      	cmp	r3, #32
 8006342:	d10e      	bne.n	8006362 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b20      	cmp	r3, #32
 8006350:	d107      	bne.n	8006362 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f06f 0220 	mvn.w	r2, #32
 800635a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f915 	bl	800758c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006386:	2302      	movs	r3, #2
 8006388:	e066      	b.n	8006458 <HAL_TIM_OC_ConfigChannel+0xec>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b14      	cmp	r3, #20
 8006396:	d857      	bhi.n	8006448 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006449 	.word	0x08006449
 80063a8:	08006449 	.word	0x08006449
 80063ac:	08006449 	.word	0x08006449
 80063b0:	08006403 	.word	0x08006403
 80063b4:	08006449 	.word	0x08006449
 80063b8:	08006449 	.word	0x08006449
 80063bc:	08006449 	.word	0x08006449
 80063c0:	08006411 	.word	0x08006411
 80063c4:	08006449 	.word	0x08006449
 80063c8:	08006449 	.word	0x08006449
 80063cc:	08006449 	.word	0x08006449
 80063d0:	0800641f 	.word	0x0800641f
 80063d4:	08006449 	.word	0x08006449
 80063d8:	08006449 	.word	0x08006449
 80063dc:	08006449 	.word	0x08006449
 80063e0:	0800642d 	.word	0x0800642d
 80063e4:	08006449 	.word	0x08006449
 80063e8:	08006449 	.word	0x08006449
 80063ec:	08006449 	.word	0x08006449
 80063f0:	0800643b 	.word	0x0800643b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fb72 	bl	8006ae4 <TIM_OC1_SetConfig>
      break;
 8006400:	e025      	b.n	800644e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fbdd 	bl	8006bc8 <TIM_OC2_SetConfig>
      break;
 800640e:	e01e      	b.n	800644e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fc4e 	bl	8006cb8 <TIM_OC3_SetConfig>
      break;
 800641c:	e017      	b.n	800644e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fcbd 	bl	8006da4 <TIM_OC4_SetConfig>
      break;
 800642a:	e010      	b.n	800644e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fd0e 	bl	8006e54 <TIM_OC5_SetConfig>
      break;
 8006438:	e009      	b.n	800644e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fd59 	bl	8006ef8 <TIM_OC6_SetConfig>
      break;
 8006446:	e002      	b.n	800644e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_IC_ConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e088      	b.n	8006590 <HAL_TIM_IC_ConfigChannel+0x130>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800649c:	f000 fd80 	bl	8006fa0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 020c 	bic.w	r2, r2, #12
 80064ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6999      	ldr	r1, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	619a      	str	r2, [r3, #24]
 80064c2:	e060      	b.n	8006586 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d11c      	bne.n	8006504 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80064da:	f000 fe04 	bl	80070e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6999      	ldr	r1, [r3, #24]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	021a      	lsls	r2, r3, #8
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	619a      	str	r2, [r3, #24]
 8006502:	e040      	b.n	8006586 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11b      	bne.n	8006542 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800651a:	f000 fe51 	bl	80071c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 020c 	bic.w	r2, r2, #12
 800652c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69d9      	ldr	r1, [r3, #28]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	61da      	str	r2, [r3, #28]
 8006540:	e021      	b.n	8006586 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b0c      	cmp	r3, #12
 8006546:	d11c      	bne.n	8006582 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006558:	f000 fe6e 	bl	8007238 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800656a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69d9      	ldr	r1, [r3, #28]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	021a      	lsls	r2, r3, #8
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	61da      	str	r2, [r3, #28]
 8006580:	e001      	b.n	8006586 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0ff      	b.n	80067b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b14      	cmp	r3, #20
 80065c2:	f200 80f0 	bhi.w	80067a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006621 	.word	0x08006621
 80065d0:	080067a7 	.word	0x080067a7
 80065d4:	080067a7 	.word	0x080067a7
 80065d8:	080067a7 	.word	0x080067a7
 80065dc:	08006661 	.word	0x08006661
 80065e0:	080067a7 	.word	0x080067a7
 80065e4:	080067a7 	.word	0x080067a7
 80065e8:	080067a7 	.word	0x080067a7
 80065ec:	080066a3 	.word	0x080066a3
 80065f0:	080067a7 	.word	0x080067a7
 80065f4:	080067a7 	.word	0x080067a7
 80065f8:	080067a7 	.word	0x080067a7
 80065fc:	080066e3 	.word	0x080066e3
 8006600:	080067a7 	.word	0x080067a7
 8006604:	080067a7 	.word	0x080067a7
 8006608:	080067a7 	.word	0x080067a7
 800660c:	08006725 	.word	0x08006725
 8006610:	080067a7 	.word	0x080067a7
 8006614:	080067a7 	.word	0x080067a7
 8006618:	080067a7 	.word	0x080067a7
 800661c:	08006765 	.word	0x08006765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fa5c 	bl	8006ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0208 	orr.w	r2, r2, #8
 800663a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	619a      	str	r2, [r3, #24]
      break;
 800665e:	e0a5      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 faae 	bl	8006bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	021a      	lsls	r2, r3, #8
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	619a      	str	r2, [r3, #24]
      break;
 80066a0:	e084      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fb05 	bl	8006cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0208 	orr.w	r2, r2, #8
 80066bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0204 	bic.w	r2, r2, #4
 80066cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	61da      	str	r2, [r3, #28]
      break;
 80066e0:	e064      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fb5b 	bl	8006da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	021a      	lsls	r2, r3, #8
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	61da      	str	r2, [r3, #28]
      break;
 8006722:	e043      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fb92 	bl	8006e54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006762:	e023      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fbc4 	bl	8006ef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067a4:	e002      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	75fb      	strb	r3, [r7, #23]
      break;
 80067aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIM_ConfigClockSource+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e0b4      	b.n	8006946 <HAL_TIM_ConfigClockSource+0x186>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4b56      	ldr	r3, [pc, #344]	; (8006950 <HAL_TIM_ConfigClockSource+0x190>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006814:	d03e      	beq.n	8006894 <HAL_TIM_ConfigClockSource+0xd4>
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681a:	f200 8087 	bhi.w	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006822:	f000 8086 	beq.w	8006932 <HAL_TIM_ConfigClockSource+0x172>
 8006826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682a:	d87f      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b70      	cmp	r3, #112	; 0x70
 800682e:	d01a      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0xa6>
 8006830:	2b70      	cmp	r3, #112	; 0x70
 8006832:	d87b      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b60      	cmp	r3, #96	; 0x60
 8006836:	d050      	beq.n	80068da <HAL_TIM_ConfigClockSource+0x11a>
 8006838:	2b60      	cmp	r3, #96	; 0x60
 800683a:	d877      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b50      	cmp	r3, #80	; 0x50
 800683e:	d03c      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0xfa>
 8006840:	2b50      	cmp	r3, #80	; 0x50
 8006842:	d873      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	d058      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x13a>
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d86f      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b30      	cmp	r3, #48	; 0x30
 800684e:	d064      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006850:	2b30      	cmp	r3, #48	; 0x30
 8006852:	d86b      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b20      	cmp	r3, #32
 8006856:	d060      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006858:	2b20      	cmp	r3, #32
 800685a:	d867      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d05c      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006860:	2b10      	cmp	r3, #16
 8006862:	d05a      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006864:	e062      	b.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006876:	f000 fd37 	bl	80072e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	609a      	str	r2, [r3, #8]
      break;
 8006892:	e04f      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068a4:	f000 fd20 	bl	80072e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b6:	609a      	str	r2, [r3, #8]
      break;
 80068b8:	e03c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068c6:	461a      	mov	r2, r3
 80068c8:	f000 fbde 	bl	8007088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2150      	movs	r1, #80	; 0x50
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fced 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 80068d8:	e02c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068e6:	461a      	mov	r2, r3
 80068e8:	f000 fc3a 	bl	8007160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2160      	movs	r1, #96	; 0x60
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fcdd 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 80068f8:	e01c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006906:	461a      	mov	r2, r3
 8006908:	f000 fbbe 	bl	8007088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2140      	movs	r1, #64	; 0x40
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fccd 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006918:	e00c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f000 fcc4 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 800692a:	e003      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e000      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	fffeff88 	.word	0xfffeff88

08006954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a40      	ldr	r2, [pc, #256]	; (8006ab8 <TIM_Base_SetConfig+0x114>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c2:	d00f      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a3d      	ldr	r2, [pc, #244]	; (8006abc <TIM_Base_SetConfig+0x118>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00b      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <TIM_Base_SetConfig+0x11c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a3b      	ldr	r2, [pc, #236]	; (8006ac4 <TIM_Base_SetConfig+0x120>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a3a      	ldr	r2, [pc, #232]	; (8006ac8 <TIM_Base_SetConfig+0x124>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d108      	bne.n	80069f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2f      	ldr	r2, [pc, #188]	; (8006ab8 <TIM_Base_SetConfig+0x114>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d02b      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a04:	d027      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <TIM_Base_SetConfig+0x118>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d023      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2b      	ldr	r2, [pc, #172]	; (8006ac0 <TIM_Base_SetConfig+0x11c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01f      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <TIM_Base_SetConfig+0x120>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01b      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a29      	ldr	r2, [pc, #164]	; (8006ac8 <TIM_Base_SetConfig+0x124>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d017      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a28      	ldr	r2, [pc, #160]	; (8006acc <TIM_Base_SetConfig+0x128>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <TIM_Base_SetConfig+0x12c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a26      	ldr	r2, [pc, #152]	; (8006ad4 <TIM_Base_SetConfig+0x130>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00b      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a25      	ldr	r2, [pc, #148]	; (8006ad8 <TIM_Base_SetConfig+0x134>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a24      	ldr	r2, [pc, #144]	; (8006adc <TIM_Base_SetConfig+0x138>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a23      	ldr	r2, [pc, #140]	; (8006ae0 <TIM_Base_SetConfig+0x13c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <TIM_Base_SetConfig+0x114>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0xf8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a0c      	ldr	r2, [pc, #48]	; (8006ac8 <TIM_Base_SetConfig+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d103      	bne.n	8006aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	615a      	str	r2, [r3, #20]
}
 8006aaa:	bf00      	nop
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800
 8006ad8:	40001800 	.word	0x40001800
 8006adc:	40001c00 	.word	0x40001c00
 8006ae0:	40002000 	.word	0x40002000

08006ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <TIM_OC1_SetConfig+0xd8>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 0302 	bic.w	r3, r3, #2
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <TIM_OC1_SetConfig+0xdc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC1_SetConfig+0x64>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <TIM_OC1_SetConfig+0xe0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d10c      	bne.n	8006b62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 0304 	bic.w	r3, r3, #4
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <TIM_OC1_SetConfig+0xdc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC1_SetConfig+0x8e>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <TIM_OC1_SetConfig+0xe0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d111      	bne.n	8006b96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	fffeff8f 	.word	0xfffeff8f
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0210 	bic.w	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <TIM_OC2_SetConfig+0xe4>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 0320 	bic.w	r3, r3, #32
 8006c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <TIM_OC2_SetConfig+0xe8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_OC2_SetConfig+0x68>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a22      	ldr	r2, [pc, #136]	; (8006cb4 <TIM_OC2_SetConfig+0xec>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10d      	bne.n	8006c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <TIM_OC2_SetConfig+0xe8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC2_SetConfig+0x94>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a17      	ldr	r2, [pc, #92]	; (8006cb4 <TIM_OC2_SetConfig+0xec>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d113      	bne.n	8006c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	feff8fff 	.word	0xfeff8fff
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40010400 	.word	0x40010400

08006cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <TIM_OC3_SetConfig+0xe0>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <TIM_OC3_SetConfig+0xe4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_OC3_SetConfig+0x66>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a21      	ldr	r2, [pc, #132]	; (8006da0 <TIM_OC3_SetConfig+0xe8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d10d      	bne.n	8006d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <TIM_OC3_SetConfig+0xe4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC3_SetConfig+0x92>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <TIM_OC3_SetConfig+0xe8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d113      	bne.n	8006d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	fffeff8f 	.word	0xfffeff8f
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40010400 	.word	0x40010400

08006da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4b1e      	ldr	r3, [pc, #120]	; (8006e48 <TIM_OC4_SetConfig+0xa4>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <TIM_OC4_SetConfig+0xa8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC4_SetConfig+0x68>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a12      	ldr	r2, [pc, #72]	; (8006e50 <TIM_OC4_SetConfig+0xac>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d109      	bne.n	8006e20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	019b      	lsls	r3, r3, #6
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	feff8fff 	.word	0xfeff8fff
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400

08006e54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <TIM_OC5_SetConfig+0x98>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <TIM_OC5_SetConfig+0x9c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_OC5_SetConfig+0x5e>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <TIM_OC5_SetConfig+0xa0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d109      	bne.n	8006ec6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	fffeff8f 	.word	0xfffeff8f
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40010400 	.word	0x40010400

08006ef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <TIM_OC6_SetConfig+0x9c>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	051b      	lsls	r3, r3, #20
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <TIM_OC6_SetConfig+0xa0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_OC6_SetConfig+0x60>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a12      	ldr	r2, [pc, #72]	; (8006f9c <TIM_OC6_SetConfig+0xa4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d109      	bne.n	8006f6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	feff8fff 	.word	0xfeff8fff
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a28      	ldr	r2, [pc, #160]	; (800706c <TIM_TI1_SetConfig+0xcc>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01b      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d017      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <TIM_TI1_SetConfig+0xd0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <TIM_TI1_SetConfig+0xd4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00f      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	; (8007078 <TIM_TI1_SetConfig+0xd8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00b      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4a22      	ldr	r2, [pc, #136]	; (800707c <TIM_TI1_SetConfig+0xdc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a21      	ldr	r2, [pc, #132]	; (8007080 <TIM_TI1_SetConfig+0xe0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_TI1_SetConfig+0x66>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4a20      	ldr	r2, [pc, #128]	; (8007084 <TIM_TI1_SetConfig+0xe4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d101      	bne.n	800700a <TIM_TI1_SetConfig+0x6a>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <TIM_TI1_SetConfig+0x6c>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e003      	b.n	800702a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	b2db      	uxtb	r3, r3
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f023 030a 	bic.w	r3, r3, #10
 8007044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f003 030a 	and.w	r3, r3, #10
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40010000 	.word	0x40010000
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40010400 	.word	0x40010400
 8007080:	40014000 	.word	0x40014000
 8007084:	40001800 	.word	0x40001800

08007088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 030a 	bic.w	r3, r3, #10
 80070c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f023 0210 	bic.w	r2, r3, #16
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	031b      	lsls	r3, r3, #12
 800712a:	b29b      	uxth	r3, r3
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007138:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	621a      	str	r2, [r3, #32]
}
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	f023 0210 	bic.w	r2, r3, #16
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800718a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	031b      	lsls	r3, r3, #12
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800719c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	621a      	str	r2, [r3, #32]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 0303 	bic.w	r3, r3, #3
 80071ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	b2db      	uxtb	r3, r3
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007210:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	621a      	str	r2, [r3, #32]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007276:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	031b      	lsls	r3, r3, #12
 800727c:	b29b      	uxth	r3, r3
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800728a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	031b      	lsls	r3, r3, #12
 8007290:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2201      	movs	r2, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e06d      	b.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a30      	ldr	r2, [pc, #192]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a2f      	ldr	r2, [pc, #188]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d108      	bne.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a20      	ldr	r2, [pc, #128]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d022      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	d01d      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1d      	ldr	r2, [pc, #116]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a15      	ldr	r2, [pc, #84]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a15      	ldr	r2, [pc, #84]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40010000 	.word	0x40010000
 8007478:	40010400 	.word	0x40010400
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40000c00 	.word	0x40000c00
 8007488:	40014000 	.word	0x40014000
 800748c:	40001800 	.word	0x40001800

08007490 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e065      	b.n	8007578 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a16      	ldr	r2, [pc, #88]	; (8007584 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d004      	beq.n	800753a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a14      	ldr	r2, [pc, #80]	; (8007588 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d115      	bne.n	8007566 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	051b      	lsls	r3, r3, #20
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40010000 	.word	0x40010000
 8007588:	40010400 	.word	0x40010400

0800758c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e040      	b.n	800765c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fb f8ae 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2224      	movs	r2, #36	; 0x24
 80075f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f974 	bl	80078f4 <UART_SetConfig>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e022      	b.n	800765c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fbcc 	bl	8007dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc53 	bl	8007f00 <UART_CheckIdleState>
 800765a:	4603      	mov	r3, r0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007678:	2b20      	cmp	r3, #32
 800767a:	d171      	bne.n	8007760 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_UART_Transmit+0x24>
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e06a      	b.n	8007762 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2221      	movs	r2, #33	; 0x21
 8007698:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800769a:	f7fb fb85 	bl	8002da8 <HAL_GetTick>
 800769e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	88fa      	ldrh	r2, [r7, #6]
 80076a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	88fa      	ldrh	r2, [r7, #6]
 80076ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d108      	bne.n	80076cc <HAL_UART_Transmit+0x68>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e003      	b.n	80076d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076d4:	e02c      	b.n	8007730 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fc5a 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e038      	b.n	8007762 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007704:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3302      	adds	r3, #2
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	e007      	b.n	800771e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1cc      	bne.n	80076d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2200      	movs	r2, #0
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fc27 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e005      	b.n	8007762 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	e000      	b.n	8007762 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b08a      	sub	sp, #40	; 0x28
 800776e:	af02      	add	r7, sp, #8
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007780:	2b20      	cmp	r3, #32
 8007782:	f040 80b1 	bne.w	80078e8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_UART_Receive+0x28>
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e0a9      	b.n	80078ea <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2222      	movs	r2, #34	; 0x22
 80077a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ac:	f7fb fafc 	bl	8002da8 <HAL_GetTick>
 80077b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	d10e      	bne.n	80077ea <HAL_UART_Receive+0x80>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_UART_Receive+0x76>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077de:	e02d      	b.n	800783c <HAL_UART_Receive+0xd2>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	22ff      	movs	r2, #255	; 0xff
 80077e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077e8:	e028      	b.n	800783c <HAL_UART_Receive+0xd2>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_UART_Receive+0xa4>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <HAL_UART_Receive+0x9a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	22ff      	movs	r2, #255	; 0xff
 80077fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007802:	e01b      	b.n	800783c <HAL_UART_Receive+0xd2>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	227f      	movs	r2, #127	; 0x7f
 8007808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800780c:	e016      	b.n	800783c <HAL_UART_Receive+0xd2>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007816:	d10d      	bne.n	8007834 <HAL_UART_Receive+0xca>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_UART_Receive+0xc0>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	227f      	movs	r2, #127	; 0x7f
 8007824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007828:	e008      	b.n	800783c <HAL_UART_Receive+0xd2>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	223f      	movs	r2, #63	; 0x3f
 800782e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007832:	e003      	b.n	800783c <HAL_UART_Receive+0xd2>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007842:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784c:	d108      	bne.n	8007860 <HAL_UART_Receive+0xf6>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e003      	b.n	8007868 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007868:	e032      	b.n	80078d0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2200      	movs	r2, #0
 8007872:	2120      	movs	r1, #32
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fb90 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e032      	b.n	80078ea <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10c      	bne.n	80078a4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	b29a      	uxth	r2, r3
 8007892:	8a7b      	ldrh	r3, [r7, #18]
 8007894:	4013      	ands	r3, r2
 8007896:	b29a      	uxth	r2, r3
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	3302      	adds	r3, #2
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e00c      	b.n	80078be <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	8a7b      	ldrh	r3, [r7, #18]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4013      	ands	r3, r2
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1c6      	bne.n	800786a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4ba6      	ldr	r3, [pc, #664]	; (8007bb8 <UART_SetConfig+0x2c4>)
 8007920:	4013      	ands	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	6979      	ldr	r1, [r7, #20]
 8007928:	430b      	orrs	r3, r1
 800792a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	430a      	orrs	r2, r1
 8007964:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a94      	ldr	r2, [pc, #592]	; (8007bbc <UART_SetConfig+0x2c8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d120      	bne.n	80079b2 <UART_SetConfig+0xbe>
 8007970:	4b93      	ldr	r3, [pc, #588]	; (8007bc0 <UART_SetConfig+0x2cc>)
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b03      	cmp	r3, #3
 800797c:	d816      	bhi.n	80079ac <UART_SetConfig+0xb8>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x90>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	08007995 	.word	0x08007995
 8007988:	080079a1 	.word	0x080079a1
 800798c:	0800799b 	.word	0x0800799b
 8007990:	080079a7 	.word	0x080079a7
 8007994:	2301      	movs	r3, #1
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e150      	b.n	8007c3c <UART_SetConfig+0x348>
 800799a:	2302      	movs	r3, #2
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e14d      	b.n	8007c3c <UART_SetConfig+0x348>
 80079a0:	2304      	movs	r3, #4
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e14a      	b.n	8007c3c <UART_SetConfig+0x348>
 80079a6:	2308      	movs	r3, #8
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e147      	b.n	8007c3c <UART_SetConfig+0x348>
 80079ac:	2310      	movs	r3, #16
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e144      	b.n	8007c3c <UART_SetConfig+0x348>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a83      	ldr	r2, [pc, #524]	; (8007bc4 <UART_SetConfig+0x2d0>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d132      	bne.n	8007a22 <UART_SetConfig+0x12e>
 80079bc:	4b80      	ldr	r3, [pc, #512]	; (8007bc0 <UART_SetConfig+0x2cc>)
 80079be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c2:	f003 030c 	and.w	r3, r3, #12
 80079c6:	2b0c      	cmp	r3, #12
 80079c8:	d828      	bhi.n	8007a1c <UART_SetConfig+0x128>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0xdc>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007a1d 	.word	0x08007a1d
 80079d8:	08007a1d 	.word	0x08007a1d
 80079dc:	08007a1d 	.word	0x08007a1d
 80079e0:	08007a11 	.word	0x08007a11
 80079e4:	08007a1d 	.word	0x08007a1d
 80079e8:	08007a1d 	.word	0x08007a1d
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a0b 	.word	0x08007a0b
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a1d 	.word	0x08007a1d
 8007a00:	08007a17 	.word	0x08007a17
 8007a04:	2300      	movs	r3, #0
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e118      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e115      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a10:	2304      	movs	r3, #4
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e112      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a16:	2308      	movs	r3, #8
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e10f      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e10c      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a68      	ldr	r2, [pc, #416]	; (8007bc8 <UART_SetConfig+0x2d4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d120      	bne.n	8007a6e <UART_SetConfig+0x17a>
 8007a2c:	4b64      	ldr	r3, [pc, #400]	; (8007bc0 <UART_SetConfig+0x2cc>)
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a36:	2b30      	cmp	r3, #48	; 0x30
 8007a38:	d013      	beq.n	8007a62 <UART_SetConfig+0x16e>
 8007a3a:	2b30      	cmp	r3, #48	; 0x30
 8007a3c:	d814      	bhi.n	8007a68 <UART_SetConfig+0x174>
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d009      	beq.n	8007a56 <UART_SetConfig+0x162>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	d810      	bhi.n	8007a68 <UART_SetConfig+0x174>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <UART_SetConfig+0x15c>
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d006      	beq.n	8007a5c <UART_SetConfig+0x168>
 8007a4e:	e00b      	b.n	8007a68 <UART_SetConfig+0x174>
 8007a50:	2300      	movs	r3, #0
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e0f2      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a56:	2302      	movs	r3, #2
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e0ef      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e0ec      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a62:	2308      	movs	r3, #8
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e0e9      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e0e6      	b.n	8007c3c <UART_SetConfig+0x348>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a56      	ldr	r2, [pc, #344]	; (8007bcc <UART_SetConfig+0x2d8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d120      	bne.n	8007aba <UART_SetConfig+0x1c6>
 8007a78:	4b51      	ldr	r3, [pc, #324]	; (8007bc0 <UART_SetConfig+0x2cc>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a82:	2bc0      	cmp	r3, #192	; 0xc0
 8007a84:	d013      	beq.n	8007aae <UART_SetConfig+0x1ba>
 8007a86:	2bc0      	cmp	r3, #192	; 0xc0
 8007a88:	d814      	bhi.n	8007ab4 <UART_SetConfig+0x1c0>
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d009      	beq.n	8007aa2 <UART_SetConfig+0x1ae>
 8007a8e:	2b80      	cmp	r3, #128	; 0x80
 8007a90:	d810      	bhi.n	8007ab4 <UART_SetConfig+0x1c0>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <UART_SetConfig+0x1a8>
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d006      	beq.n	8007aa8 <UART_SetConfig+0x1b4>
 8007a9a:	e00b      	b.n	8007ab4 <UART_SetConfig+0x1c0>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e0cc      	b.n	8007c3c <UART_SetConfig+0x348>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	77fb      	strb	r3, [r7, #31]
 8007aa6:	e0c9      	b.n	8007c3c <UART_SetConfig+0x348>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e0c6      	b.n	8007c3c <UART_SetConfig+0x348>
 8007aae:	2308      	movs	r3, #8
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e0c3      	b.n	8007c3c <UART_SetConfig+0x348>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e0c0      	b.n	8007c3c <UART_SetConfig+0x348>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a44      	ldr	r2, [pc, #272]	; (8007bd0 <UART_SetConfig+0x2dc>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d125      	bne.n	8007b10 <UART_SetConfig+0x21c>
 8007ac4:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <UART_SetConfig+0x2cc>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad2:	d017      	beq.n	8007b04 <UART_SetConfig+0x210>
 8007ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad8:	d817      	bhi.n	8007b0a <UART_SetConfig+0x216>
 8007ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ade:	d00b      	beq.n	8007af8 <UART_SetConfig+0x204>
 8007ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae4:	d811      	bhi.n	8007b0a <UART_SetConfig+0x216>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <UART_SetConfig+0x1fe>
 8007aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aee:	d006      	beq.n	8007afe <UART_SetConfig+0x20a>
 8007af0:	e00b      	b.n	8007b0a <UART_SetConfig+0x216>
 8007af2:	2300      	movs	r3, #0
 8007af4:	77fb      	strb	r3, [r7, #31]
 8007af6:	e0a1      	b.n	8007c3c <UART_SetConfig+0x348>
 8007af8:	2302      	movs	r3, #2
 8007afa:	77fb      	strb	r3, [r7, #31]
 8007afc:	e09e      	b.n	8007c3c <UART_SetConfig+0x348>
 8007afe:	2304      	movs	r3, #4
 8007b00:	77fb      	strb	r3, [r7, #31]
 8007b02:	e09b      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b04:	2308      	movs	r3, #8
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e098      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e095      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a2f      	ldr	r2, [pc, #188]	; (8007bd4 <UART_SetConfig+0x2e0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d125      	bne.n	8007b66 <UART_SetConfig+0x272>
 8007b1a:	4b29      	ldr	r3, [pc, #164]	; (8007bc0 <UART_SetConfig+0x2cc>)
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b28:	d017      	beq.n	8007b5a <UART_SetConfig+0x266>
 8007b2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b2e:	d817      	bhi.n	8007b60 <UART_SetConfig+0x26c>
 8007b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b34:	d00b      	beq.n	8007b4e <UART_SetConfig+0x25a>
 8007b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3a:	d811      	bhi.n	8007b60 <UART_SetConfig+0x26c>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <UART_SetConfig+0x254>
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b44:	d006      	beq.n	8007b54 <UART_SetConfig+0x260>
 8007b46:	e00b      	b.n	8007b60 <UART_SetConfig+0x26c>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e076      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e073      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b54:	2304      	movs	r3, #4
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e070      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	77fb      	strb	r3, [r7, #31]
 8007b5e:	e06d      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b60:	2310      	movs	r3, #16
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e06a      	b.n	8007c3c <UART_SetConfig+0x348>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <UART_SetConfig+0x2e4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d138      	bne.n	8007be2 <UART_SetConfig+0x2ee>
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <UART_SetConfig+0x2cc>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b7e:	d017      	beq.n	8007bb0 <UART_SetConfig+0x2bc>
 8007b80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b84:	d82a      	bhi.n	8007bdc <UART_SetConfig+0x2e8>
 8007b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8a:	d00b      	beq.n	8007ba4 <UART_SetConfig+0x2b0>
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b90:	d824      	bhi.n	8007bdc <UART_SetConfig+0x2e8>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <UART_SetConfig+0x2aa>
 8007b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9a:	d006      	beq.n	8007baa <UART_SetConfig+0x2b6>
 8007b9c:	e01e      	b.n	8007bdc <UART_SetConfig+0x2e8>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	77fb      	strb	r3, [r7, #31]
 8007ba2:	e04b      	b.n	8007c3c <UART_SetConfig+0x348>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e048      	b.n	8007c3c <UART_SetConfig+0x348>
 8007baa:	2304      	movs	r3, #4
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e045      	b.n	8007c3c <UART_SetConfig+0x348>
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e042      	b.n	8007c3c <UART_SetConfig+0x348>
 8007bb6:	bf00      	nop
 8007bb8:	efff69f3 	.word	0xefff69f3
 8007bbc:	40011000 	.word	0x40011000
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	40004400 	.word	0x40004400
 8007bc8:	40004800 	.word	0x40004800
 8007bcc:	40004c00 	.word	0x40004c00
 8007bd0:	40005000 	.word	0x40005000
 8007bd4:	40011400 	.word	0x40011400
 8007bd8:	40007800 	.word	0x40007800
 8007bdc:	2310      	movs	r3, #16
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e02c      	b.n	8007c3c <UART_SetConfig+0x348>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a72      	ldr	r2, [pc, #456]	; (8007db0 <UART_SetConfig+0x4bc>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d125      	bne.n	8007c38 <UART_SetConfig+0x344>
 8007bec:	4b71      	ldr	r3, [pc, #452]	; (8007db4 <UART_SetConfig+0x4c0>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bf6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bfa:	d017      	beq.n	8007c2c <UART_SetConfig+0x338>
 8007bfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c00:	d817      	bhi.n	8007c32 <UART_SetConfig+0x33e>
 8007c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c06:	d00b      	beq.n	8007c20 <UART_SetConfig+0x32c>
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c0c:	d811      	bhi.n	8007c32 <UART_SetConfig+0x33e>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <UART_SetConfig+0x326>
 8007c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c16:	d006      	beq.n	8007c26 <UART_SetConfig+0x332>
 8007c18:	e00b      	b.n	8007c32 <UART_SetConfig+0x33e>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	77fb      	strb	r3, [r7, #31]
 8007c1e:	e00d      	b.n	8007c3c <UART_SetConfig+0x348>
 8007c20:	2302      	movs	r3, #2
 8007c22:	77fb      	strb	r3, [r7, #31]
 8007c24:	e00a      	b.n	8007c3c <UART_SetConfig+0x348>
 8007c26:	2304      	movs	r3, #4
 8007c28:	77fb      	strb	r3, [r7, #31]
 8007c2a:	e007      	b.n	8007c3c <UART_SetConfig+0x348>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	77fb      	strb	r3, [r7, #31]
 8007c30:	e004      	b.n	8007c3c <UART_SetConfig+0x348>
 8007c32:	2310      	movs	r3, #16
 8007c34:	77fb      	strb	r3, [r7, #31]
 8007c36:	e001      	b.n	8007c3c <UART_SetConfig+0x348>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	d15b      	bne.n	8007cfe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007c46:	7ffb      	ldrb	r3, [r7, #31]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d828      	bhi.n	8007c9e <UART_SetConfig+0x3aa>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <UART_SetConfig+0x360>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007c81 	.word	0x08007c81
 8007c5c:	08007c89 	.word	0x08007c89
 8007c60:	08007c9f 	.word	0x08007c9f
 8007c64:	08007c8f 	.word	0x08007c8f
 8007c68:	08007c9f 	.word	0x08007c9f
 8007c6c:	08007c9f 	.word	0x08007c9f
 8007c70:	08007c9f 	.word	0x08007c9f
 8007c74:	08007c97 	.word	0x08007c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c78:	f7fd f946 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 8007c7c:	61b8      	str	r0, [r7, #24]
        break;
 8007c7e:	e013      	b.n	8007ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c80:	f7fd f956 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
 8007c84:	61b8      	str	r0, [r7, #24]
        break;
 8007c86:	e00f      	b.n	8007ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c88:	4b4b      	ldr	r3, [pc, #300]	; (8007db8 <UART_SetConfig+0x4c4>)
 8007c8a:	61bb      	str	r3, [r7, #24]
        break;
 8007c8c:	e00c      	b.n	8007ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8e:	f7fd f829 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8007c92:	61b8      	str	r0, [r7, #24]
        break;
 8007c94:	e008      	b.n	8007ca8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c9a:	61bb      	str	r3, [r7, #24]
        break;
 8007c9c:	e004      	b.n	8007ca8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d074      	beq.n	8007d98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	005a      	lsls	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	441a      	add	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b0f      	cmp	r3, #15
 8007cc8:	d916      	bls.n	8007cf8 <UART_SetConfig+0x404>
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd0:	d212      	bcs.n	8007cf8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f023 030f 	bic.w	r3, r3, #15
 8007cda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	89fb      	ldrh	r3, [r7, #14]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	89fa      	ldrh	r2, [r7, #14]
 8007cf4:	60da      	str	r2, [r3, #12]
 8007cf6:	e04f      	b.n	8007d98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	77bb      	strb	r3, [r7, #30]
 8007cfc:	e04c      	b.n	8007d98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cfe:	7ffb      	ldrb	r3, [r7, #31]
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d828      	bhi.n	8007d56 <UART_SetConfig+0x462>
 8007d04:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <UART_SetConfig+0x418>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d41 	.word	0x08007d41
 8007d18:	08007d57 	.word	0x08007d57
 8007d1c:	08007d47 	.word	0x08007d47
 8007d20:	08007d57 	.word	0x08007d57
 8007d24:	08007d57 	.word	0x08007d57
 8007d28:	08007d57 	.word	0x08007d57
 8007d2c:	08007d4f 	.word	0x08007d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d30:	f7fd f8ea 	bl	8004f08 <HAL_RCC_GetPCLK1Freq>
 8007d34:	61b8      	str	r0, [r7, #24]
        break;
 8007d36:	e013      	b.n	8007d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d38:	f7fd f8fa 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
 8007d3c:	61b8      	str	r0, [r7, #24]
        break;
 8007d3e:	e00f      	b.n	8007d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d40:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <UART_SetConfig+0x4c4>)
 8007d42:	61bb      	str	r3, [r7, #24]
        break;
 8007d44:	e00c      	b.n	8007d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d46:	f7fc ffcd 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8007d4a:	61b8      	str	r0, [r7, #24]
        break;
 8007d4c:	e008      	b.n	8007d60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d52:	61bb      	str	r3, [r7, #24]
        break;
 8007d54:	e004      	b.n	8007d60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d5e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d018      	beq.n	8007d98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	085a      	lsrs	r2, r3, #1
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	441a      	add	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b0f      	cmp	r3, #15
 8007d7e:	d909      	bls.n	8007d94 <UART_SetConfig+0x4a0>
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d86:	d205      	bcs.n	8007d94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	e001      	b.n	8007d98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007da4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40007c00 	.word	0x40007c00
 8007db4:	40023800 	.word	0x40023800
 8007db8:	00f42400 	.word	0x00f42400

08007dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eba:	d10a      	bne.n	8007ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f10:	f7fa ff4a 	bl	8002da8 <HAL_GetTick>
 8007f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d10e      	bne.n	8007f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f831 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e027      	b.n	8007f92 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d10e      	bne.n	8007f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f81b 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e011      	b.n	8007f92 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b09c      	sub	sp, #112	; 0x70
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007faa:	e0a7      	b.n	80080fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb2:	f000 80a3 	beq.w	80080fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb6:	f7fa fef7 	bl	8002da8 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d302      	bcc.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x32>
 8007fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d13f      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ff0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	663b      	str	r3, [r7, #96]	; 0x60
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800801e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008020:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800802c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e068      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d050      	beq.n	80080fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008068:	d148      	bne.n	80080fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008072:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e6      	bne.n	8008074 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	613b      	str	r3, [r7, #16]
   return(result);
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f023 0301 	bic.w	r3, r3, #1
 80080bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080c6:	623a      	str	r2, [r7, #32]
 80080c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	69f9      	ldr	r1, [r7, #28]
 80080cc:	6a3a      	ldr	r2, [r7, #32]
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e5      	bne.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e010      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69da      	ldr	r2, [r3, #28]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4013      	ands	r3, r2
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	bf0c      	ite	eq
 800810c:	2301      	moveq	r3, #1
 800810e:	2300      	movne	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	429a      	cmp	r2, r3
 8008118:	f43f af48 	beq.w	8007fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3770      	adds	r7, #112	; 0x70
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <__cvt>:
 8008126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008128:	ed2d 8b02 	vpush	{d8}
 800812c:	eeb0 8b40 	vmov.f64	d8, d0
 8008130:	b085      	sub	sp, #20
 8008132:	4617      	mov	r7, r2
 8008134:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008136:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008138:	ee18 2a90 	vmov	r2, s17
 800813c:	f025 0520 	bic.w	r5, r5, #32
 8008140:	2a00      	cmp	r2, #0
 8008142:	bfb6      	itet	lt
 8008144:	222d      	movlt	r2, #45	; 0x2d
 8008146:	2200      	movge	r2, #0
 8008148:	eeb1 8b40 	vneglt.f64	d8, d0
 800814c:	2d46      	cmp	r5, #70	; 0x46
 800814e:	460c      	mov	r4, r1
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	d004      	beq.n	800815e <__cvt+0x38>
 8008154:	2d45      	cmp	r5, #69	; 0x45
 8008156:	d100      	bne.n	800815a <__cvt+0x34>
 8008158:	3401      	adds	r4, #1
 800815a:	2102      	movs	r1, #2
 800815c:	e000      	b.n	8008160 <__cvt+0x3a>
 800815e:	2103      	movs	r1, #3
 8008160:	ab03      	add	r3, sp, #12
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	ab02      	add	r3, sp, #8
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4622      	mov	r2, r4
 800816a:	4633      	mov	r3, r6
 800816c:	eeb0 0b48 	vmov.f64	d0, d8
 8008170:	f000 ff32 	bl	8008fd8 <_dtoa_r>
 8008174:	2d47      	cmp	r5, #71	; 0x47
 8008176:	d101      	bne.n	800817c <__cvt+0x56>
 8008178:	07fb      	lsls	r3, r7, #31
 800817a:	d51a      	bpl.n	80081b2 <__cvt+0x8c>
 800817c:	2d46      	cmp	r5, #70	; 0x46
 800817e:	eb00 0204 	add.w	r2, r0, r4
 8008182:	d10c      	bne.n	800819e <__cvt+0x78>
 8008184:	7803      	ldrb	r3, [r0, #0]
 8008186:	2b30      	cmp	r3, #48	; 0x30
 8008188:	d107      	bne.n	800819a <__cvt+0x74>
 800818a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800818e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008192:	bf1c      	itt	ne
 8008194:	f1c4 0401 	rsbne	r4, r4, #1
 8008198:	6034      	strne	r4, [r6, #0]
 800819a:	6833      	ldr	r3, [r6, #0]
 800819c:	441a      	add	r2, r3
 800819e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80081a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a6:	bf08      	it	eq
 80081a8:	9203      	streq	r2, [sp, #12]
 80081aa:	2130      	movs	r1, #48	; 0x30
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d307      	bcc.n	80081c2 <__cvt+0x9c>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081b6:	1a1b      	subs	r3, r3, r0
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	b005      	add	sp, #20
 80081bc:	ecbd 8b02 	vpop	{d8}
 80081c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c2:	1c5c      	adds	r4, r3, #1
 80081c4:	9403      	str	r4, [sp, #12]
 80081c6:	7019      	strb	r1, [r3, #0]
 80081c8:	e7f0      	b.n	80081ac <__cvt+0x86>

080081ca <__exponent>:
 80081ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081cc:	4603      	mov	r3, r0
 80081ce:	2900      	cmp	r1, #0
 80081d0:	bfb8      	it	lt
 80081d2:	4249      	neglt	r1, r1
 80081d4:	f803 2b02 	strb.w	r2, [r3], #2
 80081d8:	bfb4      	ite	lt
 80081da:	222d      	movlt	r2, #45	; 0x2d
 80081dc:	222b      	movge	r2, #43	; 0x2b
 80081de:	2909      	cmp	r1, #9
 80081e0:	7042      	strb	r2, [r0, #1]
 80081e2:	dd2a      	ble.n	800823a <__exponent+0x70>
 80081e4:	f10d 0207 	add.w	r2, sp, #7
 80081e8:	4617      	mov	r7, r2
 80081ea:	260a      	movs	r6, #10
 80081ec:	4694      	mov	ip, r2
 80081ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80081f2:	fb06 1415 	mls	r4, r6, r5, r1
 80081f6:	3430      	adds	r4, #48	; 0x30
 80081f8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80081fc:	460c      	mov	r4, r1
 80081fe:	2c63      	cmp	r4, #99	; 0x63
 8008200:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008204:	4629      	mov	r1, r5
 8008206:	dcf1      	bgt.n	80081ec <__exponent+0x22>
 8008208:	3130      	adds	r1, #48	; 0x30
 800820a:	f1ac 0402 	sub.w	r4, ip, #2
 800820e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008212:	1c41      	adds	r1, r0, #1
 8008214:	4622      	mov	r2, r4
 8008216:	42ba      	cmp	r2, r7
 8008218:	d30a      	bcc.n	8008230 <__exponent+0x66>
 800821a:	f10d 0209 	add.w	r2, sp, #9
 800821e:	eba2 020c 	sub.w	r2, r2, ip
 8008222:	42bc      	cmp	r4, r7
 8008224:	bf88      	it	hi
 8008226:	2200      	movhi	r2, #0
 8008228:	4413      	add	r3, r2
 800822a:	1a18      	subs	r0, r3, r0
 800822c:	b003      	add	sp, #12
 800822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008230:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008234:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008238:	e7ed      	b.n	8008216 <__exponent+0x4c>
 800823a:	2330      	movs	r3, #48	; 0x30
 800823c:	3130      	adds	r1, #48	; 0x30
 800823e:	7083      	strb	r3, [r0, #2]
 8008240:	70c1      	strb	r1, [r0, #3]
 8008242:	1d03      	adds	r3, r0, #4
 8008244:	e7f1      	b.n	800822a <__exponent+0x60>
	...

08008248 <_printf_float>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	b08b      	sub	sp, #44	; 0x2c
 800824e:	460c      	mov	r4, r1
 8008250:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008254:	4616      	mov	r6, r2
 8008256:	461f      	mov	r7, r3
 8008258:	4605      	mov	r5, r0
 800825a:	f000 fdaf 	bl	8008dbc <_localeconv_r>
 800825e:	f8d0 b000 	ldr.w	fp, [r0]
 8008262:	4658      	mov	r0, fp
 8008264:	f7f8 f83c 	bl	80002e0 <strlen>
 8008268:	2300      	movs	r3, #0
 800826a:	9308      	str	r3, [sp, #32]
 800826c:	f8d8 3000 	ldr.w	r3, [r8]
 8008270:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008274:	6822      	ldr	r2, [r4, #0]
 8008276:	3307      	adds	r3, #7
 8008278:	f023 0307 	bic.w	r3, r3, #7
 800827c:	f103 0108 	add.w	r1, r3, #8
 8008280:	f8c8 1000 	str.w	r1, [r8]
 8008284:	ed93 0b00 	vldr	d0, [r3]
 8008288:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80084e8 <_printf_float+0x2a0>
 800828c:	eeb0 7bc0 	vabs.f64	d7, d0
 8008290:	eeb4 7b46 	vcmp.f64	d7, d6
 8008294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008298:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800829c:	4682      	mov	sl, r0
 800829e:	dd24      	ble.n	80082ea <_printf_float+0xa2>
 80082a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80082a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a8:	d502      	bpl.n	80082b0 <_printf_float+0x68>
 80082aa:	232d      	movs	r3, #45	; 0x2d
 80082ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b0:	498f      	ldr	r1, [pc, #572]	; (80084f0 <_printf_float+0x2a8>)
 80082b2:	4b90      	ldr	r3, [pc, #576]	; (80084f4 <_printf_float+0x2ac>)
 80082b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80082b8:	bf94      	ite	ls
 80082ba:	4688      	movls	r8, r1
 80082bc:	4698      	movhi	r8, r3
 80082be:	2303      	movs	r3, #3
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	f022 0204 	bic.w	r2, r2, #4
 80082c6:	2300      	movs	r3, #0
 80082c8:	6022      	str	r2, [r4, #0]
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	9700      	str	r7, [sp, #0]
 80082ce:	4633      	mov	r3, r6
 80082d0:	aa09      	add	r2, sp, #36	; 0x24
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 f9d1 	bl	800867c <_printf_common>
 80082da:	3001      	adds	r0, #1
 80082dc:	f040 808a 	bne.w	80083f4 <_printf_float+0x1ac>
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e4:	b00b      	add	sp, #44	; 0x2c
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80082ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f2:	d709      	bvc.n	8008308 <_printf_float+0xc0>
 80082f4:	ee10 3a90 	vmov	r3, s1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfbc      	itt	lt
 80082fc:	232d      	movlt	r3, #45	; 0x2d
 80082fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008302:	497d      	ldr	r1, [pc, #500]	; (80084f8 <_printf_float+0x2b0>)
 8008304:	4b7d      	ldr	r3, [pc, #500]	; (80084fc <_printf_float+0x2b4>)
 8008306:	e7d5      	b.n	80082b4 <_printf_float+0x6c>
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800830e:	9104      	str	r1, [sp, #16]
 8008310:	1c59      	adds	r1, r3, #1
 8008312:	d13c      	bne.n	800838e <_printf_float+0x146>
 8008314:	2306      	movs	r3, #6
 8008316:	6063      	str	r3, [r4, #4]
 8008318:	2300      	movs	r3, #0
 800831a:	9303      	str	r3, [sp, #12]
 800831c:	ab08      	add	r3, sp, #32
 800831e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008326:	ab07      	add	r3, sp, #28
 8008328:	6861      	ldr	r1, [r4, #4]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	6022      	str	r2, [r4, #0]
 800832e:	f10d 031b 	add.w	r3, sp, #27
 8008332:	4628      	mov	r0, r5
 8008334:	f7ff fef7 	bl	8008126 <__cvt>
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	9907      	ldr	r1, [sp, #28]
 800833c:	2b47      	cmp	r3, #71	; 0x47
 800833e:	4680      	mov	r8, r0
 8008340:	d108      	bne.n	8008354 <_printf_float+0x10c>
 8008342:	1cc8      	adds	r0, r1, #3
 8008344:	db02      	blt.n	800834c <_printf_float+0x104>
 8008346:	6863      	ldr	r3, [r4, #4]
 8008348:	4299      	cmp	r1, r3
 800834a:	dd41      	ble.n	80083d0 <_printf_float+0x188>
 800834c:	f1a9 0902 	sub.w	r9, r9, #2
 8008350:	fa5f f989 	uxtb.w	r9, r9
 8008354:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008358:	d820      	bhi.n	800839c <_printf_float+0x154>
 800835a:	3901      	subs	r1, #1
 800835c:	464a      	mov	r2, r9
 800835e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008362:	9107      	str	r1, [sp, #28]
 8008364:	f7ff ff31 	bl	80081ca <__exponent>
 8008368:	9a08      	ldr	r2, [sp, #32]
 800836a:	9004      	str	r0, [sp, #16]
 800836c:	1813      	adds	r3, r2, r0
 800836e:	2a01      	cmp	r2, #1
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	dc02      	bgt.n	800837a <_printf_float+0x132>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	07d2      	lsls	r2, r2, #31
 8008378:	d501      	bpl.n	800837e <_printf_float+0x136>
 800837a:	3301      	adds	r3, #1
 800837c:	6123      	str	r3, [r4, #16]
 800837e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0a2      	beq.n	80082cc <_printf_float+0x84>
 8008386:	232d      	movs	r3, #45	; 0x2d
 8008388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800838c:	e79e      	b.n	80082cc <_printf_float+0x84>
 800838e:	9904      	ldr	r1, [sp, #16]
 8008390:	2947      	cmp	r1, #71	; 0x47
 8008392:	d1c1      	bne.n	8008318 <_printf_float+0xd0>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1bf      	bne.n	8008318 <_printf_float+0xd0>
 8008398:	2301      	movs	r3, #1
 800839a:	e7bc      	b.n	8008316 <_printf_float+0xce>
 800839c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80083a0:	d118      	bne.n	80083d4 <_printf_float+0x18c>
 80083a2:	2900      	cmp	r1, #0
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	dd0b      	ble.n	80083c0 <_printf_float+0x178>
 80083a8:	6121      	str	r1, [r4, #16]
 80083aa:	b913      	cbnz	r3, 80083b2 <_printf_float+0x16a>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	07d0      	lsls	r0, r2, #31
 80083b0:	d502      	bpl.n	80083b8 <_printf_float+0x170>
 80083b2:	3301      	adds	r3, #1
 80083b4:	440b      	add	r3, r1
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	2300      	movs	r3, #0
 80083ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	e7de      	b.n	800837e <_printf_float+0x136>
 80083c0:	b913      	cbnz	r3, 80083c8 <_printf_float+0x180>
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	07d2      	lsls	r2, r2, #31
 80083c6:	d501      	bpl.n	80083cc <_printf_float+0x184>
 80083c8:	3302      	adds	r3, #2
 80083ca:	e7f4      	b.n	80083b6 <_printf_float+0x16e>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e7f2      	b.n	80083b6 <_printf_float+0x16e>
 80083d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80083d4:	9b08      	ldr	r3, [sp, #32]
 80083d6:	4299      	cmp	r1, r3
 80083d8:	db05      	blt.n	80083e6 <_printf_float+0x19e>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	6121      	str	r1, [r4, #16]
 80083de:	07d8      	lsls	r0, r3, #31
 80083e0:	d5ea      	bpl.n	80083b8 <_printf_float+0x170>
 80083e2:	1c4b      	adds	r3, r1, #1
 80083e4:	e7e7      	b.n	80083b6 <_printf_float+0x16e>
 80083e6:	2900      	cmp	r1, #0
 80083e8:	bfd4      	ite	le
 80083ea:	f1c1 0202 	rsble	r2, r1, #2
 80083ee:	2201      	movgt	r2, #1
 80083f0:	4413      	add	r3, r2
 80083f2:	e7e0      	b.n	80083b6 <_printf_float+0x16e>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	055a      	lsls	r2, r3, #21
 80083f8:	d407      	bmi.n	800840a <_printf_float+0x1c2>
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	4642      	mov	r2, r8
 80083fe:	4631      	mov	r1, r6
 8008400:	4628      	mov	r0, r5
 8008402:	47b8      	blx	r7
 8008404:	3001      	adds	r0, #1
 8008406:	d12a      	bne.n	800845e <_printf_float+0x216>
 8008408:	e76a      	b.n	80082e0 <_printf_float+0x98>
 800840a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800840e:	f240 80e0 	bls.w	80085d2 <_printf_float+0x38a>
 8008412:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008416:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841e:	d133      	bne.n	8008488 <_printf_float+0x240>
 8008420:	4a37      	ldr	r2, [pc, #220]	; (8008500 <_printf_float+0x2b8>)
 8008422:	2301      	movs	r3, #1
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	47b8      	blx	r7
 800842a:	3001      	adds	r0, #1
 800842c:	f43f af58 	beq.w	80082e0 <_printf_float+0x98>
 8008430:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008434:	429a      	cmp	r2, r3
 8008436:	db02      	blt.n	800843e <_printf_float+0x1f6>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07d8      	lsls	r0, r3, #31
 800843c:	d50f      	bpl.n	800845e <_printf_float+0x216>
 800843e:	4653      	mov	r3, sl
 8008440:	465a      	mov	r2, fp
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	f43f af49 	beq.w	80082e0 <_printf_float+0x98>
 800844e:	f04f 0800 	mov.w	r8, #0
 8008452:	f104 091a 	add.w	r9, r4, #26
 8008456:	9b08      	ldr	r3, [sp, #32]
 8008458:	3b01      	subs	r3, #1
 800845a:	4543      	cmp	r3, r8
 800845c:	dc09      	bgt.n	8008472 <_printf_float+0x22a>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	079b      	lsls	r3, r3, #30
 8008462:	f100 8106 	bmi.w	8008672 <_printf_float+0x42a>
 8008466:	68e0      	ldr	r0, [r4, #12]
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	4298      	cmp	r0, r3
 800846c:	bfb8      	it	lt
 800846e:	4618      	movlt	r0, r3
 8008470:	e738      	b.n	80082e4 <_printf_float+0x9c>
 8008472:	2301      	movs	r3, #1
 8008474:	464a      	mov	r2, r9
 8008476:	4631      	mov	r1, r6
 8008478:	4628      	mov	r0, r5
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	f43f af2f 	beq.w	80082e0 <_printf_float+0x98>
 8008482:	f108 0801 	add.w	r8, r8, #1
 8008486:	e7e6      	b.n	8008456 <_printf_float+0x20e>
 8008488:	9b07      	ldr	r3, [sp, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	dc3a      	bgt.n	8008504 <_printf_float+0x2bc>
 800848e:	4a1c      	ldr	r2, [pc, #112]	; (8008500 <_printf_float+0x2b8>)
 8008490:	2301      	movs	r3, #1
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f af21 	beq.w	80082e0 <_printf_float+0x98>
 800849e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	d102      	bne.n	80084ac <_printf_float+0x264>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	07d9      	lsls	r1, r3, #31
 80084aa:	d5d8      	bpl.n	800845e <_printf_float+0x216>
 80084ac:	4653      	mov	r3, sl
 80084ae:	465a      	mov	r2, fp
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f af12 	beq.w	80082e0 <_printf_float+0x98>
 80084bc:	f04f 0900 	mov.w	r9, #0
 80084c0:	f104 0a1a 	add.w	sl, r4, #26
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	425b      	negs	r3, r3
 80084c8:	454b      	cmp	r3, r9
 80084ca:	dc01      	bgt.n	80084d0 <_printf_float+0x288>
 80084cc:	9b08      	ldr	r3, [sp, #32]
 80084ce:	e795      	b.n	80083fc <_printf_float+0x1b4>
 80084d0:	2301      	movs	r3, #1
 80084d2:	4652      	mov	r2, sl
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f af00 	beq.w	80082e0 <_printf_float+0x98>
 80084e0:	f109 0901 	add.w	r9, r9, #1
 80084e4:	e7ee      	b.n	80084c4 <_printf_float+0x27c>
 80084e6:	bf00      	nop
 80084e8:	ffffffff 	.word	0xffffffff
 80084ec:	7fefffff 	.word	0x7fefffff
 80084f0:	0800aa94 	.word	0x0800aa94
 80084f4:	0800aa98 	.word	0x0800aa98
 80084f8:	0800aa9c 	.word	0x0800aa9c
 80084fc:	0800aaa0 	.word	0x0800aaa0
 8008500:	0800aaa4 	.word	0x0800aaa4
 8008504:	9a08      	ldr	r2, [sp, #32]
 8008506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008508:	429a      	cmp	r2, r3
 800850a:	bfa8      	it	ge
 800850c:	461a      	movge	r2, r3
 800850e:	2a00      	cmp	r2, #0
 8008510:	4691      	mov	r9, r2
 8008512:	dc38      	bgt.n	8008586 <_printf_float+0x33e>
 8008514:	2300      	movs	r3, #0
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800851c:	f104 021a 	add.w	r2, r4, #26
 8008520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008522:	9905      	ldr	r1, [sp, #20]
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	eba3 0309 	sub.w	r3, r3, r9
 800852a:	428b      	cmp	r3, r1
 800852c:	dc33      	bgt.n	8008596 <_printf_float+0x34e>
 800852e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008532:	429a      	cmp	r2, r3
 8008534:	db3c      	blt.n	80085b0 <_printf_float+0x368>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	07da      	lsls	r2, r3, #31
 800853a:	d439      	bmi.n	80085b0 <_printf_float+0x368>
 800853c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008540:	eba2 0903 	sub.w	r9, r2, r3
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	4591      	cmp	r9, r2
 800854a:	bfa8      	it	ge
 800854c:	4691      	movge	r9, r2
 800854e:	f1b9 0f00 	cmp.w	r9, #0
 8008552:	dc35      	bgt.n	80085c0 <_printf_float+0x378>
 8008554:	f04f 0800 	mov.w	r8, #0
 8008558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800855c:	f104 0a1a 	add.w	sl, r4, #26
 8008560:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	eba3 0309 	sub.w	r3, r3, r9
 800856a:	4543      	cmp	r3, r8
 800856c:	f77f af77 	ble.w	800845e <_printf_float+0x216>
 8008570:	2301      	movs	r3, #1
 8008572:	4652      	mov	r2, sl
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	f43f aeb0 	beq.w	80082e0 <_printf_float+0x98>
 8008580:	f108 0801 	add.w	r8, r8, #1
 8008584:	e7ec      	b.n	8008560 <_printf_float+0x318>
 8008586:	4613      	mov	r3, r2
 8008588:	4631      	mov	r1, r6
 800858a:	4642      	mov	r2, r8
 800858c:	4628      	mov	r0, r5
 800858e:	47b8      	blx	r7
 8008590:	3001      	adds	r0, #1
 8008592:	d1bf      	bne.n	8008514 <_printf_float+0x2cc>
 8008594:	e6a4      	b.n	80082e0 <_printf_float+0x98>
 8008596:	2301      	movs	r3, #1
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	9204      	str	r2, [sp, #16]
 800859e:	47b8      	blx	r7
 80085a0:	3001      	adds	r0, #1
 80085a2:	f43f ae9d 	beq.w	80082e0 <_printf_float+0x98>
 80085a6:	9b05      	ldr	r3, [sp, #20]
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	3301      	adds	r3, #1
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	e7b7      	b.n	8008520 <_printf_float+0x2d8>
 80085b0:	4653      	mov	r3, sl
 80085b2:	465a      	mov	r2, fp
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	d1be      	bne.n	800853c <_printf_float+0x2f4>
 80085be:	e68f      	b.n	80082e0 <_printf_float+0x98>
 80085c0:	9a04      	ldr	r2, [sp, #16]
 80085c2:	464b      	mov	r3, r9
 80085c4:	4442      	add	r2, r8
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	d1c1      	bne.n	8008554 <_printf_float+0x30c>
 80085d0:	e686      	b.n	80082e0 <_printf_float+0x98>
 80085d2:	9a08      	ldr	r2, [sp, #32]
 80085d4:	2a01      	cmp	r2, #1
 80085d6:	dc01      	bgt.n	80085dc <_printf_float+0x394>
 80085d8:	07db      	lsls	r3, r3, #31
 80085da:	d537      	bpl.n	800864c <_printf_float+0x404>
 80085dc:	2301      	movs	r3, #1
 80085de:	4642      	mov	r2, r8
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f ae7a 	beq.w	80082e0 <_printf_float+0x98>
 80085ec:	4653      	mov	r3, sl
 80085ee:	465a      	mov	r2, fp
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f ae72 	beq.w	80082e0 <_printf_float+0x98>
 80085fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008600:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008608:	9b08      	ldr	r3, [sp, #32]
 800860a:	d01a      	beq.n	8008642 <_printf_float+0x3fa>
 800860c:	3b01      	subs	r3, #1
 800860e:	f108 0201 	add.w	r2, r8, #1
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	47b8      	blx	r7
 8008618:	3001      	adds	r0, #1
 800861a:	d10e      	bne.n	800863a <_printf_float+0x3f2>
 800861c:	e660      	b.n	80082e0 <_printf_float+0x98>
 800861e:	2301      	movs	r3, #1
 8008620:	464a      	mov	r2, r9
 8008622:	4631      	mov	r1, r6
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	f43f ae59 	beq.w	80082e0 <_printf_float+0x98>
 800862e:	f108 0801 	add.w	r8, r8, #1
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	3b01      	subs	r3, #1
 8008636:	4543      	cmp	r3, r8
 8008638:	dcf1      	bgt.n	800861e <_printf_float+0x3d6>
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008640:	e6dd      	b.n	80083fe <_printf_float+0x1b6>
 8008642:	f04f 0800 	mov.w	r8, #0
 8008646:	f104 091a 	add.w	r9, r4, #26
 800864a:	e7f2      	b.n	8008632 <_printf_float+0x3ea>
 800864c:	2301      	movs	r3, #1
 800864e:	4642      	mov	r2, r8
 8008650:	e7df      	b.n	8008612 <_printf_float+0x3ca>
 8008652:	2301      	movs	r3, #1
 8008654:	464a      	mov	r2, r9
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	f43f ae3f 	beq.w	80082e0 <_printf_float+0x98>
 8008662:	f108 0801 	add.w	r8, r8, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	4543      	cmp	r3, r8
 800866e:	dcf0      	bgt.n	8008652 <_printf_float+0x40a>
 8008670:	e6f9      	b.n	8008466 <_printf_float+0x21e>
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	f104 0919 	add.w	r9, r4, #25
 800867a:	e7f4      	b.n	8008666 <_printf_float+0x41e>

0800867c <_printf_common>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	4616      	mov	r6, r2
 8008682:	4699      	mov	r9, r3
 8008684:	688a      	ldr	r2, [r1, #8]
 8008686:	690b      	ldr	r3, [r1, #16]
 8008688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800868c:	4293      	cmp	r3, r2
 800868e:	bfb8      	it	lt
 8008690:	4613      	movlt	r3, r2
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008698:	4607      	mov	r7, r0
 800869a:	460c      	mov	r4, r1
 800869c:	b10a      	cbz	r2, 80086a2 <_printf_common+0x26>
 800869e:	3301      	adds	r3, #1
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	0699      	lsls	r1, r3, #26
 80086a6:	bf42      	ittt	mi
 80086a8:	6833      	ldrmi	r3, [r6, #0]
 80086aa:	3302      	addmi	r3, #2
 80086ac:	6033      	strmi	r3, [r6, #0]
 80086ae:	6825      	ldr	r5, [r4, #0]
 80086b0:	f015 0506 	ands.w	r5, r5, #6
 80086b4:	d106      	bne.n	80086c4 <_printf_common+0x48>
 80086b6:	f104 0a19 	add.w	sl, r4, #25
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	6832      	ldr	r2, [r6, #0]
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dc26      	bgt.n	8008712 <_printf_common+0x96>
 80086c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086c8:	1e13      	subs	r3, r2, #0
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	bf18      	it	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	0692      	lsls	r2, r2, #26
 80086d2:	d42b      	bmi.n	800872c <_printf_common+0xb0>
 80086d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086d8:	4649      	mov	r1, r9
 80086da:	4638      	mov	r0, r7
 80086dc:	47c0      	blx	r8
 80086de:	3001      	adds	r0, #1
 80086e0:	d01e      	beq.n	8008720 <_printf_common+0xa4>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	6922      	ldr	r2, [r4, #16]
 80086e6:	f003 0306 	and.w	r3, r3, #6
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	bf02      	ittt	eq
 80086ee:	68e5      	ldreq	r5, [r4, #12]
 80086f0:	6833      	ldreq	r3, [r6, #0]
 80086f2:	1aed      	subeq	r5, r5, r3
 80086f4:	68a3      	ldr	r3, [r4, #8]
 80086f6:	bf0c      	ite	eq
 80086f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086fc:	2500      	movne	r5, #0
 80086fe:	4293      	cmp	r3, r2
 8008700:	bfc4      	itt	gt
 8008702:	1a9b      	subgt	r3, r3, r2
 8008704:	18ed      	addgt	r5, r5, r3
 8008706:	2600      	movs	r6, #0
 8008708:	341a      	adds	r4, #26
 800870a:	42b5      	cmp	r5, r6
 800870c:	d11a      	bne.n	8008744 <_printf_common+0xc8>
 800870e:	2000      	movs	r0, #0
 8008710:	e008      	b.n	8008724 <_printf_common+0xa8>
 8008712:	2301      	movs	r3, #1
 8008714:	4652      	mov	r2, sl
 8008716:	4649      	mov	r1, r9
 8008718:	4638      	mov	r0, r7
 800871a:	47c0      	blx	r8
 800871c:	3001      	adds	r0, #1
 800871e:	d103      	bne.n	8008728 <_printf_common+0xac>
 8008720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	3501      	adds	r5, #1
 800872a:	e7c6      	b.n	80086ba <_printf_common+0x3e>
 800872c:	18e1      	adds	r1, r4, r3
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	2030      	movs	r0, #48	; 0x30
 8008732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008736:	4422      	add	r2, r4
 8008738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800873c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008740:	3302      	adds	r3, #2
 8008742:	e7c7      	b.n	80086d4 <_printf_common+0x58>
 8008744:	2301      	movs	r3, #1
 8008746:	4622      	mov	r2, r4
 8008748:	4649      	mov	r1, r9
 800874a:	4638      	mov	r0, r7
 800874c:	47c0      	blx	r8
 800874e:	3001      	adds	r0, #1
 8008750:	d0e6      	beq.n	8008720 <_printf_common+0xa4>
 8008752:	3601      	adds	r6, #1
 8008754:	e7d9      	b.n	800870a <_printf_common+0x8e>
	...

08008758 <_printf_i>:
 8008758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	7e0f      	ldrb	r7, [r1, #24]
 800875e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008760:	2f78      	cmp	r7, #120	; 0x78
 8008762:	4691      	mov	r9, r2
 8008764:	4680      	mov	r8, r0
 8008766:	460c      	mov	r4, r1
 8008768:	469a      	mov	sl, r3
 800876a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800876e:	d807      	bhi.n	8008780 <_printf_i+0x28>
 8008770:	2f62      	cmp	r7, #98	; 0x62
 8008772:	d80a      	bhi.n	800878a <_printf_i+0x32>
 8008774:	2f00      	cmp	r7, #0
 8008776:	f000 80d4 	beq.w	8008922 <_printf_i+0x1ca>
 800877a:	2f58      	cmp	r7, #88	; 0x58
 800877c:	f000 80c0 	beq.w	8008900 <_printf_i+0x1a8>
 8008780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008788:	e03a      	b.n	8008800 <_printf_i+0xa8>
 800878a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800878e:	2b15      	cmp	r3, #21
 8008790:	d8f6      	bhi.n	8008780 <_printf_i+0x28>
 8008792:	a101      	add	r1, pc, #4	; (adr r1, 8008798 <_printf_i+0x40>)
 8008794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008798:	080087f1 	.word	0x080087f1
 800879c:	08008805 	.word	0x08008805
 80087a0:	08008781 	.word	0x08008781
 80087a4:	08008781 	.word	0x08008781
 80087a8:	08008781 	.word	0x08008781
 80087ac:	08008781 	.word	0x08008781
 80087b0:	08008805 	.word	0x08008805
 80087b4:	08008781 	.word	0x08008781
 80087b8:	08008781 	.word	0x08008781
 80087bc:	08008781 	.word	0x08008781
 80087c0:	08008781 	.word	0x08008781
 80087c4:	08008909 	.word	0x08008909
 80087c8:	08008831 	.word	0x08008831
 80087cc:	080088c3 	.word	0x080088c3
 80087d0:	08008781 	.word	0x08008781
 80087d4:	08008781 	.word	0x08008781
 80087d8:	0800892b 	.word	0x0800892b
 80087dc:	08008781 	.word	0x08008781
 80087e0:	08008831 	.word	0x08008831
 80087e4:	08008781 	.word	0x08008781
 80087e8:	08008781 	.word	0x08008781
 80087ec:	080088cb 	.word	0x080088cb
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	1d1a      	adds	r2, r3, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008800:	2301      	movs	r3, #1
 8008802:	e09f      	b.n	8008944 <_printf_i+0x1ec>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	0607      	lsls	r7, r0, #24
 800880a:	f103 0104 	add.w	r1, r3, #4
 800880e:	6029      	str	r1, [r5, #0]
 8008810:	d501      	bpl.n	8008816 <_printf_i+0xbe>
 8008812:	681e      	ldr	r6, [r3, #0]
 8008814:	e003      	b.n	800881e <_printf_i+0xc6>
 8008816:	0646      	lsls	r6, r0, #25
 8008818:	d5fb      	bpl.n	8008812 <_printf_i+0xba>
 800881a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800881e:	2e00      	cmp	r6, #0
 8008820:	da03      	bge.n	800882a <_printf_i+0xd2>
 8008822:	232d      	movs	r3, #45	; 0x2d
 8008824:	4276      	negs	r6, r6
 8008826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882a:	485a      	ldr	r0, [pc, #360]	; (8008994 <_printf_i+0x23c>)
 800882c:	230a      	movs	r3, #10
 800882e:	e012      	b.n	8008856 <_printf_i+0xfe>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	1d19      	adds	r1, r3, #4
 8008836:	6029      	str	r1, [r5, #0]
 8008838:	0605      	lsls	r5, r0, #24
 800883a:	d501      	bpl.n	8008840 <_printf_i+0xe8>
 800883c:	681e      	ldr	r6, [r3, #0]
 800883e:	e002      	b.n	8008846 <_printf_i+0xee>
 8008840:	0641      	lsls	r1, r0, #25
 8008842:	d5fb      	bpl.n	800883c <_printf_i+0xe4>
 8008844:	881e      	ldrh	r6, [r3, #0]
 8008846:	4853      	ldr	r0, [pc, #332]	; (8008994 <_printf_i+0x23c>)
 8008848:	2f6f      	cmp	r7, #111	; 0x6f
 800884a:	bf0c      	ite	eq
 800884c:	2308      	moveq	r3, #8
 800884e:	230a      	movne	r3, #10
 8008850:	2100      	movs	r1, #0
 8008852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008856:	6865      	ldr	r5, [r4, #4]
 8008858:	60a5      	str	r5, [r4, #8]
 800885a:	2d00      	cmp	r5, #0
 800885c:	bfa2      	ittt	ge
 800885e:	6821      	ldrge	r1, [r4, #0]
 8008860:	f021 0104 	bicge.w	r1, r1, #4
 8008864:	6021      	strge	r1, [r4, #0]
 8008866:	b90e      	cbnz	r6, 800886c <_printf_i+0x114>
 8008868:	2d00      	cmp	r5, #0
 800886a:	d04b      	beq.n	8008904 <_printf_i+0x1ac>
 800886c:	4615      	mov	r5, r2
 800886e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008872:	fb03 6711 	mls	r7, r3, r1, r6
 8008876:	5dc7      	ldrb	r7, [r0, r7]
 8008878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800887c:	4637      	mov	r7, r6
 800887e:	42bb      	cmp	r3, r7
 8008880:	460e      	mov	r6, r1
 8008882:	d9f4      	bls.n	800886e <_printf_i+0x116>
 8008884:	2b08      	cmp	r3, #8
 8008886:	d10b      	bne.n	80088a0 <_printf_i+0x148>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	07de      	lsls	r6, r3, #31
 800888c:	d508      	bpl.n	80088a0 <_printf_i+0x148>
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	6861      	ldr	r1, [r4, #4]
 8008892:	4299      	cmp	r1, r3
 8008894:	bfde      	ittt	le
 8008896:	2330      	movle	r3, #48	; 0x30
 8008898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800889c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80088a0:	1b52      	subs	r2, r2, r5
 80088a2:	6122      	str	r2, [r4, #16]
 80088a4:	f8cd a000 	str.w	sl, [sp]
 80088a8:	464b      	mov	r3, r9
 80088aa:	aa03      	add	r2, sp, #12
 80088ac:	4621      	mov	r1, r4
 80088ae:	4640      	mov	r0, r8
 80088b0:	f7ff fee4 	bl	800867c <_printf_common>
 80088b4:	3001      	adds	r0, #1
 80088b6:	d14a      	bne.n	800894e <_printf_i+0x1f6>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088bc:	b004      	add	sp, #16
 80088be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f043 0320 	orr.w	r3, r3, #32
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	4833      	ldr	r0, [pc, #204]	; (8008998 <_printf_i+0x240>)
 80088cc:	2778      	movs	r7, #120	; 0x78
 80088ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	6829      	ldr	r1, [r5, #0]
 80088d6:	061f      	lsls	r7, r3, #24
 80088d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80088dc:	d402      	bmi.n	80088e4 <_printf_i+0x18c>
 80088de:	065f      	lsls	r7, r3, #25
 80088e0:	bf48      	it	mi
 80088e2:	b2b6      	uxthmi	r6, r6
 80088e4:	07df      	lsls	r7, r3, #31
 80088e6:	bf48      	it	mi
 80088e8:	f043 0320 	orrmi.w	r3, r3, #32
 80088ec:	6029      	str	r1, [r5, #0]
 80088ee:	bf48      	it	mi
 80088f0:	6023      	strmi	r3, [r4, #0]
 80088f2:	b91e      	cbnz	r6, 80088fc <_printf_i+0x1a4>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	f023 0320 	bic.w	r3, r3, #32
 80088fa:	6023      	str	r3, [r4, #0]
 80088fc:	2310      	movs	r3, #16
 80088fe:	e7a7      	b.n	8008850 <_printf_i+0xf8>
 8008900:	4824      	ldr	r0, [pc, #144]	; (8008994 <_printf_i+0x23c>)
 8008902:	e7e4      	b.n	80088ce <_printf_i+0x176>
 8008904:	4615      	mov	r5, r2
 8008906:	e7bd      	b.n	8008884 <_printf_i+0x12c>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	6826      	ldr	r6, [r4, #0]
 800890c:	6961      	ldr	r1, [r4, #20]
 800890e:	1d18      	adds	r0, r3, #4
 8008910:	6028      	str	r0, [r5, #0]
 8008912:	0635      	lsls	r5, r6, #24
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	d501      	bpl.n	800891c <_printf_i+0x1c4>
 8008918:	6019      	str	r1, [r3, #0]
 800891a:	e002      	b.n	8008922 <_printf_i+0x1ca>
 800891c:	0670      	lsls	r0, r6, #25
 800891e:	d5fb      	bpl.n	8008918 <_printf_i+0x1c0>
 8008920:	8019      	strh	r1, [r3, #0]
 8008922:	2300      	movs	r3, #0
 8008924:	6123      	str	r3, [r4, #16]
 8008926:	4615      	mov	r5, r2
 8008928:	e7bc      	b.n	80088a4 <_printf_i+0x14c>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	1d1a      	adds	r2, r3, #4
 800892e:	602a      	str	r2, [r5, #0]
 8008930:	681d      	ldr	r5, [r3, #0]
 8008932:	6862      	ldr	r2, [r4, #4]
 8008934:	2100      	movs	r1, #0
 8008936:	4628      	mov	r0, r5
 8008938:	f7f7 fc82 	bl	8000240 <memchr>
 800893c:	b108      	cbz	r0, 8008942 <_printf_i+0x1ea>
 800893e:	1b40      	subs	r0, r0, r5
 8008940:	6060      	str	r0, [r4, #4]
 8008942:	6863      	ldr	r3, [r4, #4]
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	2300      	movs	r3, #0
 8008948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894c:	e7aa      	b.n	80088a4 <_printf_i+0x14c>
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	462a      	mov	r2, r5
 8008952:	4649      	mov	r1, r9
 8008954:	4640      	mov	r0, r8
 8008956:	47d0      	blx	sl
 8008958:	3001      	adds	r0, #1
 800895a:	d0ad      	beq.n	80088b8 <_printf_i+0x160>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	079b      	lsls	r3, r3, #30
 8008960:	d413      	bmi.n	800898a <_printf_i+0x232>
 8008962:	68e0      	ldr	r0, [r4, #12]
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	4298      	cmp	r0, r3
 8008968:	bfb8      	it	lt
 800896a:	4618      	movlt	r0, r3
 800896c:	e7a6      	b.n	80088bc <_printf_i+0x164>
 800896e:	2301      	movs	r3, #1
 8008970:	4632      	mov	r2, r6
 8008972:	4649      	mov	r1, r9
 8008974:	4640      	mov	r0, r8
 8008976:	47d0      	blx	sl
 8008978:	3001      	adds	r0, #1
 800897a:	d09d      	beq.n	80088b8 <_printf_i+0x160>
 800897c:	3501      	adds	r5, #1
 800897e:	68e3      	ldr	r3, [r4, #12]
 8008980:	9903      	ldr	r1, [sp, #12]
 8008982:	1a5b      	subs	r3, r3, r1
 8008984:	42ab      	cmp	r3, r5
 8008986:	dcf2      	bgt.n	800896e <_printf_i+0x216>
 8008988:	e7eb      	b.n	8008962 <_printf_i+0x20a>
 800898a:	2500      	movs	r5, #0
 800898c:	f104 0619 	add.w	r6, r4, #25
 8008990:	e7f5      	b.n	800897e <_printf_i+0x226>
 8008992:	bf00      	nop
 8008994:	0800aaa6 	.word	0x0800aaa6
 8008998:	0800aab7 	.word	0x0800aab7

0800899c <std>:
 800899c:	2300      	movs	r3, #0
 800899e:	b510      	push	{r4, lr}
 80089a0:	4604      	mov	r4, r0
 80089a2:	e9c0 3300 	strd	r3, r3, [r0]
 80089a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089aa:	6083      	str	r3, [r0, #8]
 80089ac:	8181      	strh	r1, [r0, #12]
 80089ae:	6643      	str	r3, [r0, #100]	; 0x64
 80089b0:	81c2      	strh	r2, [r0, #14]
 80089b2:	6183      	str	r3, [r0, #24]
 80089b4:	4619      	mov	r1, r3
 80089b6:	2208      	movs	r2, #8
 80089b8:	305c      	adds	r0, #92	; 0x5c
 80089ba:	f000 f9f7 	bl	8008dac <memset>
 80089be:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <std+0x58>)
 80089c0:	6263      	str	r3, [r4, #36]	; 0x24
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <std+0x5c>)
 80089c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80089c6:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <std+0x60>)
 80089c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089ca:	4b0d      	ldr	r3, [pc, #52]	; (8008a00 <std+0x64>)
 80089cc:	6323      	str	r3, [r4, #48]	; 0x30
 80089ce:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <std+0x68>)
 80089d0:	6224      	str	r4, [r4, #32]
 80089d2:	429c      	cmp	r4, r3
 80089d4:	d006      	beq.n	80089e4 <std+0x48>
 80089d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80089da:	4294      	cmp	r4, r2
 80089dc:	d002      	beq.n	80089e4 <std+0x48>
 80089de:	33d0      	adds	r3, #208	; 0xd0
 80089e0:	429c      	cmp	r4, r3
 80089e2:	d105      	bne.n	80089f0 <std+0x54>
 80089e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ec:	f000 ba5a 	b.w	8008ea4 <__retarget_lock_init_recursive>
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	bf00      	nop
 80089f4:	08008bfd 	.word	0x08008bfd
 80089f8:	08008c1f 	.word	0x08008c1f
 80089fc:	08008c57 	.word	0x08008c57
 8008a00:	08008c7b 	.word	0x08008c7b
 8008a04:	200009b4 	.word	0x200009b4

08008a08 <stdio_exit_handler>:
 8008a08:	4a02      	ldr	r2, [pc, #8]	; (8008a14 <stdio_exit_handler+0xc>)
 8008a0a:	4903      	ldr	r1, [pc, #12]	; (8008a18 <stdio_exit_handler+0x10>)
 8008a0c:	4803      	ldr	r0, [pc, #12]	; (8008a1c <stdio_exit_handler+0x14>)
 8008a0e:	f000 b869 	b.w	8008ae4 <_fwalk_sglue>
 8008a12:	bf00      	nop
 8008a14:	2000001c 	.word	0x2000001c
 8008a18:	0800a73d 	.word	0x0800a73d
 8008a1c:	20000028 	.word	0x20000028

08008a20 <cleanup_stdio>:
 8008a20:	6841      	ldr	r1, [r0, #4]
 8008a22:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <cleanup_stdio+0x34>)
 8008a24:	4299      	cmp	r1, r3
 8008a26:	b510      	push	{r4, lr}
 8008a28:	4604      	mov	r4, r0
 8008a2a:	d001      	beq.n	8008a30 <cleanup_stdio+0x10>
 8008a2c:	f001 fe86 	bl	800a73c <_fflush_r>
 8008a30:	68a1      	ldr	r1, [r4, #8]
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <cleanup_stdio+0x38>)
 8008a34:	4299      	cmp	r1, r3
 8008a36:	d002      	beq.n	8008a3e <cleanup_stdio+0x1e>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f001 fe7f 	bl	800a73c <_fflush_r>
 8008a3e:	68e1      	ldr	r1, [r4, #12]
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <cleanup_stdio+0x3c>)
 8008a42:	4299      	cmp	r1, r3
 8008a44:	d004      	beq.n	8008a50 <cleanup_stdio+0x30>
 8008a46:	4620      	mov	r0, r4
 8008a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a4c:	f001 be76 	b.w	800a73c <_fflush_r>
 8008a50:	bd10      	pop	{r4, pc}
 8008a52:	bf00      	nop
 8008a54:	200009b4 	.word	0x200009b4
 8008a58:	20000a1c 	.word	0x20000a1c
 8008a5c:	20000a84 	.word	0x20000a84

08008a60 <global_stdio_init.part.0>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <global_stdio_init.part.0+0x30>)
 8008a64:	4c0b      	ldr	r4, [pc, #44]	; (8008a94 <global_stdio_init.part.0+0x34>)
 8008a66:	4a0c      	ldr	r2, [pc, #48]	; (8008a98 <global_stdio_init.part.0+0x38>)
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2104      	movs	r1, #4
 8008a70:	f7ff ff94 	bl	800899c <std>
 8008a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a78:	2201      	movs	r2, #1
 8008a7a:	2109      	movs	r1, #9
 8008a7c:	f7ff ff8e 	bl	800899c <std>
 8008a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a84:	2202      	movs	r2, #2
 8008a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a8a:	2112      	movs	r1, #18
 8008a8c:	f7ff bf86 	b.w	800899c <std>
 8008a90:	20000aec 	.word	0x20000aec
 8008a94:	200009b4 	.word	0x200009b4
 8008a98:	08008a09 	.word	0x08008a09

08008a9c <__sfp_lock_acquire>:
 8008a9c:	4801      	ldr	r0, [pc, #4]	; (8008aa4 <__sfp_lock_acquire+0x8>)
 8008a9e:	f000 ba02 	b.w	8008ea6 <__retarget_lock_acquire_recursive>
 8008aa2:	bf00      	nop
 8008aa4:	20000af5 	.word	0x20000af5

08008aa8 <__sfp_lock_release>:
 8008aa8:	4801      	ldr	r0, [pc, #4]	; (8008ab0 <__sfp_lock_release+0x8>)
 8008aaa:	f000 b9fd 	b.w	8008ea8 <__retarget_lock_release_recursive>
 8008aae:	bf00      	nop
 8008ab0:	20000af5 	.word	0x20000af5

08008ab4 <__sinit>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	f7ff fff0 	bl	8008a9c <__sfp_lock_acquire>
 8008abc:	6a23      	ldr	r3, [r4, #32]
 8008abe:	b11b      	cbz	r3, 8008ac8 <__sinit+0x14>
 8008ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac4:	f7ff bff0 	b.w	8008aa8 <__sfp_lock_release>
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <__sinit+0x28>)
 8008aca:	6223      	str	r3, [r4, #32]
 8008acc:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <__sinit+0x2c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f5      	bne.n	8008ac0 <__sinit+0xc>
 8008ad4:	f7ff ffc4 	bl	8008a60 <global_stdio_init.part.0>
 8008ad8:	e7f2      	b.n	8008ac0 <__sinit+0xc>
 8008ada:	bf00      	nop
 8008adc:	08008a21 	.word	0x08008a21
 8008ae0:	20000aec 	.word	0x20000aec

08008ae4 <_fwalk_sglue>:
 8008ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae8:	4607      	mov	r7, r0
 8008aea:	4688      	mov	r8, r1
 8008aec:	4614      	mov	r4, r2
 8008aee:	2600      	movs	r6, #0
 8008af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008af4:	f1b9 0901 	subs.w	r9, r9, #1
 8008af8:	d505      	bpl.n	8008b06 <_fwalk_sglue+0x22>
 8008afa:	6824      	ldr	r4, [r4, #0]
 8008afc:	2c00      	cmp	r4, #0
 8008afe:	d1f7      	bne.n	8008af0 <_fwalk_sglue+0xc>
 8008b00:	4630      	mov	r0, r6
 8008b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b06:	89ab      	ldrh	r3, [r5, #12]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d907      	bls.n	8008b1c <_fwalk_sglue+0x38>
 8008b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b10:	3301      	adds	r3, #1
 8008b12:	d003      	beq.n	8008b1c <_fwalk_sglue+0x38>
 8008b14:	4629      	mov	r1, r5
 8008b16:	4638      	mov	r0, r7
 8008b18:	47c0      	blx	r8
 8008b1a:	4306      	orrs	r6, r0
 8008b1c:	3568      	adds	r5, #104	; 0x68
 8008b1e:	e7e9      	b.n	8008af4 <_fwalk_sglue+0x10>

08008b20 <iprintf>:
 8008b20:	b40f      	push	{r0, r1, r2, r3}
 8008b22:	b507      	push	{r0, r1, r2, lr}
 8008b24:	4906      	ldr	r1, [pc, #24]	; (8008b40 <iprintf+0x20>)
 8008b26:	ab04      	add	r3, sp, #16
 8008b28:	6808      	ldr	r0, [r1, #0]
 8008b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2e:	6881      	ldr	r1, [r0, #8]
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	f001 fc63 	bl	800a3fc <_vfiprintf_r>
 8008b36:	b003      	add	sp, #12
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b004      	add	sp, #16
 8008b3e:	4770      	bx	lr
 8008b40:	20000074 	.word	0x20000074

08008b44 <_puts_r>:
 8008b44:	6a03      	ldr	r3, [r0, #32]
 8008b46:	b570      	push	{r4, r5, r6, lr}
 8008b48:	6884      	ldr	r4, [r0, #8]
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	460e      	mov	r6, r1
 8008b4e:	b90b      	cbnz	r3, 8008b54 <_puts_r+0x10>
 8008b50:	f7ff ffb0 	bl	8008ab4 <__sinit>
 8008b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b56:	07db      	lsls	r3, r3, #31
 8008b58:	d405      	bmi.n	8008b66 <_puts_r+0x22>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	0598      	lsls	r0, r3, #22
 8008b5e:	d402      	bmi.n	8008b66 <_puts_r+0x22>
 8008b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b62:	f000 f9a0 	bl	8008ea6 <__retarget_lock_acquire_recursive>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	0719      	lsls	r1, r3, #28
 8008b6a:	d513      	bpl.n	8008b94 <_puts_r+0x50>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	b18b      	cbz	r3, 8008b94 <_puts_r+0x50>
 8008b70:	3e01      	subs	r6, #1
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	b9e9      	cbnz	r1, 8008bba <_puts_r+0x76>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	da2e      	bge.n	8008be0 <_puts_r+0x9c>
 8008b82:	4622      	mov	r2, r4
 8008b84:	210a      	movs	r1, #10
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 f87b 	bl	8008c82 <__swbuf_r>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d007      	beq.n	8008ba0 <_puts_r+0x5c>
 8008b90:	250a      	movs	r5, #10
 8008b92:	e007      	b.n	8008ba4 <_puts_r+0x60>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f8b0 	bl	8008cfc <__swsetup_r>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d0e7      	beq.n	8008b70 <_puts_r+0x2c>
 8008ba0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_puts_r+0x72>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	059b      	lsls	r3, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_puts_r+0x72>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb2:	f000 f979 	bl	8008ea8 <__retarget_lock_release_recursive>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da04      	bge.n	8008bc8 <_puts_r+0x84>
 8008bbe:	69a2      	ldr	r2, [r4, #24]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	dc06      	bgt.n	8008bd2 <_puts_r+0x8e>
 8008bc4:	290a      	cmp	r1, #10
 8008bc6:	d004      	beq.n	8008bd2 <_puts_r+0x8e>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	7019      	strb	r1, [r3, #0]
 8008bd0:	e7cf      	b.n	8008b72 <_puts_r+0x2e>
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 f854 	bl	8008c82 <__swbuf_r>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d1c9      	bne.n	8008b72 <_puts_r+0x2e>
 8008bde:	e7df      	b.n	8008ba0 <_puts_r+0x5c>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	250a      	movs	r5, #10
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	6022      	str	r2, [r4, #0]
 8008be8:	701d      	strb	r5, [r3, #0]
 8008bea:	e7db      	b.n	8008ba4 <_puts_r+0x60>

08008bec <puts>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <puts+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f7ff bfa7 	b.w	8008b44 <_puts_r>
 8008bf6:	bf00      	nop
 8008bf8:	20000074 	.word	0x20000074

08008bfc <__sread>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	460c      	mov	r4, r1
 8008c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c04:	f000 f900 	bl	8008e08 <_read_r>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	bfab      	itete	ge
 8008c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c10:	181b      	addge	r3, r3, r0
 8008c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c16:	bfac      	ite	ge
 8008c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c1a:	81a3      	strhlt	r3, [r4, #12]
 8008c1c:	bd10      	pop	{r4, pc}

08008c1e <__swrite>:
 8008c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c22:	461f      	mov	r7, r3
 8008c24:	898b      	ldrh	r3, [r1, #12]
 8008c26:	05db      	lsls	r3, r3, #23
 8008c28:	4605      	mov	r5, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	d505      	bpl.n	8008c3c <__swrite+0x1e>
 8008c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c34:	2302      	movs	r3, #2
 8008c36:	2200      	movs	r2, #0
 8008c38:	f000 f8d4 	bl	8008de4 <_lseek_r>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c52:	f000 b8eb 	b.w	8008e2c <_write_r>

08008c56 <__sseek>:
 8008c56:	b510      	push	{r4, lr}
 8008c58:	460c      	mov	r4, r1
 8008c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5e:	f000 f8c1 	bl	8008de4 <_lseek_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	bf15      	itete	ne
 8008c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c72:	81a3      	strheq	r3, [r4, #12]
 8008c74:	bf18      	it	ne
 8008c76:	81a3      	strhne	r3, [r4, #12]
 8008c78:	bd10      	pop	{r4, pc}

08008c7a <__sclose>:
 8008c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7e:	f000 b8a1 	b.w	8008dc4 <_close_r>

08008c82 <__swbuf_r>:
 8008c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c84:	460e      	mov	r6, r1
 8008c86:	4614      	mov	r4, r2
 8008c88:	4605      	mov	r5, r0
 8008c8a:	b118      	cbz	r0, 8008c94 <__swbuf_r+0x12>
 8008c8c:	6a03      	ldr	r3, [r0, #32]
 8008c8e:	b90b      	cbnz	r3, 8008c94 <__swbuf_r+0x12>
 8008c90:	f7ff ff10 	bl	8008ab4 <__sinit>
 8008c94:	69a3      	ldr	r3, [r4, #24]
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	071a      	lsls	r2, r3, #28
 8008c9c:	d525      	bpl.n	8008cea <__swbuf_r+0x68>
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	b31b      	cbz	r3, 8008cea <__swbuf_r+0x68>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	1a98      	subs	r0, r3, r2
 8008ca8:	6963      	ldr	r3, [r4, #20]
 8008caa:	b2f6      	uxtb	r6, r6
 8008cac:	4283      	cmp	r3, r0
 8008cae:	4637      	mov	r7, r6
 8008cb0:	dc04      	bgt.n	8008cbc <__swbuf_r+0x3a>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f001 fd41 	bl	800a73c <_fflush_r>
 8008cba:	b9e0      	cbnz	r0, 8008cf6 <__swbuf_r+0x74>
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	701e      	strb	r6, [r3, #0]
 8008cca:	6962      	ldr	r2, [r4, #20]
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d004      	beq.n	8008cdc <__swbuf_r+0x5a>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	07db      	lsls	r3, r3, #31
 8008cd6:	d506      	bpl.n	8008ce6 <__swbuf_r+0x64>
 8008cd8:	2e0a      	cmp	r6, #10
 8008cda:	d104      	bne.n	8008ce6 <__swbuf_r+0x64>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f001 fd2c 	bl	800a73c <_fflush_r>
 8008ce4:	b938      	cbnz	r0, 8008cf6 <__swbuf_r+0x74>
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cea:	4621      	mov	r1, r4
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 f805 	bl	8008cfc <__swsetup_r>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d0d5      	beq.n	8008ca2 <__swbuf_r+0x20>
 8008cf6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cfa:	e7f4      	b.n	8008ce6 <__swbuf_r+0x64>

08008cfc <__swsetup_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4b2a      	ldr	r3, [pc, #168]	; (8008da8 <__swsetup_r+0xac>)
 8008d00:	4605      	mov	r5, r0
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	460c      	mov	r4, r1
 8008d06:	b118      	cbz	r0, 8008d10 <__swsetup_r+0x14>
 8008d08:	6a03      	ldr	r3, [r0, #32]
 8008d0a:	b90b      	cbnz	r3, 8008d10 <__swsetup_r+0x14>
 8008d0c:	f7ff fed2 	bl	8008ab4 <__sinit>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d16:	0718      	lsls	r0, r3, #28
 8008d18:	d422      	bmi.n	8008d60 <__swsetup_r+0x64>
 8008d1a:	06d9      	lsls	r1, r3, #27
 8008d1c:	d407      	bmi.n	8008d2e <__swsetup_r+0x32>
 8008d1e:	2309      	movs	r3, #9
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2c:	e034      	b.n	8008d98 <__swsetup_r+0x9c>
 8008d2e:	0758      	lsls	r0, r3, #29
 8008d30:	d512      	bpl.n	8008d58 <__swsetup_r+0x5c>
 8008d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d34:	b141      	cbz	r1, 8008d48 <__swsetup_r+0x4c>
 8008d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	d002      	beq.n	8008d44 <__swsetup_r+0x48>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f000 feb6 	bl	8009ab0 <_free_r>
 8008d44:	2300      	movs	r3, #0
 8008d46:	6363      	str	r3, [r4, #52]	; 0x34
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	2300      	movs	r3, #0
 8008d52:	6063      	str	r3, [r4, #4]
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f043 0308 	orr.w	r3, r3, #8
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	b94b      	cbnz	r3, 8008d78 <__swsetup_r+0x7c>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6e:	d003      	beq.n	8008d78 <__swsetup_r+0x7c>
 8008d70:	4621      	mov	r1, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	f001 fd30 	bl	800a7d8 <__smakebuf_r>
 8008d78:	89a0      	ldrh	r0, [r4, #12]
 8008d7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d7e:	f010 0301 	ands.w	r3, r0, #1
 8008d82:	d00a      	beq.n	8008d9a <__swsetup_r+0x9e>
 8008d84:	2300      	movs	r3, #0
 8008d86:	60a3      	str	r3, [r4, #8]
 8008d88:	6963      	ldr	r3, [r4, #20]
 8008d8a:	425b      	negs	r3, r3
 8008d8c:	61a3      	str	r3, [r4, #24]
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	b943      	cbnz	r3, 8008da4 <__swsetup_r+0xa8>
 8008d92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d96:	d1c4      	bne.n	8008d22 <__swsetup_r+0x26>
 8008d98:	bd38      	pop	{r3, r4, r5, pc}
 8008d9a:	0781      	lsls	r1, r0, #30
 8008d9c:	bf58      	it	pl
 8008d9e:	6963      	ldrpl	r3, [r4, #20]
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	e7f4      	b.n	8008d8e <__swsetup_r+0x92>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e7f7      	b.n	8008d98 <__swsetup_r+0x9c>
 8008da8:	20000074 	.word	0x20000074

08008dac <memset>:
 8008dac:	4402      	add	r2, r0
 8008dae:	4603      	mov	r3, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d100      	bne.n	8008db6 <memset+0xa>
 8008db4:	4770      	bx	lr
 8008db6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dba:	e7f9      	b.n	8008db0 <memset+0x4>

08008dbc <_localeconv_r>:
 8008dbc:	4800      	ldr	r0, [pc, #0]	; (8008dc0 <_localeconv_r+0x4>)
 8008dbe:	4770      	bx	lr
 8008dc0:	20000168 	.word	0x20000168

08008dc4 <_close_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	; (8008de0 <_close_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f9 feef 	bl	8002bb2 <_close>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_close_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_close_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20000af0 	.word	0x20000af0

08008de4 <_lseek_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_lseek_r+0x20>)
 8008de8:	4604      	mov	r4, r0
 8008dea:	4608      	mov	r0, r1
 8008dec:	4611      	mov	r1, r2
 8008dee:	2200      	movs	r2, #0
 8008df0:	602a      	str	r2, [r5, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f7f9 ff04 	bl	8002c00 <_lseek>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_lseek_r+0x1e>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_lseek_r+0x1e>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20000af0 	.word	0x20000af0

08008e08 <_read_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d07      	ldr	r5, [pc, #28]	; (8008e28 <_read_r+0x20>)
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	4608      	mov	r0, r1
 8008e10:	4611      	mov	r1, r2
 8008e12:	2200      	movs	r2, #0
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f7f9 feae 	bl	8002b78 <_read>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_read_r+0x1e>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_read_r+0x1e>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	20000af0 	.word	0x20000af0

08008e2c <_write_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	; (8008e4c <_write_r+0x20>)
 8008e30:	4604      	mov	r4, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f9 f8dc 	bl	8001ff8 <_write>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_write_r+0x1e>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_write_r+0x1e>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000af0 	.word	0x20000af0

08008e50 <__errno>:
 8008e50:	4b01      	ldr	r3, [pc, #4]	; (8008e58 <__errno+0x8>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	20000074 	.word	0x20000074

08008e5c <__libc_init_array>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4d0d      	ldr	r5, [pc, #52]	; (8008e94 <__libc_init_array+0x38>)
 8008e60:	4c0d      	ldr	r4, [pc, #52]	; (8008e98 <__libc_init_array+0x3c>)
 8008e62:	1b64      	subs	r4, r4, r5
 8008e64:	10a4      	asrs	r4, r4, #2
 8008e66:	2600      	movs	r6, #0
 8008e68:	42a6      	cmp	r6, r4
 8008e6a:	d109      	bne.n	8008e80 <__libc_init_array+0x24>
 8008e6c:	4d0b      	ldr	r5, [pc, #44]	; (8008e9c <__libc_init_array+0x40>)
 8008e6e:	4c0c      	ldr	r4, [pc, #48]	; (8008ea0 <__libc_init_array+0x44>)
 8008e70:	f001 fdd2 	bl	800aa18 <_init>
 8008e74:	1b64      	subs	r4, r4, r5
 8008e76:	10a4      	asrs	r4, r4, #2
 8008e78:	2600      	movs	r6, #0
 8008e7a:	42a6      	cmp	r6, r4
 8008e7c:	d105      	bne.n	8008e8a <__libc_init_array+0x2e>
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e84:	4798      	blx	r3
 8008e86:	3601      	adds	r6, #1
 8008e88:	e7ee      	b.n	8008e68 <__libc_init_array+0xc>
 8008e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e8e:	4798      	blx	r3
 8008e90:	3601      	adds	r6, #1
 8008e92:	e7f2      	b.n	8008e7a <__libc_init_array+0x1e>
 8008e94:	0800ae0c 	.word	0x0800ae0c
 8008e98:	0800ae0c 	.word	0x0800ae0c
 8008e9c:	0800ae0c 	.word	0x0800ae0c
 8008ea0:	0800ae10 	.word	0x0800ae10

08008ea4 <__retarget_lock_init_recursive>:
 8008ea4:	4770      	bx	lr

08008ea6 <__retarget_lock_acquire_recursive>:
 8008ea6:	4770      	bx	lr

08008ea8 <__retarget_lock_release_recursive>:
 8008ea8:	4770      	bx	lr

08008eaa <memcpy>:
 8008eaa:	440a      	add	r2, r1
 8008eac:	4291      	cmp	r1, r2
 8008eae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008eb2:	d100      	bne.n	8008eb6 <memcpy+0xc>
 8008eb4:	4770      	bx	lr
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ec0:	4291      	cmp	r1, r2
 8008ec2:	d1f9      	bne.n	8008eb8 <memcpy+0xe>
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <quorem>:
 8008ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eca:	6903      	ldr	r3, [r0, #16]
 8008ecc:	690c      	ldr	r4, [r1, #16]
 8008ece:	42a3      	cmp	r3, r4
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	db7e      	blt.n	8008fd2 <quorem+0x10c>
 8008ed4:	3c01      	subs	r4, #1
 8008ed6:	f101 0814 	add.w	r8, r1, #20
 8008eda:	f100 0514 	add.w	r5, r0, #20
 8008ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eec:	3301      	adds	r3, #1
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008efc:	d331      	bcc.n	8008f62 <quorem+0x9c>
 8008efe:	f04f 0e00 	mov.w	lr, #0
 8008f02:	4640      	mov	r0, r8
 8008f04:	46ac      	mov	ip, r5
 8008f06:	46f2      	mov	sl, lr
 8008f08:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f0c:	b293      	uxth	r3, r2
 8008f0e:	fb06 e303 	mla	r3, r6, r3, lr
 8008f12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f16:	0c1a      	lsrs	r2, r3, #16
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8008f1e:	f8dc a000 	ldr.w	sl, [ip]
 8008f22:	fa13 f38a 	uxtah	r3, r3, sl
 8008f26:	fb06 220e 	mla	r2, r6, lr, r2
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f32:	b292      	uxth	r2, r2
 8008f34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f40:	4581      	cmp	r9, r0
 8008f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f46:	f84c 3b04 	str.w	r3, [ip], #4
 8008f4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f4e:	d2db      	bcs.n	8008f08 <quorem+0x42>
 8008f50:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f54:	b92b      	cbnz	r3, 8008f62 <quorem+0x9c>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	429d      	cmp	r5, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	d32c      	bcc.n	8008fba <quorem+0xf4>
 8008f60:	613c      	str	r4, [r7, #16]
 8008f62:	4638      	mov	r0, r7
 8008f64:	f001 f920 	bl	800a1a8 <__mcmp>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	db22      	blt.n	8008fb2 <quorem+0xec>
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	4629      	mov	r1, r5
 8008f70:	2000      	movs	r0, #0
 8008f72:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f76:	f8d1 c000 	ldr.w	ip, [r1]
 8008f7a:	b293      	uxth	r3, r2
 8008f7c:	1ac3      	subs	r3, r0, r3
 8008f7e:	0c12      	lsrs	r2, r2, #16
 8008f80:	fa13 f38c 	uxtah	r3, r3, ip
 8008f84:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f92:	45c1      	cmp	r9, r8
 8008f94:	f841 3b04 	str.w	r3, [r1], #4
 8008f98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f9c:	d2e9      	bcs.n	8008f72 <quorem+0xac>
 8008f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fa6:	b922      	cbnz	r2, 8008fb2 <quorem+0xec>
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	429d      	cmp	r5, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	d30a      	bcc.n	8008fc6 <quorem+0x100>
 8008fb0:	613c      	str	r4, [r7, #16]
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	b003      	add	sp, #12
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	d1ce      	bne.n	8008f60 <quorem+0x9a>
 8008fc2:	3c01      	subs	r4, #1
 8008fc4:	e7c9      	b.n	8008f5a <quorem+0x94>
 8008fc6:	6812      	ldr	r2, [r2, #0]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	d1f0      	bne.n	8008fb0 <quorem+0xea>
 8008fce:	3c01      	subs	r4, #1
 8008fd0:	e7eb      	b.n	8008faa <quorem+0xe4>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	e7ee      	b.n	8008fb4 <quorem+0xee>
	...

08008fd8 <_dtoa_r>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	ed2d 8b02 	vpush	{d8}
 8008fe0:	69c5      	ldr	r5, [r0, #28]
 8008fe2:	b091      	sub	sp, #68	; 0x44
 8008fe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fe8:	ec59 8b10 	vmov	r8, r9, d0
 8008fec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008fee:	9106      	str	r1, [sp, #24]
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	9208      	str	r2, [sp, #32]
 8008ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff6:	b975      	cbnz	r5, 8009016 <_dtoa_r+0x3e>
 8008ff8:	2010      	movs	r0, #16
 8008ffa:	f000 fda5 	bl	8009b48 <malloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	61f0      	str	r0, [r6, #28]
 8009002:	b920      	cbnz	r0, 800900e <_dtoa_r+0x36>
 8009004:	4ba6      	ldr	r3, [pc, #664]	; (80092a0 <_dtoa_r+0x2c8>)
 8009006:	21ef      	movs	r1, #239	; 0xef
 8009008:	48a6      	ldr	r0, [pc, #664]	; (80092a4 <_dtoa_r+0x2cc>)
 800900a:	f001 fc53 	bl	800a8b4 <__assert_func>
 800900e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009012:	6005      	str	r5, [r0, #0]
 8009014:	60c5      	str	r5, [r0, #12]
 8009016:	69f3      	ldr	r3, [r6, #28]
 8009018:	6819      	ldr	r1, [r3, #0]
 800901a:	b151      	cbz	r1, 8009032 <_dtoa_r+0x5a>
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	604a      	str	r2, [r1, #4]
 8009020:	2301      	movs	r3, #1
 8009022:	4093      	lsls	r3, r2
 8009024:	608b      	str	r3, [r1, #8]
 8009026:	4630      	mov	r0, r6
 8009028:	f000 fe82 	bl	8009d30 <_Bfree>
 800902c:	69f3      	ldr	r3, [r6, #28]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	f1b9 0300 	subs.w	r3, r9, #0
 8009036:	bfbb      	ittet	lt
 8009038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800903c:	9303      	strlt	r3, [sp, #12]
 800903e:	2300      	movge	r3, #0
 8009040:	2201      	movlt	r2, #1
 8009042:	bfac      	ite	ge
 8009044:	6023      	strge	r3, [r4, #0]
 8009046:	6022      	strlt	r2, [r4, #0]
 8009048:	4b97      	ldr	r3, [pc, #604]	; (80092a8 <_dtoa_r+0x2d0>)
 800904a:	9c03      	ldr	r4, [sp, #12]
 800904c:	43a3      	bics	r3, r4
 800904e:	d11c      	bne.n	800908a <_dtoa_r+0xb2>
 8009050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009052:	f242 730f 	movw	r3, #9999	; 0x270f
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800905c:	ea53 0308 	orrs.w	r3, r3, r8
 8009060:	f000 84fb 	beq.w	8009a5a <_dtoa_r+0xa82>
 8009064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009066:	b963      	cbnz	r3, 8009082 <_dtoa_r+0xaa>
 8009068:	4b90      	ldr	r3, [pc, #576]	; (80092ac <_dtoa_r+0x2d4>)
 800906a:	e020      	b.n	80090ae <_dtoa_r+0xd6>
 800906c:	4b90      	ldr	r3, [pc, #576]	; (80092b0 <_dtoa_r+0x2d8>)
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	3308      	adds	r3, #8
 8009072:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	9801      	ldr	r0, [sp, #4]
 8009078:	b011      	add	sp, #68	; 0x44
 800907a:	ecbd 8b02 	vpop	{d8}
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	4b8a      	ldr	r3, [pc, #552]	; (80092ac <_dtoa_r+0x2d4>)
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	3303      	adds	r3, #3
 8009088:	e7f3      	b.n	8009072 <_dtoa_r+0x9a>
 800908a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800908e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	d10c      	bne.n	80090b2 <_dtoa_r+0xda>
 8009098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800909a:	2301      	movs	r3, #1
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 84d7 	beq.w	8009a54 <_dtoa_r+0xa7c>
 80090a6:	4b83      	ldr	r3, [pc, #524]	; (80092b4 <_dtoa_r+0x2dc>)
 80090a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	e7e1      	b.n	8009076 <_dtoa_r+0x9e>
 80090b2:	aa0e      	add	r2, sp, #56	; 0x38
 80090b4:	a90f      	add	r1, sp, #60	; 0x3c
 80090b6:	4630      	mov	r0, r6
 80090b8:	eeb0 0b48 	vmov.f64	d0, d8
 80090bc:	f001 f91a 	bl	800a2f4 <__d2b>
 80090c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80090c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c6:	4605      	mov	r5, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d046      	beq.n	800915a <_dtoa_r+0x182>
 80090cc:	eeb0 7b48 	vmov.f64	d7, d8
 80090d0:	ee18 1a90 	vmov	r1, s17
 80090d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80090d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80090dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80090e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090e4:	2000      	movs	r0, #0
 80090e6:	ee07 1a90 	vmov	s15, r1
 80090ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80090ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009288 <_dtoa_r+0x2b0>
 80090f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80090f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009290 <_dtoa_r+0x2b8>
 80090fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80090fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009298 <_dtoa_r+0x2c0>
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800910a:	eeb0 7b46 	vmov.f64	d7, d6
 800910e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009112:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009116:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800911a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911e:	ee16 ba90 	vmov	fp, s13
 8009122:	9009      	str	r0, [sp, #36]	; 0x24
 8009124:	d508      	bpl.n	8009138 <_dtoa_r+0x160>
 8009126:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800912a:	eeb4 6b47 	vcmp.f64	d6, d7
 800912e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009132:	bf18      	it	ne
 8009134:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8009138:	f1bb 0f16 	cmp.w	fp, #22
 800913c:	d82b      	bhi.n	8009196 <_dtoa_r+0x1be>
 800913e:	495e      	ldr	r1, [pc, #376]	; (80092b8 <_dtoa_r+0x2e0>)
 8009140:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009144:	ed91 7b00 	vldr	d7, [r1]
 8009148:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800914c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009150:	d501      	bpl.n	8009156 <_dtoa_r+0x17e>
 8009152:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009156:	2100      	movs	r1, #0
 8009158:	e01e      	b.n	8009198 <_dtoa_r+0x1c0>
 800915a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800915c:	4413      	add	r3, r2
 800915e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009162:	2920      	cmp	r1, #32
 8009164:	bfc1      	itttt	gt
 8009166:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800916a:	408c      	lslgt	r4, r1
 800916c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009170:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009174:	bfd6      	itet	le
 8009176:	f1c1 0120 	rsble	r1, r1, #32
 800917a:	4321      	orrgt	r1, r4
 800917c:	fa08 f101 	lslle.w	r1, r8, r1
 8009180:	ee07 1a90 	vmov	s15, r1
 8009184:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009188:	3b01      	subs	r3, #1
 800918a:	ee17 1a90 	vmov	r1, s15
 800918e:	2001      	movs	r0, #1
 8009190:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009194:	e7a7      	b.n	80090e6 <_dtoa_r+0x10e>
 8009196:	2101      	movs	r1, #1
 8009198:	1ad2      	subs	r2, r2, r3
 800919a:	1e53      	subs	r3, r2, #1
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	bf45      	ittet	mi
 80091a0:	f1c2 0301 	rsbmi	r3, r2, #1
 80091a4:	9304      	strmi	r3, [sp, #16]
 80091a6:	2300      	movpl	r3, #0
 80091a8:	2300      	movmi	r3, #0
 80091aa:	bf4c      	ite	mi
 80091ac:	9305      	strmi	r3, [sp, #20]
 80091ae:	9304      	strpl	r3, [sp, #16]
 80091b0:	f1bb 0f00 	cmp.w	fp, #0
 80091b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80091b6:	db18      	blt.n	80091ea <_dtoa_r+0x212>
 80091b8:	9b05      	ldr	r3, [sp, #20]
 80091ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80091be:	445b      	add	r3, fp
 80091c0:	9305      	str	r3, [sp, #20]
 80091c2:	2300      	movs	r3, #0
 80091c4:	9a06      	ldr	r2, [sp, #24]
 80091c6:	2a09      	cmp	r2, #9
 80091c8:	d848      	bhi.n	800925c <_dtoa_r+0x284>
 80091ca:	2a05      	cmp	r2, #5
 80091cc:	bfc4      	itt	gt
 80091ce:	3a04      	subgt	r2, #4
 80091d0:	9206      	strgt	r2, [sp, #24]
 80091d2:	9a06      	ldr	r2, [sp, #24]
 80091d4:	f1a2 0202 	sub.w	r2, r2, #2
 80091d8:	bfcc      	ite	gt
 80091da:	2400      	movgt	r4, #0
 80091dc:	2401      	movle	r4, #1
 80091de:	2a03      	cmp	r2, #3
 80091e0:	d847      	bhi.n	8009272 <_dtoa_r+0x29a>
 80091e2:	e8df f002 	tbb	[pc, r2]
 80091e6:	2d0b      	.short	0x2d0b
 80091e8:	392b      	.short	0x392b
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	2200      	movs	r2, #0
 80091ee:	eba3 030b 	sub.w	r3, r3, fp
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	920a      	str	r2, [sp, #40]	; 0x28
 80091f6:	f1cb 0300 	rsb	r3, fp, #0
 80091fa:	e7e3      	b.n	80091c4 <_dtoa_r+0x1ec>
 80091fc:	2200      	movs	r2, #0
 80091fe:	9207      	str	r2, [sp, #28]
 8009200:	9a08      	ldr	r2, [sp, #32]
 8009202:	2a00      	cmp	r2, #0
 8009204:	dc38      	bgt.n	8009278 <_dtoa_r+0x2a0>
 8009206:	f04f 0a01 	mov.w	sl, #1
 800920a:	46d1      	mov	r9, sl
 800920c:	4652      	mov	r2, sl
 800920e:	f8cd a020 	str.w	sl, [sp, #32]
 8009212:	69f7      	ldr	r7, [r6, #28]
 8009214:	2100      	movs	r1, #0
 8009216:	2004      	movs	r0, #4
 8009218:	f100 0c14 	add.w	ip, r0, #20
 800921c:	4594      	cmp	ip, r2
 800921e:	d930      	bls.n	8009282 <_dtoa_r+0x2aa>
 8009220:	6079      	str	r1, [r7, #4]
 8009222:	4630      	mov	r0, r6
 8009224:	930d      	str	r3, [sp, #52]	; 0x34
 8009226:	f000 fd43 	bl	8009cb0 <_Balloc>
 800922a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800922c:	9001      	str	r0, [sp, #4]
 800922e:	4602      	mov	r2, r0
 8009230:	2800      	cmp	r0, #0
 8009232:	d145      	bne.n	80092c0 <_dtoa_r+0x2e8>
 8009234:	4b21      	ldr	r3, [pc, #132]	; (80092bc <_dtoa_r+0x2e4>)
 8009236:	f240 11af 	movw	r1, #431	; 0x1af
 800923a:	e6e5      	b.n	8009008 <_dtoa_r+0x30>
 800923c:	2201      	movs	r2, #1
 800923e:	e7de      	b.n	80091fe <_dtoa_r+0x226>
 8009240:	2200      	movs	r2, #0
 8009242:	9207      	str	r2, [sp, #28]
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	eb0b 0a02 	add.w	sl, fp, r2
 800924a:	f10a 0901 	add.w	r9, sl, #1
 800924e:	464a      	mov	r2, r9
 8009250:	2a01      	cmp	r2, #1
 8009252:	bfb8      	it	lt
 8009254:	2201      	movlt	r2, #1
 8009256:	e7dc      	b.n	8009212 <_dtoa_r+0x23a>
 8009258:	2201      	movs	r2, #1
 800925a:	e7f2      	b.n	8009242 <_dtoa_r+0x26a>
 800925c:	2401      	movs	r4, #1
 800925e:	2200      	movs	r2, #0
 8009260:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009264:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009268:	2100      	movs	r1, #0
 800926a:	46d1      	mov	r9, sl
 800926c:	2212      	movs	r2, #18
 800926e:	9108      	str	r1, [sp, #32]
 8009270:	e7cf      	b.n	8009212 <_dtoa_r+0x23a>
 8009272:	2201      	movs	r2, #1
 8009274:	9207      	str	r2, [sp, #28]
 8009276:	e7f5      	b.n	8009264 <_dtoa_r+0x28c>
 8009278:	f8dd a020 	ldr.w	sl, [sp, #32]
 800927c:	46d1      	mov	r9, sl
 800927e:	4652      	mov	r2, sl
 8009280:	e7c7      	b.n	8009212 <_dtoa_r+0x23a>
 8009282:	3101      	adds	r1, #1
 8009284:	0040      	lsls	r0, r0, #1
 8009286:	e7c7      	b.n	8009218 <_dtoa_r+0x240>
 8009288:	636f4361 	.word	0x636f4361
 800928c:	3fd287a7 	.word	0x3fd287a7
 8009290:	8b60c8b3 	.word	0x8b60c8b3
 8009294:	3fc68a28 	.word	0x3fc68a28
 8009298:	509f79fb 	.word	0x509f79fb
 800929c:	3fd34413 	.word	0x3fd34413
 80092a0:	0800aad5 	.word	0x0800aad5
 80092a4:	0800aaec 	.word	0x0800aaec
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	0800aad1 	.word	0x0800aad1
 80092b0:	0800aac8 	.word	0x0800aac8
 80092b4:	0800aaa5 	.word	0x0800aaa5
 80092b8:	0800abd8 	.word	0x0800abd8
 80092bc:	0800ab44 	.word	0x0800ab44
 80092c0:	69f2      	ldr	r2, [r6, #28]
 80092c2:	9901      	ldr	r1, [sp, #4]
 80092c4:	6011      	str	r1, [r2, #0]
 80092c6:	f1b9 0f0e 	cmp.w	r9, #14
 80092ca:	d86c      	bhi.n	80093a6 <_dtoa_r+0x3ce>
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d06a      	beq.n	80093a6 <_dtoa_r+0x3ce>
 80092d0:	f1bb 0f00 	cmp.w	fp, #0
 80092d4:	f340 80a0 	ble.w	8009418 <_dtoa_r+0x440>
 80092d8:	4ac1      	ldr	r2, [pc, #772]	; (80095e0 <_dtoa_r+0x608>)
 80092da:	f00b 010f 	and.w	r1, fp, #15
 80092de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80092e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80092e6:	ed92 7b00 	vldr	d7, [r2]
 80092ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 80092ee:	f000 8087 	beq.w	8009400 <_dtoa_r+0x428>
 80092f2:	49bc      	ldr	r1, [pc, #752]	; (80095e4 <_dtoa_r+0x60c>)
 80092f4:	ed91 6b08 	vldr	d6, [r1, #32]
 80092f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80092fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009300:	f002 020f 	and.w	r2, r2, #15
 8009304:	2103      	movs	r1, #3
 8009306:	48b7      	ldr	r0, [pc, #732]	; (80095e4 <_dtoa_r+0x60c>)
 8009308:	2a00      	cmp	r2, #0
 800930a:	d17b      	bne.n	8009404 <_dtoa_r+0x42c>
 800930c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009310:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009314:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800931a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800931e:	2a00      	cmp	r2, #0
 8009320:	f000 80a0 	beq.w	8009464 <_dtoa_r+0x48c>
 8009324:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009328:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009330:	f140 8098 	bpl.w	8009464 <_dtoa_r+0x48c>
 8009334:	f1b9 0f00 	cmp.w	r9, #0
 8009338:	f000 8094 	beq.w	8009464 <_dtoa_r+0x48c>
 800933c:	f1ba 0f00 	cmp.w	sl, #0
 8009340:	dd2f      	ble.n	80093a2 <_dtoa_r+0x3ca>
 8009342:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009346:	ee27 7b06 	vmul.f64	d7, d7, d6
 800934a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800934e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009352:	3101      	adds	r1, #1
 8009354:	4654      	mov	r4, sl
 8009356:	ed9d 6b02 	vldr	d6, [sp, #8]
 800935a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800935e:	ee07 1a90 	vmov	s15, r1
 8009362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009366:	eea7 5b06 	vfma.f64	d5, d7, d6
 800936a:	ee15 7a90 	vmov	r7, s11
 800936e:	ec51 0b15 	vmov	r0, r1, d5
 8009372:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009376:	2c00      	cmp	r4, #0
 8009378:	d177      	bne.n	800946a <_dtoa_r+0x492>
 800937a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800937e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009382:	ec41 0b17 	vmov	d7, r0, r1
 8009386:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800938a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938e:	f300 826a 	bgt.w	8009866 <_dtoa_r+0x88e>
 8009392:	eeb1 7b47 	vneg.f64	d7, d7
 8009396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939e:	f100 8260 	bmi.w	8009862 <_dtoa_r+0x88a>
 80093a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	f2c0 811d 	blt.w	80095e8 <_dtoa_r+0x610>
 80093ae:	f1bb 0f0e 	cmp.w	fp, #14
 80093b2:	f300 8119 	bgt.w	80095e8 <_dtoa_r+0x610>
 80093b6:	4b8a      	ldr	r3, [pc, #552]	; (80095e0 <_dtoa_r+0x608>)
 80093b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093bc:	ed93 6b00 	vldr	d6, [r3]
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f280 80b7 	bge.w	8009536 <_dtoa_r+0x55e>
 80093c8:	f1b9 0f00 	cmp.w	r9, #0
 80093cc:	f300 80b3 	bgt.w	8009536 <_dtoa_r+0x55e>
 80093d0:	f040 8246 	bne.w	8009860 <_dtoa_r+0x888>
 80093d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80093d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80093dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e8:	464c      	mov	r4, r9
 80093ea:	464f      	mov	r7, r9
 80093ec:	f280 821c 	bge.w	8009828 <_dtoa_r+0x850>
 80093f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093f4:	2331      	movs	r3, #49	; 0x31
 80093f6:	f808 3b01 	strb.w	r3, [r8], #1
 80093fa:	f10b 0b01 	add.w	fp, fp, #1
 80093fe:	e218      	b.n	8009832 <_dtoa_r+0x85a>
 8009400:	2102      	movs	r1, #2
 8009402:	e780      	b.n	8009306 <_dtoa_r+0x32e>
 8009404:	07d4      	lsls	r4, r2, #31
 8009406:	d504      	bpl.n	8009412 <_dtoa_r+0x43a>
 8009408:	ed90 6b00 	vldr	d6, [r0]
 800940c:	3101      	adds	r1, #1
 800940e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009412:	1052      	asrs	r2, r2, #1
 8009414:	3008      	adds	r0, #8
 8009416:	e777      	b.n	8009308 <_dtoa_r+0x330>
 8009418:	d022      	beq.n	8009460 <_dtoa_r+0x488>
 800941a:	f1cb 0200 	rsb	r2, fp, #0
 800941e:	4970      	ldr	r1, [pc, #448]	; (80095e0 <_dtoa_r+0x608>)
 8009420:	f002 000f 	and.w	r0, r2, #15
 8009424:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009428:	ed91 7b00 	vldr	d7, [r1]
 800942c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009430:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009434:	486b      	ldr	r0, [pc, #428]	; (80095e4 <_dtoa_r+0x60c>)
 8009436:	1112      	asrs	r2, r2, #4
 8009438:	2400      	movs	r4, #0
 800943a:	2102      	movs	r1, #2
 800943c:	b92a      	cbnz	r2, 800944a <_dtoa_r+0x472>
 800943e:	2c00      	cmp	r4, #0
 8009440:	f43f af6a 	beq.w	8009318 <_dtoa_r+0x340>
 8009444:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009448:	e766      	b.n	8009318 <_dtoa_r+0x340>
 800944a:	07d7      	lsls	r7, r2, #31
 800944c:	d505      	bpl.n	800945a <_dtoa_r+0x482>
 800944e:	ed90 6b00 	vldr	d6, [r0]
 8009452:	3101      	adds	r1, #1
 8009454:	2401      	movs	r4, #1
 8009456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800945a:	1052      	asrs	r2, r2, #1
 800945c:	3008      	adds	r0, #8
 800945e:	e7ed      	b.n	800943c <_dtoa_r+0x464>
 8009460:	2102      	movs	r1, #2
 8009462:	e759      	b.n	8009318 <_dtoa_r+0x340>
 8009464:	465a      	mov	r2, fp
 8009466:	464c      	mov	r4, r9
 8009468:	e775      	b.n	8009356 <_dtoa_r+0x37e>
 800946a:	ec41 0b17 	vmov	d7, r0, r1
 800946e:	495c      	ldr	r1, [pc, #368]	; (80095e0 <_dtoa_r+0x608>)
 8009470:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009474:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009478:	9901      	ldr	r1, [sp, #4]
 800947a:	440c      	add	r4, r1
 800947c:	9907      	ldr	r1, [sp, #28]
 800947e:	b351      	cbz	r1, 80094d6 <_dtoa_r+0x4fe>
 8009480:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009484:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800948c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009494:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009498:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800949c:	ee14 1a90 	vmov	r1, s9
 80094a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80094a4:	3130      	adds	r1, #48	; 0x30
 80094a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80094aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b2:	f808 1b01 	strb.w	r1, [r8], #1
 80094b6:	d439      	bmi.n	800952c <_dtoa_r+0x554>
 80094b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80094bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d472      	bmi.n	80095ac <_dtoa_r+0x5d4>
 80094c6:	45a0      	cmp	r8, r4
 80094c8:	f43f af6b 	beq.w	80093a2 <_dtoa_r+0x3ca>
 80094cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80094d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80094d4:	e7e0      	b.n	8009498 <_dtoa_r+0x4c0>
 80094d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80094de:	4620      	mov	r0, r4
 80094e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80094e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80094e8:	ee14 1a90 	vmov	r1, s9
 80094ec:	3130      	adds	r1, #48	; 0x30
 80094ee:	f808 1b01 	strb.w	r1, [r8], #1
 80094f2:	45a0      	cmp	r8, r4
 80094f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80094f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80094fc:	d118      	bne.n	8009530 <_dtoa_r+0x558>
 80094fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009502:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009506:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	dc4d      	bgt.n	80095ac <_dtoa_r+0x5d4>
 8009510:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009514:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951c:	f57f af41 	bpl.w	80093a2 <_dtoa_r+0x3ca>
 8009520:	4680      	mov	r8, r0
 8009522:	3801      	subs	r0, #1
 8009524:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009528:	2b30      	cmp	r3, #48	; 0x30
 800952a:	d0f9      	beq.n	8009520 <_dtoa_r+0x548>
 800952c:	4693      	mov	fp, r2
 800952e:	e02a      	b.n	8009586 <_dtoa_r+0x5ae>
 8009530:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009534:	e7d6      	b.n	80094e4 <_dtoa_r+0x50c>
 8009536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800953a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800953e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009542:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009546:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800954a:	ee15 3a10 	vmov	r3, s10
 800954e:	3330      	adds	r3, #48	; 0x30
 8009550:	f808 3b01 	strb.w	r3, [r8], #1
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	eba8 0303 	sub.w	r3, r8, r3
 800955a:	4599      	cmp	r9, r3
 800955c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009560:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009564:	d133      	bne.n	80095ce <_dtoa_r+0x5f6>
 8009566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800956a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	dc1a      	bgt.n	80095aa <_dtoa_r+0x5d2>
 8009574:	eeb4 7b46 	vcmp.f64	d7, d6
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	d103      	bne.n	8009586 <_dtoa_r+0x5ae>
 800957e:	ee15 3a10 	vmov	r3, s10
 8009582:	07d9      	lsls	r1, r3, #31
 8009584:	d411      	bmi.n	80095aa <_dtoa_r+0x5d2>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fbd1 	bl	8009d30 <_Bfree>
 800958e:	2300      	movs	r3, #0
 8009590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009592:	f888 3000 	strb.w	r3, [r8]
 8009596:	f10b 0301 	add.w	r3, fp, #1
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f43f ad69 	beq.w	8009076 <_dtoa_r+0x9e>
 80095a4:	f8c3 8000 	str.w	r8, [r3]
 80095a8:	e565      	b.n	8009076 <_dtoa_r+0x9e>
 80095aa:	465a      	mov	r2, fp
 80095ac:	4643      	mov	r3, r8
 80095ae:	4698      	mov	r8, r3
 80095b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80095b4:	2939      	cmp	r1, #57	; 0x39
 80095b6:	d106      	bne.n	80095c6 <_dtoa_r+0x5ee>
 80095b8:	9901      	ldr	r1, [sp, #4]
 80095ba:	4299      	cmp	r1, r3
 80095bc:	d1f7      	bne.n	80095ae <_dtoa_r+0x5d6>
 80095be:	9801      	ldr	r0, [sp, #4]
 80095c0:	2130      	movs	r1, #48	; 0x30
 80095c2:	3201      	adds	r2, #1
 80095c4:	7001      	strb	r1, [r0, #0]
 80095c6:	7819      	ldrb	r1, [r3, #0]
 80095c8:	3101      	adds	r1, #1
 80095ca:	7019      	strb	r1, [r3, #0]
 80095cc:	e7ae      	b.n	800952c <_dtoa_r+0x554>
 80095ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095da:	d1b2      	bne.n	8009542 <_dtoa_r+0x56a>
 80095dc:	e7d3      	b.n	8009586 <_dtoa_r+0x5ae>
 80095de:	bf00      	nop
 80095e0:	0800abd8 	.word	0x0800abd8
 80095e4:	0800abb0 	.word	0x0800abb0
 80095e8:	9907      	ldr	r1, [sp, #28]
 80095ea:	2900      	cmp	r1, #0
 80095ec:	f000 80d0 	beq.w	8009790 <_dtoa_r+0x7b8>
 80095f0:	9906      	ldr	r1, [sp, #24]
 80095f2:	2901      	cmp	r1, #1
 80095f4:	f300 80b4 	bgt.w	8009760 <_dtoa_r+0x788>
 80095f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095fa:	2900      	cmp	r1, #0
 80095fc:	f000 80ac 	beq.w	8009758 <_dtoa_r+0x780>
 8009600:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009604:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009608:	461c      	mov	r4, r3
 800960a:	9309      	str	r3, [sp, #36]	; 0x24
 800960c:	9b04      	ldr	r3, [sp, #16]
 800960e:	4413      	add	r3, r2
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	2101      	movs	r1, #1
 8009616:	4413      	add	r3, r2
 8009618:	4630      	mov	r0, r6
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	f000 fc3e 	bl	8009e9c <__i2b>
 8009620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009622:	4607      	mov	r7, r0
 8009624:	f1b8 0f00 	cmp.w	r8, #0
 8009628:	d00d      	beq.n	8009646 <_dtoa_r+0x66e>
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	2a00      	cmp	r2, #0
 800962e:	dd0a      	ble.n	8009646 <_dtoa_r+0x66e>
 8009630:	4542      	cmp	r2, r8
 8009632:	9904      	ldr	r1, [sp, #16]
 8009634:	bfa8      	it	ge
 8009636:	4642      	movge	r2, r8
 8009638:	1a89      	subs	r1, r1, r2
 800963a:	9104      	str	r1, [sp, #16]
 800963c:	9905      	ldr	r1, [sp, #20]
 800963e:	eba8 0802 	sub.w	r8, r8, r2
 8009642:	1a8a      	subs	r2, r1, r2
 8009644:	9205      	str	r2, [sp, #20]
 8009646:	b303      	cbz	r3, 800968a <_dtoa_r+0x6b2>
 8009648:	9a07      	ldr	r2, [sp, #28]
 800964a:	2a00      	cmp	r2, #0
 800964c:	f000 80a5 	beq.w	800979a <_dtoa_r+0x7c2>
 8009650:	2c00      	cmp	r4, #0
 8009652:	dd13      	ble.n	800967c <_dtoa_r+0x6a4>
 8009654:	4639      	mov	r1, r7
 8009656:	4622      	mov	r2, r4
 8009658:	4630      	mov	r0, r6
 800965a:	930d      	str	r3, [sp, #52]	; 0x34
 800965c:	f000 fcde 	bl	800a01c <__pow5mult>
 8009660:	462a      	mov	r2, r5
 8009662:	4601      	mov	r1, r0
 8009664:	4607      	mov	r7, r0
 8009666:	4630      	mov	r0, r6
 8009668:	f000 fc2e 	bl	8009ec8 <__multiply>
 800966c:	4629      	mov	r1, r5
 800966e:	9009      	str	r0, [sp, #36]	; 0x24
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fb5d 	bl	8009d30 <_Bfree>
 8009676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800967a:	4615      	mov	r5, r2
 800967c:	1b1a      	subs	r2, r3, r4
 800967e:	d004      	beq.n	800968a <_dtoa_r+0x6b2>
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f000 fcca 	bl	800a01c <__pow5mult>
 8009688:	4605      	mov	r5, r0
 800968a:	2101      	movs	r1, #1
 800968c:	4630      	mov	r0, r6
 800968e:	f000 fc05 	bl	8009e9c <__i2b>
 8009692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009694:	2b00      	cmp	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	f340 8081 	ble.w	800979e <_dtoa_r+0x7c6>
 800969c:	461a      	mov	r2, r3
 800969e:	4601      	mov	r1, r0
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 fcbb 	bl	800a01c <__pow5mult>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	4604      	mov	r4, r0
 80096ac:	dd7a      	ble.n	80097a4 <_dtoa_r+0x7cc>
 80096ae:	2300      	movs	r3, #0
 80096b0:	9309      	str	r3, [sp, #36]	; 0x24
 80096b2:	6922      	ldr	r2, [r4, #16]
 80096b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80096b8:	6910      	ldr	r0, [r2, #16]
 80096ba:	f000 fba1 	bl	8009e00 <__hi0bits>
 80096be:	f1c0 0020 	rsb	r0, r0, #32
 80096c2:	9b05      	ldr	r3, [sp, #20]
 80096c4:	4418      	add	r0, r3
 80096c6:	f010 001f 	ands.w	r0, r0, #31
 80096ca:	f000 8093 	beq.w	80097f4 <_dtoa_r+0x81c>
 80096ce:	f1c0 0220 	rsb	r2, r0, #32
 80096d2:	2a04      	cmp	r2, #4
 80096d4:	f340 8085 	ble.w	80097e2 <_dtoa_r+0x80a>
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	f1c0 001c 	rsb	r0, r0, #28
 80096de:	4403      	add	r3, r0
 80096e0:	9304      	str	r3, [sp, #16]
 80096e2:	9b05      	ldr	r3, [sp, #20]
 80096e4:	4480      	add	r8, r0
 80096e6:	4403      	add	r3, r0
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd05      	ble.n	80096fc <_dtoa_r+0x724>
 80096f0:	4629      	mov	r1, r5
 80096f2:	461a      	mov	r2, r3
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 fceb 	bl	800a0d0 <__lshift>
 80096fa:	4605      	mov	r5, r0
 80096fc:	9b05      	ldr	r3, [sp, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dd05      	ble.n	800970e <_dtoa_r+0x736>
 8009702:	4621      	mov	r1, r4
 8009704:	461a      	mov	r2, r3
 8009706:	4630      	mov	r0, r6
 8009708:	f000 fce2 	bl	800a0d0 <__lshift>
 800970c:	4604      	mov	r4, r0
 800970e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d071      	beq.n	80097f8 <_dtoa_r+0x820>
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 fd46 	bl	800a1a8 <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	da6b      	bge.n	80097f8 <_dtoa_r+0x820>
 8009720:	2300      	movs	r3, #0
 8009722:	4629      	mov	r1, r5
 8009724:	220a      	movs	r2, #10
 8009726:	4630      	mov	r0, r6
 8009728:	f000 fb24 	bl	8009d74 <__multadd>
 800972c:	9b07      	ldr	r3, [sp, #28]
 800972e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009732:	4605      	mov	r5, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 8197 	beq.w	8009a68 <_dtoa_r+0xa90>
 800973a:	4639      	mov	r1, r7
 800973c:	2300      	movs	r3, #0
 800973e:	220a      	movs	r2, #10
 8009740:	4630      	mov	r0, r6
 8009742:	f000 fb17 	bl	8009d74 <__multadd>
 8009746:	f1ba 0f00 	cmp.w	sl, #0
 800974a:	4607      	mov	r7, r0
 800974c:	f300 8093 	bgt.w	8009876 <_dtoa_r+0x89e>
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	2b02      	cmp	r3, #2
 8009754:	dc57      	bgt.n	8009806 <_dtoa_r+0x82e>
 8009756:	e08e      	b.n	8009876 <_dtoa_r+0x89e>
 8009758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800975e:	e751      	b.n	8009604 <_dtoa_r+0x62c>
 8009760:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8009764:	42a3      	cmp	r3, r4
 8009766:	bfbf      	itttt	lt
 8009768:	1ae2      	sublt	r2, r4, r3
 800976a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800976c:	189b      	addlt	r3, r3, r2
 800976e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009770:	bfae      	itee	ge
 8009772:	1b1c      	subge	r4, r3, r4
 8009774:	4623      	movlt	r3, r4
 8009776:	2400      	movlt	r4, #0
 8009778:	f1b9 0f00 	cmp.w	r9, #0
 800977c:	bfb5      	itete	lt
 800977e:	9a04      	ldrlt	r2, [sp, #16]
 8009780:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009784:	eba2 0809 	sublt.w	r8, r2, r9
 8009788:	464a      	movge	r2, r9
 800978a:	bfb8      	it	lt
 800978c:	2200      	movlt	r2, #0
 800978e:	e73c      	b.n	800960a <_dtoa_r+0x632>
 8009790:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009794:	9f07      	ldr	r7, [sp, #28]
 8009796:	461c      	mov	r4, r3
 8009798:	e744      	b.n	8009624 <_dtoa_r+0x64c>
 800979a:	461a      	mov	r2, r3
 800979c:	e770      	b.n	8009680 <_dtoa_r+0x6a8>
 800979e:	9b06      	ldr	r3, [sp, #24]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	dc18      	bgt.n	80097d6 <_dtoa_r+0x7fe>
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	b9b3      	cbnz	r3, 80097d6 <_dtoa_r+0x7fe>
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80097ae:	b9a2      	cbnz	r2, 80097da <_dtoa_r+0x802>
 80097b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097b4:	0d12      	lsrs	r2, r2, #20
 80097b6:	0512      	lsls	r2, r2, #20
 80097b8:	b18a      	cbz	r2, 80097de <_dtoa_r+0x806>
 80097ba:	9b04      	ldr	r3, [sp, #16]
 80097bc:	3301      	adds	r3, #1
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	3301      	adds	r3, #1
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	2301      	movs	r3, #1
 80097c8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f47f af70 	bne.w	80096b2 <_dtoa_r+0x6da>
 80097d2:	2001      	movs	r0, #1
 80097d4:	e775      	b.n	80096c2 <_dtoa_r+0x6ea>
 80097d6:	2300      	movs	r3, #0
 80097d8:	e7f6      	b.n	80097c8 <_dtoa_r+0x7f0>
 80097da:	9b02      	ldr	r3, [sp, #8]
 80097dc:	e7f4      	b.n	80097c8 <_dtoa_r+0x7f0>
 80097de:	9209      	str	r2, [sp, #36]	; 0x24
 80097e0:	e7f3      	b.n	80097ca <_dtoa_r+0x7f2>
 80097e2:	d082      	beq.n	80096ea <_dtoa_r+0x712>
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	321c      	adds	r2, #28
 80097e8:	4413      	add	r3, r2
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	9b05      	ldr	r3, [sp, #20]
 80097ee:	4490      	add	r8, r2
 80097f0:	4413      	add	r3, r2
 80097f2:	e779      	b.n	80096e8 <_dtoa_r+0x710>
 80097f4:	4602      	mov	r2, r0
 80097f6:	e7f5      	b.n	80097e4 <_dtoa_r+0x80c>
 80097f8:	f1b9 0f00 	cmp.w	r9, #0
 80097fc:	dc36      	bgt.n	800986c <_dtoa_r+0x894>
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	2b02      	cmp	r3, #2
 8009802:	dd33      	ble.n	800986c <_dtoa_r+0x894>
 8009804:	46ca      	mov	sl, r9
 8009806:	f1ba 0f00 	cmp.w	sl, #0
 800980a:	d10d      	bne.n	8009828 <_dtoa_r+0x850>
 800980c:	4621      	mov	r1, r4
 800980e:	4653      	mov	r3, sl
 8009810:	2205      	movs	r2, #5
 8009812:	4630      	mov	r0, r6
 8009814:	f000 faae 	bl	8009d74 <__multadd>
 8009818:	4601      	mov	r1, r0
 800981a:	4604      	mov	r4, r0
 800981c:	4628      	mov	r0, r5
 800981e:	f000 fcc3 	bl	800a1a8 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	f73f ade4 	bgt.w	80093f0 <_dtoa_r+0x418>
 8009828:	9b08      	ldr	r3, [sp, #32]
 800982a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800982e:	ea6f 0b03 	mvn.w	fp, r3
 8009832:	f04f 0900 	mov.w	r9, #0
 8009836:	4621      	mov	r1, r4
 8009838:	4630      	mov	r0, r6
 800983a:	f000 fa79 	bl	8009d30 <_Bfree>
 800983e:	2f00      	cmp	r7, #0
 8009840:	f43f aea1 	beq.w	8009586 <_dtoa_r+0x5ae>
 8009844:	f1b9 0f00 	cmp.w	r9, #0
 8009848:	d005      	beq.n	8009856 <_dtoa_r+0x87e>
 800984a:	45b9      	cmp	r9, r7
 800984c:	d003      	beq.n	8009856 <_dtoa_r+0x87e>
 800984e:	4649      	mov	r1, r9
 8009850:	4630      	mov	r0, r6
 8009852:	f000 fa6d 	bl	8009d30 <_Bfree>
 8009856:	4639      	mov	r1, r7
 8009858:	4630      	mov	r0, r6
 800985a:	f000 fa69 	bl	8009d30 <_Bfree>
 800985e:	e692      	b.n	8009586 <_dtoa_r+0x5ae>
 8009860:	2400      	movs	r4, #0
 8009862:	4627      	mov	r7, r4
 8009864:	e7e0      	b.n	8009828 <_dtoa_r+0x850>
 8009866:	4693      	mov	fp, r2
 8009868:	4627      	mov	r7, r4
 800986a:	e5c1      	b.n	80093f0 <_dtoa_r+0x418>
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	46ca      	mov	sl, r9
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 8100 	beq.w	8009a76 <_dtoa_r+0xa9e>
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	dd05      	ble.n	8009888 <_dtoa_r+0x8b0>
 800987c:	4639      	mov	r1, r7
 800987e:	4642      	mov	r2, r8
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fc25 	bl	800a0d0 <__lshift>
 8009886:	4607      	mov	r7, r0
 8009888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d05d      	beq.n	800994a <_dtoa_r+0x972>
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4630      	mov	r0, r6
 8009892:	f000 fa0d 	bl	8009cb0 <_Balloc>
 8009896:	4680      	mov	r8, r0
 8009898:	b928      	cbnz	r0, 80098a6 <_dtoa_r+0x8ce>
 800989a:	4b82      	ldr	r3, [pc, #520]	; (8009aa4 <_dtoa_r+0xacc>)
 800989c:	4602      	mov	r2, r0
 800989e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098a2:	f7ff bbb1 	b.w	8009008 <_dtoa_r+0x30>
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	3202      	adds	r2, #2
 80098aa:	0092      	lsls	r2, r2, #2
 80098ac:	f107 010c 	add.w	r1, r7, #12
 80098b0:	300c      	adds	r0, #12
 80098b2:	f7ff fafa 	bl	8008eaa <memcpy>
 80098b6:	2201      	movs	r2, #1
 80098b8:	4641      	mov	r1, r8
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 fc08 	bl	800a0d0 <__lshift>
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	3301      	adds	r3, #1
 80098c4:	9304      	str	r3, [sp, #16]
 80098c6:	9b01      	ldr	r3, [sp, #4]
 80098c8:	4453      	add	r3, sl
 80098ca:	9308      	str	r3, [sp, #32]
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	46b9      	mov	r9, r7
 80098d4:	9307      	str	r3, [sp, #28]
 80098d6:	4607      	mov	r7, r0
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	4621      	mov	r1, r4
 80098dc:	3b01      	subs	r3, #1
 80098de:	4628      	mov	r0, r5
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	f7ff faf0 	bl	8008ec6 <quorem>
 80098e6:	4603      	mov	r3, r0
 80098e8:	3330      	adds	r3, #48	; 0x30
 80098ea:	9005      	str	r0, [sp, #20]
 80098ec:	4649      	mov	r1, r9
 80098ee:	4628      	mov	r0, r5
 80098f0:	9309      	str	r3, [sp, #36]	; 0x24
 80098f2:	f000 fc59 	bl	800a1a8 <__mcmp>
 80098f6:	463a      	mov	r2, r7
 80098f8:	4682      	mov	sl, r0
 80098fa:	4621      	mov	r1, r4
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 fc6f 	bl	800a1e0 <__mdiff>
 8009902:	68c2      	ldr	r2, [r0, #12]
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	4680      	mov	r8, r0
 8009908:	bb0a      	cbnz	r2, 800994e <_dtoa_r+0x976>
 800990a:	4601      	mov	r1, r0
 800990c:	4628      	mov	r0, r5
 800990e:	f000 fc4b 	bl	800a1a8 <__mcmp>
 8009912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009914:	4602      	mov	r2, r0
 8009916:	4641      	mov	r1, r8
 8009918:	4630      	mov	r0, r6
 800991a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800991e:	f000 fa07 	bl	8009d30 <_Bfree>
 8009922:	9b06      	ldr	r3, [sp, #24]
 8009924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009926:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800992a:	ea43 0102 	orr.w	r1, r3, r2
 800992e:	9b07      	ldr	r3, [sp, #28]
 8009930:	4319      	orrs	r1, r3
 8009932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009934:	d10d      	bne.n	8009952 <_dtoa_r+0x97a>
 8009936:	2b39      	cmp	r3, #57	; 0x39
 8009938:	d029      	beq.n	800998e <_dtoa_r+0x9b6>
 800993a:	f1ba 0f00 	cmp.w	sl, #0
 800993e:	dd01      	ble.n	8009944 <_dtoa_r+0x96c>
 8009940:	9b05      	ldr	r3, [sp, #20]
 8009942:	3331      	adds	r3, #49	; 0x31
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	7013      	strb	r3, [r2, #0]
 8009948:	e775      	b.n	8009836 <_dtoa_r+0x85e>
 800994a:	4638      	mov	r0, r7
 800994c:	e7b8      	b.n	80098c0 <_dtoa_r+0x8e8>
 800994e:	2201      	movs	r2, #1
 8009950:	e7e1      	b.n	8009916 <_dtoa_r+0x93e>
 8009952:	f1ba 0f00 	cmp.w	sl, #0
 8009956:	db06      	blt.n	8009966 <_dtoa_r+0x98e>
 8009958:	9906      	ldr	r1, [sp, #24]
 800995a:	ea41 0a0a 	orr.w	sl, r1, sl
 800995e:	9907      	ldr	r1, [sp, #28]
 8009960:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009964:	d120      	bne.n	80099a8 <_dtoa_r+0x9d0>
 8009966:	2a00      	cmp	r2, #0
 8009968:	ddec      	ble.n	8009944 <_dtoa_r+0x96c>
 800996a:	4629      	mov	r1, r5
 800996c:	2201      	movs	r2, #1
 800996e:	4630      	mov	r0, r6
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	f000 fbad 	bl	800a0d0 <__lshift>
 8009976:	4621      	mov	r1, r4
 8009978:	4605      	mov	r5, r0
 800997a:	f000 fc15 	bl	800a1a8 <__mcmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	9b04      	ldr	r3, [sp, #16]
 8009982:	dc02      	bgt.n	800998a <_dtoa_r+0x9b2>
 8009984:	d1de      	bne.n	8009944 <_dtoa_r+0x96c>
 8009986:	07da      	lsls	r2, r3, #31
 8009988:	d5dc      	bpl.n	8009944 <_dtoa_r+0x96c>
 800998a:	2b39      	cmp	r3, #57	; 0x39
 800998c:	d1d8      	bne.n	8009940 <_dtoa_r+0x968>
 800998e:	9a02      	ldr	r2, [sp, #8]
 8009990:	2339      	movs	r3, #57	; 0x39
 8009992:	7013      	strb	r3, [r2, #0]
 8009994:	4643      	mov	r3, r8
 8009996:	4698      	mov	r8, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800999e:	2a39      	cmp	r2, #57	; 0x39
 80099a0:	d051      	beq.n	8009a46 <_dtoa_r+0xa6e>
 80099a2:	3201      	adds	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e746      	b.n	8009836 <_dtoa_r+0x85e>
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	dd03      	ble.n	80099b4 <_dtoa_r+0x9dc>
 80099ac:	2b39      	cmp	r3, #57	; 0x39
 80099ae:	d0ee      	beq.n	800998e <_dtoa_r+0x9b6>
 80099b0:	3301      	adds	r3, #1
 80099b2:	e7c7      	b.n	8009944 <_dtoa_r+0x96c>
 80099b4:	9a04      	ldr	r2, [sp, #16]
 80099b6:	9908      	ldr	r1, [sp, #32]
 80099b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099bc:	428a      	cmp	r2, r1
 80099be:	d02b      	beq.n	8009a18 <_dtoa_r+0xa40>
 80099c0:	4629      	mov	r1, r5
 80099c2:	2300      	movs	r3, #0
 80099c4:	220a      	movs	r2, #10
 80099c6:	4630      	mov	r0, r6
 80099c8:	f000 f9d4 	bl	8009d74 <__multadd>
 80099cc:	45b9      	cmp	r9, r7
 80099ce:	4605      	mov	r5, r0
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	f04f 020a 	mov.w	r2, #10
 80099d8:	4649      	mov	r1, r9
 80099da:	4630      	mov	r0, r6
 80099dc:	d107      	bne.n	80099ee <_dtoa_r+0xa16>
 80099de:	f000 f9c9 	bl	8009d74 <__multadd>
 80099e2:	4681      	mov	r9, r0
 80099e4:	4607      	mov	r7, r0
 80099e6:	9b04      	ldr	r3, [sp, #16]
 80099e8:	3301      	adds	r3, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	e774      	b.n	80098d8 <_dtoa_r+0x900>
 80099ee:	f000 f9c1 	bl	8009d74 <__multadd>
 80099f2:	4639      	mov	r1, r7
 80099f4:	4681      	mov	r9, r0
 80099f6:	2300      	movs	r3, #0
 80099f8:	220a      	movs	r2, #10
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 f9ba 	bl	8009d74 <__multadd>
 8009a00:	4607      	mov	r7, r0
 8009a02:	e7f0      	b.n	80099e6 <_dtoa_r+0xa0e>
 8009a04:	f1ba 0f00 	cmp.w	sl, #0
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	bfcc      	ite	gt
 8009a0c:	46d0      	movgt	r8, sl
 8009a0e:	f04f 0801 	movle.w	r8, #1
 8009a12:	4490      	add	r8, r2
 8009a14:	f04f 0900 	mov.w	r9, #0
 8009a18:	4629      	mov	r1, r5
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	f000 fb56 	bl	800a0d0 <__lshift>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4605      	mov	r5, r0
 8009a28:	f000 fbbe 	bl	800a1a8 <__mcmp>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	dcb1      	bgt.n	8009994 <_dtoa_r+0x9bc>
 8009a30:	d102      	bne.n	8009a38 <_dtoa_r+0xa60>
 8009a32:	9b02      	ldr	r3, [sp, #8]
 8009a34:	07db      	lsls	r3, r3, #31
 8009a36:	d4ad      	bmi.n	8009994 <_dtoa_r+0x9bc>
 8009a38:	4643      	mov	r3, r8
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a40:	2a30      	cmp	r2, #48	; 0x30
 8009a42:	d0fa      	beq.n	8009a3a <_dtoa_r+0xa62>
 8009a44:	e6f7      	b.n	8009836 <_dtoa_r+0x85e>
 8009a46:	9a01      	ldr	r2, [sp, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d1a4      	bne.n	8009996 <_dtoa_r+0x9be>
 8009a4c:	f10b 0b01 	add.w	fp, fp, #1
 8009a50:	2331      	movs	r3, #49	; 0x31
 8009a52:	e778      	b.n	8009946 <_dtoa_r+0x96e>
 8009a54:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <_dtoa_r+0xad0>)
 8009a56:	f7ff bb2a 	b.w	80090ae <_dtoa_r+0xd6>
 8009a5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f47f ab05 	bne.w	800906c <_dtoa_r+0x94>
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <_dtoa_r+0xad4>)
 8009a64:	f7ff bb23 	b.w	80090ae <_dtoa_r+0xd6>
 8009a68:	f1ba 0f00 	cmp.w	sl, #0
 8009a6c:	dc03      	bgt.n	8009a76 <_dtoa_r+0xa9e>
 8009a6e:	9b06      	ldr	r3, [sp, #24]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f73f aec8 	bgt.w	8009806 <_dtoa_r+0x82e>
 8009a76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f7ff fa22 	bl	8008ec6 <quorem>
 8009a82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a86:	f808 3b01 	strb.w	r3, [r8], #1
 8009a8a:	9a01      	ldr	r2, [sp, #4]
 8009a8c:	eba8 0202 	sub.w	r2, r8, r2
 8009a90:	4592      	cmp	sl, r2
 8009a92:	ddb7      	ble.n	8009a04 <_dtoa_r+0xa2c>
 8009a94:	4629      	mov	r1, r5
 8009a96:	2300      	movs	r3, #0
 8009a98:	220a      	movs	r2, #10
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f96a 	bl	8009d74 <__multadd>
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	e7ea      	b.n	8009a7a <_dtoa_r+0xaa2>
 8009aa4:	0800ab44 	.word	0x0800ab44
 8009aa8:	0800aaa4 	.word	0x0800aaa4
 8009aac:	0800aac8 	.word	0x0800aac8

08009ab0 <_free_r>:
 8009ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	d044      	beq.n	8009b40 <_free_r+0x90>
 8009ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aba:	9001      	str	r0, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f1a1 0404 	sub.w	r4, r1, #4
 8009ac2:	bfb8      	it	lt
 8009ac4:	18e4      	addlt	r4, r4, r3
 8009ac6:	f000 f8e7 	bl	8009c98 <__malloc_lock>
 8009aca:	4a1e      	ldr	r2, [pc, #120]	; (8009b44 <_free_r+0x94>)
 8009acc:	9801      	ldr	r0, [sp, #4]
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	b933      	cbnz	r3, 8009ae0 <_free_r+0x30>
 8009ad2:	6063      	str	r3, [r4, #4]
 8009ad4:	6014      	str	r4, [r2, #0]
 8009ad6:	b003      	add	sp, #12
 8009ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009adc:	f000 b8e2 	b.w	8009ca4 <__malloc_unlock>
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d908      	bls.n	8009af6 <_free_r+0x46>
 8009ae4:	6825      	ldr	r5, [r4, #0]
 8009ae6:	1961      	adds	r1, r4, r5
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	bf01      	itttt	eq
 8009aec:	6819      	ldreq	r1, [r3, #0]
 8009aee:	685b      	ldreq	r3, [r3, #4]
 8009af0:	1949      	addeq	r1, r1, r5
 8009af2:	6021      	streq	r1, [r4, #0]
 8009af4:	e7ed      	b.n	8009ad2 <_free_r+0x22>
 8009af6:	461a      	mov	r2, r3
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b10b      	cbz	r3, 8009b00 <_free_r+0x50>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d9fa      	bls.n	8009af6 <_free_r+0x46>
 8009b00:	6811      	ldr	r1, [r2, #0]
 8009b02:	1855      	adds	r5, r2, r1
 8009b04:	42a5      	cmp	r5, r4
 8009b06:	d10b      	bne.n	8009b20 <_free_r+0x70>
 8009b08:	6824      	ldr	r4, [r4, #0]
 8009b0a:	4421      	add	r1, r4
 8009b0c:	1854      	adds	r4, r2, r1
 8009b0e:	42a3      	cmp	r3, r4
 8009b10:	6011      	str	r1, [r2, #0]
 8009b12:	d1e0      	bne.n	8009ad6 <_free_r+0x26>
 8009b14:	681c      	ldr	r4, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	6053      	str	r3, [r2, #4]
 8009b1a:	440c      	add	r4, r1
 8009b1c:	6014      	str	r4, [r2, #0]
 8009b1e:	e7da      	b.n	8009ad6 <_free_r+0x26>
 8009b20:	d902      	bls.n	8009b28 <_free_r+0x78>
 8009b22:	230c      	movs	r3, #12
 8009b24:	6003      	str	r3, [r0, #0]
 8009b26:	e7d6      	b.n	8009ad6 <_free_r+0x26>
 8009b28:	6825      	ldr	r5, [r4, #0]
 8009b2a:	1961      	adds	r1, r4, r5
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	bf04      	itt	eq
 8009b30:	6819      	ldreq	r1, [r3, #0]
 8009b32:	685b      	ldreq	r3, [r3, #4]
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	bf04      	itt	eq
 8009b38:	1949      	addeq	r1, r1, r5
 8009b3a:	6021      	streq	r1, [r4, #0]
 8009b3c:	6054      	str	r4, [r2, #4]
 8009b3e:	e7ca      	b.n	8009ad6 <_free_r+0x26>
 8009b40:	b003      	add	sp, #12
 8009b42:	bd30      	pop	{r4, r5, pc}
 8009b44:	20000af8 	.word	0x20000af8

08009b48 <malloc>:
 8009b48:	4b02      	ldr	r3, [pc, #8]	; (8009b54 <malloc+0xc>)
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f000 b823 	b.w	8009b98 <_malloc_r>
 8009b52:	bf00      	nop
 8009b54:	20000074 	.word	0x20000074

08009b58 <sbrk_aligned>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	4e0e      	ldr	r6, [pc, #56]	; (8009b94 <sbrk_aligned+0x3c>)
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	6831      	ldr	r1, [r6, #0]
 8009b60:	4605      	mov	r5, r0
 8009b62:	b911      	cbnz	r1, 8009b6a <sbrk_aligned+0x12>
 8009b64:	f000 fe96 	bl	800a894 <_sbrk_r>
 8009b68:	6030      	str	r0, [r6, #0]
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f000 fe91 	bl	800a894 <_sbrk_r>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d00a      	beq.n	8009b8c <sbrk_aligned+0x34>
 8009b76:	1cc4      	adds	r4, r0, #3
 8009b78:	f024 0403 	bic.w	r4, r4, #3
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d007      	beq.n	8009b90 <sbrk_aligned+0x38>
 8009b80:	1a21      	subs	r1, r4, r0
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 fe86 	bl	800a894 <_sbrk_r>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d101      	bne.n	8009b90 <sbrk_aligned+0x38>
 8009b8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b90:	4620      	mov	r0, r4
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	20000afc 	.word	0x20000afc

08009b98 <_malloc_r>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	1ccd      	adds	r5, r1, #3
 8009b9e:	f025 0503 	bic.w	r5, r5, #3
 8009ba2:	3508      	adds	r5, #8
 8009ba4:	2d0c      	cmp	r5, #12
 8009ba6:	bf38      	it	cc
 8009ba8:	250c      	movcc	r5, #12
 8009baa:	2d00      	cmp	r5, #0
 8009bac:	4607      	mov	r7, r0
 8009bae:	db01      	blt.n	8009bb4 <_malloc_r+0x1c>
 8009bb0:	42a9      	cmp	r1, r5
 8009bb2:	d905      	bls.n	8009bc0 <_malloc_r+0x28>
 8009bb4:	230c      	movs	r3, #12
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	2600      	movs	r6, #0
 8009bba:	4630      	mov	r0, r6
 8009bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c94 <_malloc_r+0xfc>
 8009bc4:	f000 f868 	bl	8009c98 <__malloc_lock>
 8009bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bcc:	461c      	mov	r4, r3
 8009bce:	bb5c      	cbnz	r4, 8009c28 <_malloc_r+0x90>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f7ff ffc0 	bl	8009b58 <sbrk_aligned>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	4604      	mov	r4, r0
 8009bdc:	d155      	bne.n	8009c8a <_malloc_r+0xf2>
 8009bde:	f8d8 4000 	ldr.w	r4, [r8]
 8009be2:	4626      	mov	r6, r4
 8009be4:	2e00      	cmp	r6, #0
 8009be6:	d145      	bne.n	8009c74 <_malloc_r+0xdc>
 8009be8:	2c00      	cmp	r4, #0
 8009bea:	d048      	beq.n	8009c7e <_malloc_r+0xe6>
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	eb04 0903 	add.w	r9, r4, r3
 8009bf6:	f000 fe4d 	bl	800a894 <_sbrk_r>
 8009bfa:	4581      	cmp	r9, r0
 8009bfc:	d13f      	bne.n	8009c7e <_malloc_r+0xe6>
 8009bfe:	6821      	ldr	r1, [r4, #0]
 8009c00:	1a6d      	subs	r5, r5, r1
 8009c02:	4629      	mov	r1, r5
 8009c04:	4638      	mov	r0, r7
 8009c06:	f7ff ffa7 	bl	8009b58 <sbrk_aligned>
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d037      	beq.n	8009c7e <_malloc_r+0xe6>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	442b      	add	r3, r5
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	f8d8 3000 	ldr.w	r3, [r8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d038      	beq.n	8009c8e <_malloc_r+0xf6>
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	42a2      	cmp	r2, r4
 8009c20:	d12b      	bne.n	8009c7a <_malloc_r+0xe2>
 8009c22:	2200      	movs	r2, #0
 8009c24:	605a      	str	r2, [r3, #4]
 8009c26:	e00f      	b.n	8009c48 <_malloc_r+0xb0>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	1b52      	subs	r2, r2, r5
 8009c2c:	d41f      	bmi.n	8009c6e <_malloc_r+0xd6>
 8009c2e:	2a0b      	cmp	r2, #11
 8009c30:	d917      	bls.n	8009c62 <_malloc_r+0xca>
 8009c32:	1961      	adds	r1, r4, r5
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	6025      	str	r5, [r4, #0]
 8009c38:	bf18      	it	ne
 8009c3a:	6059      	strne	r1, [r3, #4]
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	bf08      	it	eq
 8009c40:	f8c8 1000 	streq.w	r1, [r8]
 8009c44:	5162      	str	r2, [r4, r5]
 8009c46:	604b      	str	r3, [r1, #4]
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f104 060b 	add.w	r6, r4, #11
 8009c4e:	f000 f829 	bl	8009ca4 <__malloc_unlock>
 8009c52:	f026 0607 	bic.w	r6, r6, #7
 8009c56:	1d23      	adds	r3, r4, #4
 8009c58:	1af2      	subs	r2, r6, r3
 8009c5a:	d0ae      	beq.n	8009bba <_malloc_r+0x22>
 8009c5c:	1b9b      	subs	r3, r3, r6
 8009c5e:	50a3      	str	r3, [r4, r2]
 8009c60:	e7ab      	b.n	8009bba <_malloc_r+0x22>
 8009c62:	42a3      	cmp	r3, r4
 8009c64:	6862      	ldr	r2, [r4, #4]
 8009c66:	d1dd      	bne.n	8009c24 <_malloc_r+0x8c>
 8009c68:	f8c8 2000 	str.w	r2, [r8]
 8009c6c:	e7ec      	b.n	8009c48 <_malloc_r+0xb0>
 8009c6e:	4623      	mov	r3, r4
 8009c70:	6864      	ldr	r4, [r4, #4]
 8009c72:	e7ac      	b.n	8009bce <_malloc_r+0x36>
 8009c74:	4634      	mov	r4, r6
 8009c76:	6876      	ldr	r6, [r6, #4]
 8009c78:	e7b4      	b.n	8009be4 <_malloc_r+0x4c>
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	e7cc      	b.n	8009c18 <_malloc_r+0x80>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	603b      	str	r3, [r7, #0]
 8009c82:	4638      	mov	r0, r7
 8009c84:	f000 f80e 	bl	8009ca4 <__malloc_unlock>
 8009c88:	e797      	b.n	8009bba <_malloc_r+0x22>
 8009c8a:	6025      	str	r5, [r4, #0]
 8009c8c:	e7dc      	b.n	8009c48 <_malloc_r+0xb0>
 8009c8e:	605b      	str	r3, [r3, #4]
 8009c90:	deff      	udf	#255	; 0xff
 8009c92:	bf00      	nop
 8009c94:	20000af8 	.word	0x20000af8

08009c98 <__malloc_lock>:
 8009c98:	4801      	ldr	r0, [pc, #4]	; (8009ca0 <__malloc_lock+0x8>)
 8009c9a:	f7ff b904 	b.w	8008ea6 <__retarget_lock_acquire_recursive>
 8009c9e:	bf00      	nop
 8009ca0:	20000af4 	.word	0x20000af4

08009ca4 <__malloc_unlock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__malloc_unlock+0x8>)
 8009ca6:	f7ff b8ff 	b.w	8008ea8 <__retarget_lock_release_recursive>
 8009caa:	bf00      	nop
 8009cac:	20000af4 	.word	0x20000af4

08009cb0 <_Balloc>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	69c6      	ldr	r6, [r0, #28]
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	b976      	cbnz	r6, 8009cd8 <_Balloc+0x28>
 8009cba:	2010      	movs	r0, #16
 8009cbc:	f7ff ff44 	bl	8009b48 <malloc>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	61e0      	str	r0, [r4, #28]
 8009cc4:	b920      	cbnz	r0, 8009cd0 <_Balloc+0x20>
 8009cc6:	4b18      	ldr	r3, [pc, #96]	; (8009d28 <_Balloc+0x78>)
 8009cc8:	4818      	ldr	r0, [pc, #96]	; (8009d2c <_Balloc+0x7c>)
 8009cca:	216b      	movs	r1, #107	; 0x6b
 8009ccc:	f000 fdf2 	bl	800a8b4 <__assert_func>
 8009cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cd4:	6006      	str	r6, [r0, #0]
 8009cd6:	60c6      	str	r6, [r0, #12]
 8009cd8:	69e6      	ldr	r6, [r4, #28]
 8009cda:	68f3      	ldr	r3, [r6, #12]
 8009cdc:	b183      	cbz	r3, 8009d00 <_Balloc+0x50>
 8009cde:	69e3      	ldr	r3, [r4, #28]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ce6:	b9b8      	cbnz	r0, 8009d18 <_Balloc+0x68>
 8009ce8:	2101      	movs	r1, #1
 8009cea:	fa01 f605 	lsl.w	r6, r1, r5
 8009cee:	1d72      	adds	r2, r6, #5
 8009cf0:	0092      	lsls	r2, r2, #2
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 fdfc 	bl	800a8f0 <_calloc_r>
 8009cf8:	b160      	cbz	r0, 8009d14 <_Balloc+0x64>
 8009cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cfe:	e00e      	b.n	8009d1e <_Balloc+0x6e>
 8009d00:	2221      	movs	r2, #33	; 0x21
 8009d02:	2104      	movs	r1, #4
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 fdf3 	bl	800a8f0 <_calloc_r>
 8009d0a:	69e3      	ldr	r3, [r4, #28]
 8009d0c:	60f0      	str	r0, [r6, #12]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e4      	bne.n	8009cde <_Balloc+0x2e>
 8009d14:	2000      	movs	r0, #0
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	6802      	ldr	r2, [r0, #0]
 8009d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d24:	e7f7      	b.n	8009d16 <_Balloc+0x66>
 8009d26:	bf00      	nop
 8009d28:	0800aad5 	.word	0x0800aad5
 8009d2c:	0800ab55 	.word	0x0800ab55

08009d30 <_Bfree>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	69c6      	ldr	r6, [r0, #28]
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	b976      	cbnz	r6, 8009d58 <_Bfree+0x28>
 8009d3a:	2010      	movs	r0, #16
 8009d3c:	f7ff ff04 	bl	8009b48 <malloc>
 8009d40:	4602      	mov	r2, r0
 8009d42:	61e8      	str	r0, [r5, #28]
 8009d44:	b920      	cbnz	r0, 8009d50 <_Bfree+0x20>
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <_Bfree+0x3c>)
 8009d48:	4809      	ldr	r0, [pc, #36]	; (8009d70 <_Bfree+0x40>)
 8009d4a:	218f      	movs	r1, #143	; 0x8f
 8009d4c:	f000 fdb2 	bl	800a8b4 <__assert_func>
 8009d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d54:	6006      	str	r6, [r0, #0]
 8009d56:	60c6      	str	r6, [r0, #12]
 8009d58:	b13c      	cbz	r4, 8009d6a <_Bfree+0x3a>
 8009d5a:	69eb      	ldr	r3, [r5, #28]
 8009d5c:	6862      	ldr	r2, [r4, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d64:	6021      	str	r1, [r4, #0]
 8009d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	0800aad5 	.word	0x0800aad5
 8009d70:	0800ab55 	.word	0x0800ab55

08009d74 <__multadd>:
 8009d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d78:	690d      	ldr	r5, [r1, #16]
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	461e      	mov	r6, r3
 8009d80:	f101 0c14 	add.w	ip, r1, #20
 8009d84:	2000      	movs	r0, #0
 8009d86:	f8dc 3000 	ldr.w	r3, [ip]
 8009d8a:	b299      	uxth	r1, r3
 8009d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d90:	0c1e      	lsrs	r6, r3, #16
 8009d92:	0c0b      	lsrs	r3, r1, #16
 8009d94:	fb02 3306 	mla	r3, r2, r6, r3
 8009d98:	b289      	uxth	r1, r1
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009da0:	4285      	cmp	r5, r0
 8009da2:	f84c 1b04 	str.w	r1, [ip], #4
 8009da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009daa:	dcec      	bgt.n	8009d86 <__multadd+0x12>
 8009dac:	b30e      	cbz	r6, 8009df2 <__multadd+0x7e>
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	dc19      	bgt.n	8009de8 <__multadd+0x74>
 8009db4:	6861      	ldr	r1, [r4, #4]
 8009db6:	4638      	mov	r0, r7
 8009db8:	3101      	adds	r1, #1
 8009dba:	f7ff ff79 	bl	8009cb0 <_Balloc>
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	b928      	cbnz	r0, 8009dce <__multadd+0x5a>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <__multadd+0x84>)
 8009dc6:	480d      	ldr	r0, [pc, #52]	; (8009dfc <__multadd+0x88>)
 8009dc8:	21ba      	movs	r1, #186	; 0xba
 8009dca:	f000 fd73 	bl	800a8b4 <__assert_func>
 8009dce:	6922      	ldr	r2, [r4, #16]
 8009dd0:	3202      	adds	r2, #2
 8009dd2:	f104 010c 	add.w	r1, r4, #12
 8009dd6:	0092      	lsls	r2, r2, #2
 8009dd8:	300c      	adds	r0, #12
 8009dda:	f7ff f866 	bl	8008eaa <memcpy>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ffa5 	bl	8009d30 <_Bfree>
 8009de6:	4644      	mov	r4, r8
 8009de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dec:	3501      	adds	r5, #1
 8009dee:	615e      	str	r6, [r3, #20]
 8009df0:	6125      	str	r5, [r4, #16]
 8009df2:	4620      	mov	r0, r4
 8009df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df8:	0800ab44 	.word	0x0800ab44
 8009dfc:	0800ab55 	.word	0x0800ab55

08009e00 <__hi0bits>:
 8009e00:	0c03      	lsrs	r3, r0, #16
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	b9d3      	cbnz	r3, 8009e3c <__hi0bits+0x3c>
 8009e06:	0400      	lsls	r0, r0, #16
 8009e08:	2310      	movs	r3, #16
 8009e0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e0e:	bf04      	itt	eq
 8009e10:	0200      	lsleq	r0, r0, #8
 8009e12:	3308      	addeq	r3, #8
 8009e14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e18:	bf04      	itt	eq
 8009e1a:	0100      	lsleq	r0, r0, #4
 8009e1c:	3304      	addeq	r3, #4
 8009e1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e22:	bf04      	itt	eq
 8009e24:	0080      	lsleq	r0, r0, #2
 8009e26:	3302      	addeq	r3, #2
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	db05      	blt.n	8009e38 <__hi0bits+0x38>
 8009e2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e30:	f103 0301 	add.w	r3, r3, #1
 8009e34:	bf08      	it	eq
 8009e36:	2320      	moveq	r3, #32
 8009e38:	4618      	mov	r0, r3
 8009e3a:	4770      	bx	lr
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e7e4      	b.n	8009e0a <__hi0bits+0xa>

08009e40 <__lo0bits>:
 8009e40:	6803      	ldr	r3, [r0, #0]
 8009e42:	f013 0207 	ands.w	r2, r3, #7
 8009e46:	d00c      	beq.n	8009e62 <__lo0bits+0x22>
 8009e48:	07d9      	lsls	r1, r3, #31
 8009e4a:	d422      	bmi.n	8009e92 <__lo0bits+0x52>
 8009e4c:	079a      	lsls	r2, r3, #30
 8009e4e:	bf49      	itett	mi
 8009e50:	085b      	lsrmi	r3, r3, #1
 8009e52:	089b      	lsrpl	r3, r3, #2
 8009e54:	6003      	strmi	r3, [r0, #0]
 8009e56:	2201      	movmi	r2, #1
 8009e58:	bf5c      	itt	pl
 8009e5a:	6003      	strpl	r3, [r0, #0]
 8009e5c:	2202      	movpl	r2, #2
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4770      	bx	lr
 8009e62:	b299      	uxth	r1, r3
 8009e64:	b909      	cbnz	r1, 8009e6a <__lo0bits+0x2a>
 8009e66:	0c1b      	lsrs	r3, r3, #16
 8009e68:	2210      	movs	r2, #16
 8009e6a:	b2d9      	uxtb	r1, r3
 8009e6c:	b909      	cbnz	r1, 8009e72 <__lo0bits+0x32>
 8009e6e:	3208      	adds	r2, #8
 8009e70:	0a1b      	lsrs	r3, r3, #8
 8009e72:	0719      	lsls	r1, r3, #28
 8009e74:	bf04      	itt	eq
 8009e76:	091b      	lsreq	r3, r3, #4
 8009e78:	3204      	addeq	r2, #4
 8009e7a:	0799      	lsls	r1, r3, #30
 8009e7c:	bf04      	itt	eq
 8009e7e:	089b      	lsreq	r3, r3, #2
 8009e80:	3202      	addeq	r2, #2
 8009e82:	07d9      	lsls	r1, r3, #31
 8009e84:	d403      	bmi.n	8009e8e <__lo0bits+0x4e>
 8009e86:	085b      	lsrs	r3, r3, #1
 8009e88:	f102 0201 	add.w	r2, r2, #1
 8009e8c:	d003      	beq.n	8009e96 <__lo0bits+0x56>
 8009e8e:	6003      	str	r3, [r0, #0]
 8009e90:	e7e5      	b.n	8009e5e <__lo0bits+0x1e>
 8009e92:	2200      	movs	r2, #0
 8009e94:	e7e3      	b.n	8009e5e <__lo0bits+0x1e>
 8009e96:	2220      	movs	r2, #32
 8009e98:	e7e1      	b.n	8009e5e <__lo0bits+0x1e>
	...

08009e9c <__i2b>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	f7ff ff05 	bl	8009cb0 <_Balloc>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	b928      	cbnz	r0, 8009eb6 <__i2b+0x1a>
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <__i2b+0x24>)
 8009eac:	4805      	ldr	r0, [pc, #20]	; (8009ec4 <__i2b+0x28>)
 8009eae:	f240 1145 	movw	r1, #325	; 0x145
 8009eb2:	f000 fcff 	bl	800a8b4 <__assert_func>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	6144      	str	r4, [r0, #20]
 8009eba:	6103      	str	r3, [r0, #16]
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800ab44 	.word	0x0800ab44
 8009ec4:	0800ab55 	.word	0x0800ab55

08009ec8 <__multiply>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4691      	mov	r9, r2
 8009ece:	690a      	ldr	r2, [r1, #16]
 8009ed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	bfb8      	it	lt
 8009ed8:	460b      	movlt	r3, r1
 8009eda:	460c      	mov	r4, r1
 8009edc:	bfbc      	itt	lt
 8009ede:	464c      	movlt	r4, r9
 8009ee0:	4699      	movlt	r9, r3
 8009ee2:	6927      	ldr	r7, [r4, #16]
 8009ee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ee8:	68a3      	ldr	r3, [r4, #8]
 8009eea:	6861      	ldr	r1, [r4, #4]
 8009eec:	eb07 060a 	add.w	r6, r7, sl
 8009ef0:	42b3      	cmp	r3, r6
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	bfb8      	it	lt
 8009ef6:	3101      	addlt	r1, #1
 8009ef8:	f7ff feda 	bl	8009cb0 <_Balloc>
 8009efc:	b930      	cbnz	r0, 8009f0c <__multiply+0x44>
 8009efe:	4602      	mov	r2, r0
 8009f00:	4b44      	ldr	r3, [pc, #272]	; (800a014 <__multiply+0x14c>)
 8009f02:	4845      	ldr	r0, [pc, #276]	; (800a018 <__multiply+0x150>)
 8009f04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009f08:	f000 fcd4 	bl	800a8b4 <__assert_func>
 8009f0c:	f100 0514 	add.w	r5, r0, #20
 8009f10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f14:	462b      	mov	r3, r5
 8009f16:	2200      	movs	r2, #0
 8009f18:	4543      	cmp	r3, r8
 8009f1a:	d321      	bcc.n	8009f60 <__multiply+0x98>
 8009f1c:	f104 0314 	add.w	r3, r4, #20
 8009f20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f24:	f109 0314 	add.w	r3, r9, #20
 8009f28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	1b3a      	subs	r2, r7, r4
 8009f30:	3a15      	subs	r2, #21
 8009f32:	f022 0203 	bic.w	r2, r2, #3
 8009f36:	3204      	adds	r2, #4
 8009f38:	f104 0115 	add.w	r1, r4, #21
 8009f3c:	428f      	cmp	r7, r1
 8009f3e:	bf38      	it	cc
 8009f40:	2204      	movcc	r2, #4
 8009f42:	9201      	str	r2, [sp, #4]
 8009f44:	9a02      	ldr	r2, [sp, #8]
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d80c      	bhi.n	8009f66 <__multiply+0x9e>
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	dd03      	ble.n	8009f58 <__multiply+0x90>
 8009f50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d05b      	beq.n	800a010 <__multiply+0x148>
 8009f58:	6106      	str	r6, [r0, #16]
 8009f5a:	b005      	add	sp, #20
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	f843 2b04 	str.w	r2, [r3], #4
 8009f64:	e7d8      	b.n	8009f18 <__multiply+0x50>
 8009f66:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f6a:	f1ba 0f00 	cmp.w	sl, #0
 8009f6e:	d024      	beq.n	8009fba <__multiply+0xf2>
 8009f70:	f104 0e14 	add.w	lr, r4, #20
 8009f74:	46a9      	mov	r9, r5
 8009f76:	f04f 0c00 	mov.w	ip, #0
 8009f7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f7e:	f8d9 1000 	ldr.w	r1, [r9]
 8009f82:	fa1f fb82 	uxth.w	fp, r2
 8009f86:	b289      	uxth	r1, r1
 8009f88:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f90:	f8d9 2000 	ldr.w	r2, [r9]
 8009f94:	4461      	add	r1, ip
 8009f96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fa2:	b289      	uxth	r1, r1
 8009fa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fa8:	4577      	cmp	r7, lr
 8009faa:	f849 1b04 	str.w	r1, [r9], #4
 8009fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fb2:	d8e2      	bhi.n	8009f7a <__multiply+0xb2>
 8009fb4:	9a01      	ldr	r2, [sp, #4]
 8009fb6:	f845 c002 	str.w	ip, [r5, r2]
 8009fba:	9a03      	ldr	r2, [sp, #12]
 8009fbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	f1b9 0f00 	cmp.w	r9, #0
 8009fc6:	d021      	beq.n	800a00c <__multiply+0x144>
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	f104 0c14 	add.w	ip, r4, #20
 8009fce:	46ae      	mov	lr, r5
 8009fd0:	f04f 0a00 	mov.w	sl, #0
 8009fd4:	f8bc b000 	ldrh.w	fp, [ip]
 8009fd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fdc:	fb09 220b 	mla	r2, r9, fp, r2
 8009fe0:	4452      	add	r2, sl
 8009fe2:	b289      	uxth	r1, r1
 8009fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fe8:	f84e 1b04 	str.w	r1, [lr], #4
 8009fec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ff0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ff4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ff8:	fb09 110a 	mla	r1, r9, sl, r1
 8009ffc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a000:	4567      	cmp	r7, ip
 800a002:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a006:	d8e5      	bhi.n	8009fd4 <__multiply+0x10c>
 800a008:	9a01      	ldr	r2, [sp, #4]
 800a00a:	50a9      	str	r1, [r5, r2]
 800a00c:	3504      	adds	r5, #4
 800a00e:	e799      	b.n	8009f44 <__multiply+0x7c>
 800a010:	3e01      	subs	r6, #1
 800a012:	e79b      	b.n	8009f4c <__multiply+0x84>
 800a014:	0800ab44 	.word	0x0800ab44
 800a018:	0800ab55 	.word	0x0800ab55

0800a01c <__pow5mult>:
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a020:	4615      	mov	r5, r2
 800a022:	f012 0203 	ands.w	r2, r2, #3
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	d007      	beq.n	800a03c <__pow5mult+0x20>
 800a02c:	4c25      	ldr	r4, [pc, #148]	; (800a0c4 <__pow5mult+0xa8>)
 800a02e:	3a01      	subs	r2, #1
 800a030:	2300      	movs	r3, #0
 800a032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a036:	f7ff fe9d 	bl	8009d74 <__multadd>
 800a03a:	4607      	mov	r7, r0
 800a03c:	10ad      	asrs	r5, r5, #2
 800a03e:	d03d      	beq.n	800a0bc <__pow5mult+0xa0>
 800a040:	69f4      	ldr	r4, [r6, #28]
 800a042:	b97c      	cbnz	r4, 800a064 <__pow5mult+0x48>
 800a044:	2010      	movs	r0, #16
 800a046:	f7ff fd7f 	bl	8009b48 <malloc>
 800a04a:	4602      	mov	r2, r0
 800a04c:	61f0      	str	r0, [r6, #28]
 800a04e:	b928      	cbnz	r0, 800a05c <__pow5mult+0x40>
 800a050:	4b1d      	ldr	r3, [pc, #116]	; (800a0c8 <__pow5mult+0xac>)
 800a052:	481e      	ldr	r0, [pc, #120]	; (800a0cc <__pow5mult+0xb0>)
 800a054:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a058:	f000 fc2c 	bl	800a8b4 <__assert_func>
 800a05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a060:	6004      	str	r4, [r0, #0]
 800a062:	60c4      	str	r4, [r0, #12]
 800a064:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a06c:	b94c      	cbnz	r4, 800a082 <__pow5mult+0x66>
 800a06e:	f240 2171 	movw	r1, #625	; 0x271
 800a072:	4630      	mov	r0, r6
 800a074:	f7ff ff12 	bl	8009e9c <__i2b>
 800a078:	2300      	movs	r3, #0
 800a07a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a07e:	4604      	mov	r4, r0
 800a080:	6003      	str	r3, [r0, #0]
 800a082:	f04f 0900 	mov.w	r9, #0
 800a086:	07eb      	lsls	r3, r5, #31
 800a088:	d50a      	bpl.n	800a0a0 <__pow5mult+0x84>
 800a08a:	4639      	mov	r1, r7
 800a08c:	4622      	mov	r2, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff1a 	bl	8009ec8 <__multiply>
 800a094:	4639      	mov	r1, r7
 800a096:	4680      	mov	r8, r0
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff fe49 	bl	8009d30 <_Bfree>
 800a09e:	4647      	mov	r7, r8
 800a0a0:	106d      	asrs	r5, r5, #1
 800a0a2:	d00b      	beq.n	800a0bc <__pow5mult+0xa0>
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	b938      	cbnz	r0, 800a0b8 <__pow5mult+0x9c>
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff ff0b 	bl	8009ec8 <__multiply>
 800a0b2:	6020      	str	r0, [r4, #0]
 800a0b4:	f8c0 9000 	str.w	r9, [r0]
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	e7e4      	b.n	800a086 <__pow5mult+0x6a>
 800a0bc:	4638      	mov	r0, r7
 800a0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0800aca0 	.word	0x0800aca0
 800a0c8:	0800aad5 	.word	0x0800aad5
 800a0cc:	0800ab55 	.word	0x0800ab55

0800a0d0 <__lshift>:
 800a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	6849      	ldr	r1, [r1, #4]
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	4691      	mov	r9, r2
 800a0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0e8:	f108 0601 	add.w	r6, r8, #1
 800a0ec:	42b3      	cmp	r3, r6
 800a0ee:	db0b      	blt.n	800a108 <__lshift+0x38>
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff fddd 	bl	8009cb0 <_Balloc>
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	b948      	cbnz	r0, 800a10e <__lshift+0x3e>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b28      	ldr	r3, [pc, #160]	; (800a1a0 <__lshift+0xd0>)
 800a0fe:	4829      	ldr	r0, [pc, #164]	; (800a1a4 <__lshift+0xd4>)
 800a100:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a104:	f000 fbd6 	bl	800a8b4 <__assert_func>
 800a108:	3101      	adds	r1, #1
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	e7ee      	b.n	800a0ec <__lshift+0x1c>
 800a10e:	2300      	movs	r3, #0
 800a110:	f100 0114 	add.w	r1, r0, #20
 800a114:	f100 0210 	add.w	r2, r0, #16
 800a118:	4618      	mov	r0, r3
 800a11a:	4553      	cmp	r3, sl
 800a11c:	db33      	blt.n	800a186 <__lshift+0xb6>
 800a11e:	6920      	ldr	r0, [r4, #16]
 800a120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a124:	f104 0314 	add.w	r3, r4, #20
 800a128:	f019 091f 	ands.w	r9, r9, #31
 800a12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a130:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a134:	d02b      	beq.n	800a18e <__lshift+0xbe>
 800a136:	f1c9 0e20 	rsb	lr, r9, #32
 800a13a:	468a      	mov	sl, r1
 800a13c:	2200      	movs	r2, #0
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	fa00 f009 	lsl.w	r0, r0, r9
 800a144:	4310      	orrs	r0, r2
 800a146:	f84a 0b04 	str.w	r0, [sl], #4
 800a14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a14e:	459c      	cmp	ip, r3
 800a150:	fa22 f20e 	lsr.w	r2, r2, lr
 800a154:	d8f3      	bhi.n	800a13e <__lshift+0x6e>
 800a156:	ebac 0304 	sub.w	r3, ip, r4
 800a15a:	3b15      	subs	r3, #21
 800a15c:	f023 0303 	bic.w	r3, r3, #3
 800a160:	3304      	adds	r3, #4
 800a162:	f104 0015 	add.w	r0, r4, #21
 800a166:	4584      	cmp	ip, r0
 800a168:	bf38      	it	cc
 800a16a:	2304      	movcc	r3, #4
 800a16c:	50ca      	str	r2, [r1, r3]
 800a16e:	b10a      	cbz	r2, 800a174 <__lshift+0xa4>
 800a170:	f108 0602 	add.w	r6, r8, #2
 800a174:	3e01      	subs	r6, #1
 800a176:	4638      	mov	r0, r7
 800a178:	612e      	str	r6, [r5, #16]
 800a17a:	4621      	mov	r1, r4
 800a17c:	f7ff fdd8 	bl	8009d30 <_Bfree>
 800a180:	4628      	mov	r0, r5
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a186:	f842 0f04 	str.w	r0, [r2, #4]!
 800a18a:	3301      	adds	r3, #1
 800a18c:	e7c5      	b.n	800a11a <__lshift+0x4a>
 800a18e:	3904      	subs	r1, #4
 800a190:	f853 2b04 	ldr.w	r2, [r3], #4
 800a194:	f841 2f04 	str.w	r2, [r1, #4]!
 800a198:	459c      	cmp	ip, r3
 800a19a:	d8f9      	bhi.n	800a190 <__lshift+0xc0>
 800a19c:	e7ea      	b.n	800a174 <__lshift+0xa4>
 800a19e:	bf00      	nop
 800a1a0:	0800ab44 	.word	0x0800ab44
 800a1a4:	0800ab55 	.word	0x0800ab55

0800a1a8 <__mcmp>:
 800a1a8:	b530      	push	{r4, r5, lr}
 800a1aa:	6902      	ldr	r2, [r0, #16]
 800a1ac:	690c      	ldr	r4, [r1, #16]
 800a1ae:	1b12      	subs	r2, r2, r4
 800a1b0:	d10e      	bne.n	800a1d0 <__mcmp+0x28>
 800a1b2:	f100 0314 	add.w	r3, r0, #20
 800a1b6:	3114      	adds	r1, #20
 800a1b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1c8:	42a5      	cmp	r5, r4
 800a1ca:	d003      	beq.n	800a1d4 <__mcmp+0x2c>
 800a1cc:	d305      	bcc.n	800a1da <__mcmp+0x32>
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	bd30      	pop	{r4, r5, pc}
 800a1d4:	4283      	cmp	r3, r0
 800a1d6:	d3f3      	bcc.n	800a1c0 <__mcmp+0x18>
 800a1d8:	e7fa      	b.n	800a1d0 <__mcmp+0x28>
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1de:	e7f7      	b.n	800a1d0 <__mcmp+0x28>

0800a1e0 <__mdiff>:
 800a1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4690      	mov	r8, r2
 800a1ee:	f7ff ffdb 	bl	800a1a8 <__mcmp>
 800a1f2:	1e05      	subs	r5, r0, #0
 800a1f4:	d110      	bne.n	800a218 <__mdiff+0x38>
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f7ff fd59 	bl	8009cb0 <_Balloc>
 800a1fe:	b930      	cbnz	r0, 800a20e <__mdiff+0x2e>
 800a200:	4b3a      	ldr	r3, [pc, #232]	; (800a2ec <__mdiff+0x10c>)
 800a202:	4602      	mov	r2, r0
 800a204:	f240 2137 	movw	r1, #567	; 0x237
 800a208:	4839      	ldr	r0, [pc, #228]	; (800a2f0 <__mdiff+0x110>)
 800a20a:	f000 fb53 	bl	800a8b4 <__assert_func>
 800a20e:	2301      	movs	r3, #1
 800a210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a218:	bfa4      	itt	ge
 800a21a:	4643      	movge	r3, r8
 800a21c:	46a0      	movge	r8, r4
 800a21e:	4630      	mov	r0, r6
 800a220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a224:	bfa6      	itte	ge
 800a226:	461c      	movge	r4, r3
 800a228:	2500      	movge	r5, #0
 800a22a:	2501      	movlt	r5, #1
 800a22c:	f7ff fd40 	bl	8009cb0 <_Balloc>
 800a230:	b920      	cbnz	r0, 800a23c <__mdiff+0x5c>
 800a232:	4b2e      	ldr	r3, [pc, #184]	; (800a2ec <__mdiff+0x10c>)
 800a234:	4602      	mov	r2, r0
 800a236:	f240 2145 	movw	r1, #581	; 0x245
 800a23a:	e7e5      	b.n	800a208 <__mdiff+0x28>
 800a23c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a240:	6926      	ldr	r6, [r4, #16]
 800a242:	60c5      	str	r5, [r0, #12]
 800a244:	f104 0914 	add.w	r9, r4, #20
 800a248:	f108 0514 	add.w	r5, r8, #20
 800a24c:	f100 0e14 	add.w	lr, r0, #20
 800a250:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a258:	f108 0210 	add.w	r2, r8, #16
 800a25c:	46f2      	mov	sl, lr
 800a25e:	2100      	movs	r1, #0
 800a260:	f859 3b04 	ldr.w	r3, [r9], #4
 800a264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a268:	fa11 f88b 	uxtah	r8, r1, fp
 800a26c:	b299      	uxth	r1, r3
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	eba8 0801 	sub.w	r8, r8, r1
 800a274:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a278:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a27c:	fa1f f888 	uxth.w	r8, r8
 800a280:	1419      	asrs	r1, r3, #16
 800a282:	454e      	cmp	r6, r9
 800a284:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a288:	f84a 3b04 	str.w	r3, [sl], #4
 800a28c:	d8e8      	bhi.n	800a260 <__mdiff+0x80>
 800a28e:	1b33      	subs	r3, r6, r4
 800a290:	3b15      	subs	r3, #21
 800a292:	f023 0303 	bic.w	r3, r3, #3
 800a296:	3304      	adds	r3, #4
 800a298:	3415      	adds	r4, #21
 800a29a:	42a6      	cmp	r6, r4
 800a29c:	bf38      	it	cc
 800a29e:	2304      	movcc	r3, #4
 800a2a0:	441d      	add	r5, r3
 800a2a2:	4473      	add	r3, lr
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	462e      	mov	r6, r5
 800a2a8:	4566      	cmp	r6, ip
 800a2aa:	d30e      	bcc.n	800a2ca <__mdiff+0xea>
 800a2ac:	f10c 0203 	add.w	r2, ip, #3
 800a2b0:	1b52      	subs	r2, r2, r5
 800a2b2:	f022 0203 	bic.w	r2, r2, #3
 800a2b6:	3d03      	subs	r5, #3
 800a2b8:	45ac      	cmp	ip, r5
 800a2ba:	bf38      	it	cc
 800a2bc:	2200      	movcc	r2, #0
 800a2be:	4413      	add	r3, r2
 800a2c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a2c4:	b17a      	cbz	r2, 800a2e6 <__mdiff+0x106>
 800a2c6:	6107      	str	r7, [r0, #16]
 800a2c8:	e7a4      	b.n	800a214 <__mdiff+0x34>
 800a2ca:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2ce:	fa11 f288 	uxtah	r2, r1, r8
 800a2d2:	1414      	asrs	r4, r2, #16
 800a2d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2d8:	b292      	uxth	r2, r2
 800a2da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2de:	f84e 2b04 	str.w	r2, [lr], #4
 800a2e2:	1421      	asrs	r1, r4, #16
 800a2e4:	e7e0      	b.n	800a2a8 <__mdiff+0xc8>
 800a2e6:	3f01      	subs	r7, #1
 800a2e8:	e7ea      	b.n	800a2c0 <__mdiff+0xe0>
 800a2ea:	bf00      	nop
 800a2ec:	0800ab44 	.word	0x0800ab44
 800a2f0:	0800ab55 	.word	0x0800ab55

0800a2f4 <__d2b>:
 800a2f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	ec59 8b10 	vmov	r8, r9, d0
 800a300:	4616      	mov	r6, r2
 800a302:	f7ff fcd5 	bl	8009cb0 <_Balloc>
 800a306:	4604      	mov	r4, r0
 800a308:	b930      	cbnz	r0, 800a318 <__d2b+0x24>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <__d2b+0xac>)
 800a30e:	4825      	ldr	r0, [pc, #148]	; (800a3a4 <__d2b+0xb0>)
 800a310:	f240 310f 	movw	r1, #783	; 0x30f
 800a314:	f000 face 	bl	800a8b4 <__assert_func>
 800a318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a31c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a320:	bb2d      	cbnz	r5, 800a36e <__d2b+0x7a>
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	f1b8 0300 	subs.w	r3, r8, #0
 800a328:	d026      	beq.n	800a378 <__d2b+0x84>
 800a32a:	4668      	mov	r0, sp
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	f7ff fd87 	bl	8009e40 <__lo0bits>
 800a332:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a336:	b1e8      	cbz	r0, 800a374 <__d2b+0x80>
 800a338:	f1c0 0320 	rsb	r3, r0, #32
 800a33c:	fa02 f303 	lsl.w	r3, r2, r3
 800a340:	430b      	orrs	r3, r1
 800a342:	40c2      	lsrs	r2, r0
 800a344:	6163      	str	r3, [r4, #20]
 800a346:	9201      	str	r2, [sp, #4]
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	61a3      	str	r3, [r4, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf14      	ite	ne
 800a350:	2202      	movne	r2, #2
 800a352:	2201      	moveq	r2, #1
 800a354:	6122      	str	r2, [r4, #16]
 800a356:	b1bd      	cbz	r5, 800a388 <__d2b+0x94>
 800a358:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a35c:	4405      	add	r5, r0
 800a35e:	603d      	str	r5, [r7, #0]
 800a360:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a364:	6030      	str	r0, [r6, #0]
 800a366:	4620      	mov	r0, r4
 800a368:	b003      	add	sp, #12
 800a36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a36e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a372:	e7d6      	b.n	800a322 <__d2b+0x2e>
 800a374:	6161      	str	r1, [r4, #20]
 800a376:	e7e7      	b.n	800a348 <__d2b+0x54>
 800a378:	a801      	add	r0, sp, #4
 800a37a:	f7ff fd61 	bl	8009e40 <__lo0bits>
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	6163      	str	r3, [r4, #20]
 800a382:	3020      	adds	r0, #32
 800a384:	2201      	movs	r2, #1
 800a386:	e7e5      	b.n	800a354 <__d2b+0x60>
 800a388:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a38c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a390:	6038      	str	r0, [r7, #0]
 800a392:	6918      	ldr	r0, [r3, #16]
 800a394:	f7ff fd34 	bl	8009e00 <__hi0bits>
 800a398:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a39c:	e7e2      	b.n	800a364 <__d2b+0x70>
 800a39e:	bf00      	nop
 800a3a0:	0800ab44 	.word	0x0800ab44
 800a3a4:	0800ab55 	.word	0x0800ab55

0800a3a8 <__sfputc_r>:
 800a3a8:	6893      	ldr	r3, [r2, #8]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	b410      	push	{r4}
 800a3b0:	6093      	str	r3, [r2, #8]
 800a3b2:	da08      	bge.n	800a3c6 <__sfputc_r+0x1e>
 800a3b4:	6994      	ldr	r4, [r2, #24]
 800a3b6:	42a3      	cmp	r3, r4
 800a3b8:	db01      	blt.n	800a3be <__sfputc_r+0x16>
 800a3ba:	290a      	cmp	r1, #10
 800a3bc:	d103      	bne.n	800a3c6 <__sfputc_r+0x1e>
 800a3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c2:	f7fe bc5e 	b.w	8008c82 <__swbuf_r>
 800a3c6:	6813      	ldr	r3, [r2, #0]
 800a3c8:	1c58      	adds	r0, r3, #1
 800a3ca:	6010      	str	r0, [r2, #0]
 800a3cc:	7019      	strb	r1, [r3, #0]
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <__sfputs_r>:
 800a3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	4614      	mov	r4, r2
 800a3de:	18d5      	adds	r5, r2, r3
 800a3e0:	42ac      	cmp	r4, r5
 800a3e2:	d101      	bne.n	800a3e8 <__sfputs_r+0x12>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e007      	b.n	800a3f8 <__sfputs_r+0x22>
 800a3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ec:	463a      	mov	r2, r7
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ffda 	bl	800a3a8 <__sfputc_r>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d1f3      	bne.n	800a3e0 <__sfputs_r+0xa>
 800a3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3fc <_vfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	460d      	mov	r5, r1
 800a402:	b09d      	sub	sp, #116	; 0x74
 800a404:	4614      	mov	r4, r2
 800a406:	4698      	mov	r8, r3
 800a408:	4606      	mov	r6, r0
 800a40a:	b118      	cbz	r0, 800a414 <_vfiprintf_r+0x18>
 800a40c:	6a03      	ldr	r3, [r0, #32]
 800a40e:	b90b      	cbnz	r3, 800a414 <_vfiprintf_r+0x18>
 800a410:	f7fe fb50 	bl	8008ab4 <__sinit>
 800a414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a416:	07d9      	lsls	r1, r3, #31
 800a418:	d405      	bmi.n	800a426 <_vfiprintf_r+0x2a>
 800a41a:	89ab      	ldrh	r3, [r5, #12]
 800a41c:	059a      	lsls	r2, r3, #22
 800a41e:	d402      	bmi.n	800a426 <_vfiprintf_r+0x2a>
 800a420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a422:	f7fe fd40 	bl	8008ea6 <__retarget_lock_acquire_recursive>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	071b      	lsls	r3, r3, #28
 800a42a:	d501      	bpl.n	800a430 <_vfiprintf_r+0x34>
 800a42c:	692b      	ldr	r3, [r5, #16]
 800a42e:	b99b      	cbnz	r3, 800a458 <_vfiprintf_r+0x5c>
 800a430:	4629      	mov	r1, r5
 800a432:	4630      	mov	r0, r6
 800a434:	f7fe fc62 	bl	8008cfc <__swsetup_r>
 800a438:	b170      	cbz	r0, 800a458 <_vfiprintf_r+0x5c>
 800a43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a43c:	07dc      	lsls	r4, r3, #31
 800a43e:	d504      	bpl.n	800a44a <_vfiprintf_r+0x4e>
 800a440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a444:	b01d      	add	sp, #116	; 0x74
 800a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	0598      	lsls	r0, r3, #22
 800a44e:	d4f7      	bmi.n	800a440 <_vfiprintf_r+0x44>
 800a450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a452:	f7fe fd29 	bl	8008ea8 <__retarget_lock_release_recursive>
 800a456:	e7f3      	b.n	800a440 <_vfiprintf_r+0x44>
 800a458:	2300      	movs	r3, #0
 800a45a:	9309      	str	r3, [sp, #36]	; 0x24
 800a45c:	2320      	movs	r3, #32
 800a45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a462:	f8cd 800c 	str.w	r8, [sp, #12]
 800a466:	2330      	movs	r3, #48	; 0x30
 800a468:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a61c <_vfiprintf_r+0x220>
 800a46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a470:	f04f 0901 	mov.w	r9, #1
 800a474:	4623      	mov	r3, r4
 800a476:	469a      	mov	sl, r3
 800a478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47c:	b10a      	cbz	r2, 800a482 <_vfiprintf_r+0x86>
 800a47e:	2a25      	cmp	r2, #37	; 0x25
 800a480:	d1f9      	bne.n	800a476 <_vfiprintf_r+0x7a>
 800a482:	ebba 0b04 	subs.w	fp, sl, r4
 800a486:	d00b      	beq.n	800a4a0 <_vfiprintf_r+0xa4>
 800a488:	465b      	mov	r3, fp
 800a48a:	4622      	mov	r2, r4
 800a48c:	4629      	mov	r1, r5
 800a48e:	4630      	mov	r0, r6
 800a490:	f7ff ffa1 	bl	800a3d6 <__sfputs_r>
 800a494:	3001      	adds	r0, #1
 800a496:	f000 80a9 	beq.w	800a5ec <_vfiprintf_r+0x1f0>
 800a49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49c:	445a      	add	r2, fp
 800a49e:	9209      	str	r2, [sp, #36]	; 0x24
 800a4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80a1 	beq.w	800a5ec <_vfiprintf_r+0x1f0>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b4:	f10a 0a01 	add.w	sl, sl, #1
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	9307      	str	r3, [sp, #28]
 800a4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a4c2:	4654      	mov	r4, sl
 800a4c4:	2205      	movs	r2, #5
 800a4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ca:	4854      	ldr	r0, [pc, #336]	; (800a61c <_vfiprintf_r+0x220>)
 800a4cc:	f7f5 feb8 	bl	8000240 <memchr>
 800a4d0:	9a04      	ldr	r2, [sp, #16]
 800a4d2:	b9d8      	cbnz	r0, 800a50c <_vfiprintf_r+0x110>
 800a4d4:	06d1      	lsls	r1, r2, #27
 800a4d6:	bf44      	itt	mi
 800a4d8:	2320      	movmi	r3, #32
 800a4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4de:	0713      	lsls	r3, r2, #28
 800a4e0:	bf44      	itt	mi
 800a4e2:	232b      	movmi	r3, #43	; 0x2b
 800a4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ee:	d015      	beq.n	800a51c <_vfiprintf_r+0x120>
 800a4f0:	9a07      	ldr	r2, [sp, #28]
 800a4f2:	4654      	mov	r4, sl
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	f04f 0c0a 	mov.w	ip, #10
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a500:	3b30      	subs	r3, #48	; 0x30
 800a502:	2b09      	cmp	r3, #9
 800a504:	d94d      	bls.n	800a5a2 <_vfiprintf_r+0x1a6>
 800a506:	b1b0      	cbz	r0, 800a536 <_vfiprintf_r+0x13a>
 800a508:	9207      	str	r2, [sp, #28]
 800a50a:	e014      	b.n	800a536 <_vfiprintf_r+0x13a>
 800a50c:	eba0 0308 	sub.w	r3, r0, r8
 800a510:	fa09 f303 	lsl.w	r3, r9, r3
 800a514:	4313      	orrs	r3, r2
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	46a2      	mov	sl, r4
 800a51a:	e7d2      	b.n	800a4c2 <_vfiprintf_r+0xc6>
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	1d19      	adds	r1, r3, #4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	9103      	str	r1, [sp, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	bfbb      	ittet	lt
 800a528:	425b      	neglt	r3, r3
 800a52a:	f042 0202 	orrlt.w	r2, r2, #2
 800a52e:	9307      	strge	r3, [sp, #28]
 800a530:	9307      	strlt	r3, [sp, #28]
 800a532:	bfb8      	it	lt
 800a534:	9204      	strlt	r2, [sp, #16]
 800a536:	7823      	ldrb	r3, [r4, #0]
 800a538:	2b2e      	cmp	r3, #46	; 0x2e
 800a53a:	d10c      	bne.n	800a556 <_vfiprintf_r+0x15a>
 800a53c:	7863      	ldrb	r3, [r4, #1]
 800a53e:	2b2a      	cmp	r3, #42	; 0x2a
 800a540:	d134      	bne.n	800a5ac <_vfiprintf_r+0x1b0>
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	1d1a      	adds	r2, r3, #4
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	9203      	str	r2, [sp, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bfb8      	it	lt
 800a54e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a552:	3402      	adds	r4, #2
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a62c <_vfiprintf_r+0x230>
 800a55a:	7821      	ldrb	r1, [r4, #0]
 800a55c:	2203      	movs	r2, #3
 800a55e:	4650      	mov	r0, sl
 800a560:	f7f5 fe6e 	bl	8000240 <memchr>
 800a564:	b138      	cbz	r0, 800a576 <_vfiprintf_r+0x17a>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	eba0 000a 	sub.w	r0, r0, sl
 800a56c:	2240      	movs	r2, #64	; 0x40
 800a56e:	4082      	lsls	r2, r0
 800a570:	4313      	orrs	r3, r2
 800a572:	3401      	adds	r4, #1
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57a:	4829      	ldr	r0, [pc, #164]	; (800a620 <_vfiprintf_r+0x224>)
 800a57c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a580:	2206      	movs	r2, #6
 800a582:	f7f5 fe5d 	bl	8000240 <memchr>
 800a586:	2800      	cmp	r0, #0
 800a588:	d03f      	beq.n	800a60a <_vfiprintf_r+0x20e>
 800a58a:	4b26      	ldr	r3, [pc, #152]	; (800a624 <_vfiprintf_r+0x228>)
 800a58c:	bb1b      	cbnz	r3, 800a5d6 <_vfiprintf_r+0x1da>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	3307      	adds	r3, #7
 800a592:	f023 0307 	bic.w	r3, r3, #7
 800a596:	3308      	adds	r3, #8
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59c:	443b      	add	r3, r7
 800a59e:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a0:	e768      	b.n	800a474 <_vfiprintf_r+0x78>
 800a5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e7a6      	b.n	800a4fa <_vfiprintf_r+0xfe>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	3401      	adds	r4, #1
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f04f 0c0a 	mov.w	ip, #10
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5be:	3a30      	subs	r2, #48	; 0x30
 800a5c0:	2a09      	cmp	r2, #9
 800a5c2:	d903      	bls.n	800a5cc <_vfiprintf_r+0x1d0>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0c6      	beq.n	800a556 <_vfiprintf_r+0x15a>
 800a5c8:	9105      	str	r1, [sp, #20]
 800a5ca:	e7c4      	b.n	800a556 <_vfiprintf_r+0x15a>
 800a5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e7f0      	b.n	800a5b8 <_vfiprintf_r+0x1bc>
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	462a      	mov	r2, r5
 800a5dc:	4b12      	ldr	r3, [pc, #72]	; (800a628 <_vfiprintf_r+0x22c>)
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7fd fe31 	bl	8008248 <_printf_float>
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	1c78      	adds	r0, r7, #1
 800a5ea:	d1d6      	bne.n	800a59a <_vfiprintf_r+0x19e>
 800a5ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ee:	07d9      	lsls	r1, r3, #31
 800a5f0:	d405      	bmi.n	800a5fe <_vfiprintf_r+0x202>
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	059a      	lsls	r2, r3, #22
 800a5f6:	d402      	bmi.n	800a5fe <_vfiprintf_r+0x202>
 800a5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5fa:	f7fe fc55 	bl	8008ea8 <__retarget_lock_release_recursive>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	065b      	lsls	r3, r3, #25
 800a602:	f53f af1d 	bmi.w	800a440 <_vfiprintf_r+0x44>
 800a606:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a608:	e71c      	b.n	800a444 <_vfiprintf_r+0x48>
 800a60a:	ab03      	add	r3, sp, #12
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	462a      	mov	r2, r5
 800a610:	4b05      	ldr	r3, [pc, #20]	; (800a628 <_vfiprintf_r+0x22c>)
 800a612:	a904      	add	r1, sp, #16
 800a614:	4630      	mov	r0, r6
 800a616:	f7fe f89f 	bl	8008758 <_printf_i>
 800a61a:	e7e4      	b.n	800a5e6 <_vfiprintf_r+0x1ea>
 800a61c:	0800acac 	.word	0x0800acac
 800a620:	0800acb6 	.word	0x0800acb6
 800a624:	08008249 	.word	0x08008249
 800a628:	0800a3d7 	.word	0x0800a3d7
 800a62c:	0800acb2 	.word	0x0800acb2

0800a630 <__sflush_r>:
 800a630:	898a      	ldrh	r2, [r1, #12]
 800a632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a636:	4605      	mov	r5, r0
 800a638:	0710      	lsls	r0, r2, #28
 800a63a:	460c      	mov	r4, r1
 800a63c:	d458      	bmi.n	800a6f0 <__sflush_r+0xc0>
 800a63e:	684b      	ldr	r3, [r1, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc05      	bgt.n	800a650 <__sflush_r+0x20>
 800a644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	dc02      	bgt.n	800a650 <__sflush_r+0x20>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a652:	2e00      	cmp	r6, #0
 800a654:	d0f9      	beq.n	800a64a <__sflush_r+0x1a>
 800a656:	2300      	movs	r3, #0
 800a658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a65c:	682f      	ldr	r7, [r5, #0]
 800a65e:	6a21      	ldr	r1, [r4, #32]
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	d032      	beq.n	800a6ca <__sflush_r+0x9a>
 800a664:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	075a      	lsls	r2, r3, #29
 800a66a:	d505      	bpl.n	800a678 <__sflush_r+0x48>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	1ac0      	subs	r0, r0, r3
 800a670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a672:	b10b      	cbz	r3, 800a678 <__sflush_r+0x48>
 800a674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a676:	1ac0      	subs	r0, r0, r3
 800a678:	2300      	movs	r3, #0
 800a67a:	4602      	mov	r2, r0
 800a67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67e:	6a21      	ldr	r1, [r4, #32]
 800a680:	4628      	mov	r0, r5
 800a682:	47b0      	blx	r6
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	d106      	bne.n	800a698 <__sflush_r+0x68>
 800a68a:	6829      	ldr	r1, [r5, #0]
 800a68c:	291d      	cmp	r1, #29
 800a68e:	d82b      	bhi.n	800a6e8 <__sflush_r+0xb8>
 800a690:	4a29      	ldr	r2, [pc, #164]	; (800a738 <__sflush_r+0x108>)
 800a692:	410a      	asrs	r2, r1
 800a694:	07d6      	lsls	r6, r2, #31
 800a696:	d427      	bmi.n	800a6e8 <__sflush_r+0xb8>
 800a698:	2200      	movs	r2, #0
 800a69a:	6062      	str	r2, [r4, #4]
 800a69c:	04d9      	lsls	r1, r3, #19
 800a69e:	6922      	ldr	r2, [r4, #16]
 800a6a0:	6022      	str	r2, [r4, #0]
 800a6a2:	d504      	bpl.n	800a6ae <__sflush_r+0x7e>
 800a6a4:	1c42      	adds	r2, r0, #1
 800a6a6:	d101      	bne.n	800a6ac <__sflush_r+0x7c>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b903      	cbnz	r3, 800a6ae <__sflush_r+0x7e>
 800a6ac:	6560      	str	r0, [r4, #84]	; 0x54
 800a6ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6b0:	602f      	str	r7, [r5, #0]
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	d0c9      	beq.n	800a64a <__sflush_r+0x1a>
 800a6b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6ba:	4299      	cmp	r1, r3
 800a6bc:	d002      	beq.n	800a6c4 <__sflush_r+0x94>
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f7ff f9f6 	bl	8009ab0 <_free_r>
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	6360      	str	r0, [r4, #52]	; 0x34
 800a6c8:	e7c0      	b.n	800a64c <__sflush_r+0x1c>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	47b0      	blx	r6
 800a6d0:	1c41      	adds	r1, r0, #1
 800a6d2:	d1c8      	bne.n	800a666 <__sflush_r+0x36>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0c5      	beq.n	800a666 <__sflush_r+0x36>
 800a6da:	2b1d      	cmp	r3, #29
 800a6dc:	d001      	beq.n	800a6e2 <__sflush_r+0xb2>
 800a6de:	2b16      	cmp	r3, #22
 800a6e0:	d101      	bne.n	800a6e6 <__sflush_r+0xb6>
 800a6e2:	602f      	str	r7, [r5, #0]
 800a6e4:	e7b1      	b.n	800a64a <__sflush_r+0x1a>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	e7ad      	b.n	800a64c <__sflush_r+0x1c>
 800a6f0:	690f      	ldr	r7, [r1, #16]
 800a6f2:	2f00      	cmp	r7, #0
 800a6f4:	d0a9      	beq.n	800a64a <__sflush_r+0x1a>
 800a6f6:	0793      	lsls	r3, r2, #30
 800a6f8:	680e      	ldr	r6, [r1, #0]
 800a6fa:	bf08      	it	eq
 800a6fc:	694b      	ldreq	r3, [r1, #20]
 800a6fe:	600f      	str	r7, [r1, #0]
 800a700:	bf18      	it	ne
 800a702:	2300      	movne	r3, #0
 800a704:	eba6 0807 	sub.w	r8, r6, r7
 800a708:	608b      	str	r3, [r1, #8]
 800a70a:	f1b8 0f00 	cmp.w	r8, #0
 800a70e:	dd9c      	ble.n	800a64a <__sflush_r+0x1a>
 800a710:	6a21      	ldr	r1, [r4, #32]
 800a712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a714:	4643      	mov	r3, r8
 800a716:	463a      	mov	r2, r7
 800a718:	4628      	mov	r0, r5
 800a71a:	47b0      	blx	r6
 800a71c:	2800      	cmp	r0, #0
 800a71e:	dc06      	bgt.n	800a72e <__sflush_r+0xfe>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a72c:	e78e      	b.n	800a64c <__sflush_r+0x1c>
 800a72e:	4407      	add	r7, r0
 800a730:	eba8 0800 	sub.w	r8, r8, r0
 800a734:	e7e9      	b.n	800a70a <__sflush_r+0xda>
 800a736:	bf00      	nop
 800a738:	dfbffffe 	.word	0xdfbffffe

0800a73c <_fflush_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b913      	cbnz	r3, 800a74c <_fflush_r+0x10>
 800a746:	2500      	movs	r5, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	b118      	cbz	r0, 800a756 <_fflush_r+0x1a>
 800a74e:	6a03      	ldr	r3, [r0, #32]
 800a750:	b90b      	cbnz	r3, 800a756 <_fflush_r+0x1a>
 800a752:	f7fe f9af 	bl	8008ab4 <__sinit>
 800a756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0f3      	beq.n	800a746 <_fflush_r+0xa>
 800a75e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a760:	07d0      	lsls	r0, r2, #31
 800a762:	d404      	bmi.n	800a76e <_fflush_r+0x32>
 800a764:	0599      	lsls	r1, r3, #22
 800a766:	d402      	bmi.n	800a76e <_fflush_r+0x32>
 800a768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a76a:	f7fe fb9c 	bl	8008ea6 <__retarget_lock_acquire_recursive>
 800a76e:	4628      	mov	r0, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f7ff ff5d 	bl	800a630 <__sflush_r>
 800a776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a778:	07da      	lsls	r2, r3, #31
 800a77a:	4605      	mov	r5, r0
 800a77c:	d4e4      	bmi.n	800a748 <_fflush_r+0xc>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	059b      	lsls	r3, r3, #22
 800a782:	d4e1      	bmi.n	800a748 <_fflush_r+0xc>
 800a784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a786:	f7fe fb8f 	bl	8008ea8 <__retarget_lock_release_recursive>
 800a78a:	e7dd      	b.n	800a748 <_fflush_r+0xc>

0800a78c <__swhatbuf_r>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	460c      	mov	r4, r1
 800a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a794:	2900      	cmp	r1, #0
 800a796:	b096      	sub	sp, #88	; 0x58
 800a798:	4615      	mov	r5, r2
 800a79a:	461e      	mov	r6, r3
 800a79c:	da0d      	bge.n	800a7ba <__swhatbuf_r+0x2e>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7a4:	f04f 0100 	mov.w	r1, #0
 800a7a8:	bf0c      	ite	eq
 800a7aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7ae:	2340      	movne	r3, #64	; 0x40
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	6031      	str	r1, [r6, #0]
 800a7b4:	602b      	str	r3, [r5, #0]
 800a7b6:	b016      	add	sp, #88	; 0x58
 800a7b8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ba:	466a      	mov	r2, sp
 800a7bc:	f000 f848 	bl	800a850 <_fstat_r>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dbec      	blt.n	800a79e <__swhatbuf_r+0x12>
 800a7c4:	9901      	ldr	r1, [sp, #4]
 800a7c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7ce:	4259      	negs	r1, r3
 800a7d0:	4159      	adcs	r1, r3
 800a7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d6:	e7eb      	b.n	800a7b0 <__swhatbuf_r+0x24>

0800a7d8 <__smakebuf_r>:
 800a7d8:	898b      	ldrh	r3, [r1, #12]
 800a7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7dc:	079d      	lsls	r5, r3, #30
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	d507      	bpl.n	800a7f4 <__smakebuf_r+0x1c>
 800a7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	6123      	str	r3, [r4, #16]
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	6163      	str	r3, [r4, #20]
 800a7f0:	b002      	add	sp, #8
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	ab01      	add	r3, sp, #4
 800a7f6:	466a      	mov	r2, sp
 800a7f8:	f7ff ffc8 	bl	800a78c <__swhatbuf_r>
 800a7fc:	9900      	ldr	r1, [sp, #0]
 800a7fe:	4605      	mov	r5, r0
 800a800:	4630      	mov	r0, r6
 800a802:	f7ff f9c9 	bl	8009b98 <_malloc_r>
 800a806:	b948      	cbnz	r0, 800a81c <__smakebuf_r+0x44>
 800a808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80c:	059a      	lsls	r2, r3, #22
 800a80e:	d4ef      	bmi.n	800a7f0 <__smakebuf_r+0x18>
 800a810:	f023 0303 	bic.w	r3, r3, #3
 800a814:	f043 0302 	orr.w	r3, r3, #2
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	e7e3      	b.n	800a7e4 <__smakebuf_r+0xc>
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	6020      	str	r0, [r4, #0]
 800a820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	9b00      	ldr	r3, [sp, #0]
 800a828:	6163      	str	r3, [r4, #20]
 800a82a:	9b01      	ldr	r3, [sp, #4]
 800a82c:	6120      	str	r0, [r4, #16]
 800a82e:	b15b      	cbz	r3, 800a848 <__smakebuf_r+0x70>
 800a830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a834:	4630      	mov	r0, r6
 800a836:	f000 f81d 	bl	800a874 <_isatty_r>
 800a83a:	b128      	cbz	r0, 800a848 <__smakebuf_r+0x70>
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	f023 0303 	bic.w	r3, r3, #3
 800a842:	f043 0301 	orr.w	r3, r3, #1
 800a846:	81a3      	strh	r3, [r4, #12]
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	431d      	orrs	r5, r3
 800a84c:	81a5      	strh	r5, [r4, #12]
 800a84e:	e7cf      	b.n	800a7f0 <__smakebuf_r+0x18>

0800a850 <_fstat_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_fstat_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f7f8 f9b4 	bl	8002bca <_fstat>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_fstat_r+0x1c>
 800a866:	682b      	ldr	r3, [r5, #0]
 800a868:	b103      	cbz	r3, 800a86c <_fstat_r+0x1c>
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	20000af0 	.word	0x20000af0

0800a874 <_isatty_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d06      	ldr	r5, [pc, #24]	; (800a890 <_isatty_r+0x1c>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	602b      	str	r3, [r5, #0]
 800a880:	f7f8 f9b3 	bl	8002bea <_isatty>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_isatty_r+0x1a>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_isatty_r+0x1a>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20000af0 	.word	0x20000af0

0800a894 <_sbrk_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d06      	ldr	r5, [pc, #24]	; (800a8b0 <_sbrk_r+0x1c>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f8 f9bc 	bl	8002c1c <_sbrk>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_sbrk_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_sbrk_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20000af0 	.word	0x20000af0

0800a8b4 <__assert_func>:
 800a8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8b6:	4614      	mov	r4, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <__assert_func+0x2c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4605      	mov	r5, r0
 800a8c0:	68d8      	ldr	r0, [r3, #12]
 800a8c2:	b14c      	cbz	r4, 800a8d8 <__assert_func+0x24>
 800a8c4:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <__assert_func+0x30>)
 800a8c6:	9100      	str	r1, [sp, #0]
 800a8c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8cc:	4906      	ldr	r1, [pc, #24]	; (800a8e8 <__assert_func+0x34>)
 800a8ce:	462b      	mov	r3, r5
 800a8d0:	f000 f844 	bl	800a95c <fiprintf>
 800a8d4:	f000 f854 	bl	800a980 <abort>
 800a8d8:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <__assert_func+0x38>)
 800a8da:	461c      	mov	r4, r3
 800a8dc:	e7f3      	b.n	800a8c6 <__assert_func+0x12>
 800a8de:	bf00      	nop
 800a8e0:	20000074 	.word	0x20000074
 800a8e4:	0800acc7 	.word	0x0800acc7
 800a8e8:	0800acd4 	.word	0x0800acd4
 800a8ec:	0800ad02 	.word	0x0800ad02

0800a8f0 <_calloc_r>:
 800a8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8f2:	fba1 2402 	umull	r2, r4, r1, r2
 800a8f6:	b94c      	cbnz	r4, 800a90c <_calloc_r+0x1c>
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	9201      	str	r2, [sp, #4]
 800a8fc:	f7ff f94c 	bl	8009b98 <_malloc_r>
 800a900:	9a01      	ldr	r2, [sp, #4]
 800a902:	4605      	mov	r5, r0
 800a904:	b930      	cbnz	r0, 800a914 <_calloc_r+0x24>
 800a906:	4628      	mov	r0, r5
 800a908:	b003      	add	sp, #12
 800a90a:	bd30      	pop	{r4, r5, pc}
 800a90c:	220c      	movs	r2, #12
 800a90e:	6002      	str	r2, [r0, #0]
 800a910:	2500      	movs	r5, #0
 800a912:	e7f8      	b.n	800a906 <_calloc_r+0x16>
 800a914:	4621      	mov	r1, r4
 800a916:	f7fe fa49 	bl	8008dac <memset>
 800a91a:	e7f4      	b.n	800a906 <_calloc_r+0x16>

0800a91c <__ascii_mbtowc>:
 800a91c:	b082      	sub	sp, #8
 800a91e:	b901      	cbnz	r1, 800a922 <__ascii_mbtowc+0x6>
 800a920:	a901      	add	r1, sp, #4
 800a922:	b142      	cbz	r2, 800a936 <__ascii_mbtowc+0x1a>
 800a924:	b14b      	cbz	r3, 800a93a <__ascii_mbtowc+0x1e>
 800a926:	7813      	ldrb	r3, [r2, #0]
 800a928:	600b      	str	r3, [r1, #0]
 800a92a:	7812      	ldrb	r2, [r2, #0]
 800a92c:	1e10      	subs	r0, r2, #0
 800a92e:	bf18      	it	ne
 800a930:	2001      	movne	r0, #1
 800a932:	b002      	add	sp, #8
 800a934:	4770      	bx	lr
 800a936:	4610      	mov	r0, r2
 800a938:	e7fb      	b.n	800a932 <__ascii_mbtowc+0x16>
 800a93a:	f06f 0001 	mvn.w	r0, #1
 800a93e:	e7f8      	b.n	800a932 <__ascii_mbtowc+0x16>

0800a940 <__ascii_wctomb>:
 800a940:	b149      	cbz	r1, 800a956 <__ascii_wctomb+0x16>
 800a942:	2aff      	cmp	r2, #255	; 0xff
 800a944:	bf85      	ittet	hi
 800a946:	238a      	movhi	r3, #138	; 0x8a
 800a948:	6003      	strhi	r3, [r0, #0]
 800a94a:	700a      	strbls	r2, [r1, #0]
 800a94c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a950:	bf98      	it	ls
 800a952:	2001      	movls	r0, #1
 800a954:	4770      	bx	lr
 800a956:	4608      	mov	r0, r1
 800a958:	4770      	bx	lr
	...

0800a95c <fiprintf>:
 800a95c:	b40e      	push	{r1, r2, r3}
 800a95e:	b503      	push	{r0, r1, lr}
 800a960:	4601      	mov	r1, r0
 800a962:	ab03      	add	r3, sp, #12
 800a964:	4805      	ldr	r0, [pc, #20]	; (800a97c <fiprintf+0x20>)
 800a966:	f853 2b04 	ldr.w	r2, [r3], #4
 800a96a:	6800      	ldr	r0, [r0, #0]
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	f7ff fd45 	bl	800a3fc <_vfiprintf_r>
 800a972:	b002      	add	sp, #8
 800a974:	f85d eb04 	ldr.w	lr, [sp], #4
 800a978:	b003      	add	sp, #12
 800a97a:	4770      	bx	lr
 800a97c:	20000074 	.word	0x20000074

0800a980 <abort>:
 800a980:	b508      	push	{r3, lr}
 800a982:	2006      	movs	r0, #6
 800a984:	f000 f82c 	bl	800a9e0 <raise>
 800a988:	2001      	movs	r0, #1
 800a98a:	f7f8 f8eb 	bl	8002b64 <_exit>

0800a98e <_raise_r>:
 800a98e:	291f      	cmp	r1, #31
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	460d      	mov	r5, r1
 800a996:	d904      	bls.n	800a9a2 <_raise_r+0x14>
 800a998:	2316      	movs	r3, #22
 800a99a:	6003      	str	r3, [r0, #0]
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9a0:	bd38      	pop	{r3, r4, r5, pc}
 800a9a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9a4:	b112      	cbz	r2, 800a9ac <_raise_r+0x1e>
 800a9a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9aa:	b94b      	cbnz	r3, 800a9c0 <_raise_r+0x32>
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 f831 	bl	800aa14 <_getpid_r>
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9bc:	f000 b818 	b.w	800a9f0 <_kill_r>
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d00a      	beq.n	800a9da <_raise_r+0x4c>
 800a9c4:	1c59      	adds	r1, r3, #1
 800a9c6:	d103      	bne.n	800a9d0 <_raise_r+0x42>
 800a9c8:	2316      	movs	r3, #22
 800a9ca:	6003      	str	r3, [r0, #0]
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	e7e7      	b.n	800a9a0 <_raise_r+0x12>
 800a9d0:	2400      	movs	r4, #0
 800a9d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	4798      	blx	r3
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e7e0      	b.n	800a9a0 <_raise_r+0x12>
	...

0800a9e0 <raise>:
 800a9e0:	4b02      	ldr	r3, [pc, #8]	; (800a9ec <raise+0xc>)
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	f7ff bfd2 	b.w	800a98e <_raise_r>
 800a9ea:	bf00      	nop
 800a9ec:	20000074 	.word	0x20000074

0800a9f0 <_kill_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	; (800aa10 <_kill_r+0x20>)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	602b      	str	r3, [r5, #0]
 800a9fe:	f7f8 f8a1 	bl	8002b44 <_kill>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d102      	bne.n	800aa0c <_kill_r+0x1c>
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	b103      	cbz	r3, 800aa0c <_kill_r+0x1c>
 800aa0a:	6023      	str	r3, [r4, #0]
 800aa0c:	bd38      	pop	{r3, r4, r5, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000af0 	.word	0x20000af0

0800aa14 <_getpid_r>:
 800aa14:	f7f8 b88e 	b.w	8002b34 <_getpid>

0800aa18 <_init>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	bf00      	nop
 800aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1e:	bc08      	pop	{r3}
 800aa20:	469e      	mov	lr, r3
 800aa22:	4770      	bx	lr

0800aa24 <_fini>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	bf00      	nop
 800aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2a:	bc08      	pop	{r3}
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	4770      	bx	lr
